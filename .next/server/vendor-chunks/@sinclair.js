"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sinclair";
exports.ids = ["vendor-chunks/@sinclair"];
exports.modules = {

/***/ "(rsc)/./node_modules/@sinclair/typebox/typebox.js":
/*!***************************************************!*\
  !*** ./node_modules/@sinclair/typebox/typebox.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Type = exports.StandardType = exports.ExtendedTypeBuilder = exports.StandardTypeBuilder = exports.TypeBuilder = exports.TemplateLiteralDslParser = exports.TemplateLiteralGenerator = exports.TemplateLiteralFinite = exports.TemplateLiteralParser = exports.TemplateLiteralParserError = exports.TemplateLiteralResolver = exports.TemplateLiteralPattern = exports.UnionResolver = exports.KeyArrayResolver = exports.KeyResolver = exports.ObjectMap = exports.IndexedAccessor = exports.TypeClone = exports.TypeExtends = exports.TypeExtendsResult = exports.ExtendsUndefined = exports.TypeGuard = exports.TypeGuardUnknownTypeError = exports.FormatRegistry = exports.TypeRegistry = exports.PatternStringExact = exports.PatternNumberExact = exports.PatternBooleanExact = exports.PatternString = exports.PatternNumber = exports.PatternBoolean = exports.Kind = exports.Hint = exports.Modifier = void 0;\n// --------------------------------------------------------------------------\n// Symbols\n// --------------------------------------------------------------------------\nexports.Modifier = Symbol.for(\"TypeBox.Modifier\");\nexports.Hint = Symbol.for(\"TypeBox.Hint\");\nexports.Kind = Symbol.for(\"TypeBox.Kind\");\n// --------------------------------------------------------------------------\n// Patterns\n// --------------------------------------------------------------------------\nexports.PatternBoolean = \"(true|false)\";\nexports.PatternNumber = \"(0|[1-9][0-9]*)\";\nexports.PatternString = \"(.*)\";\nexports.PatternBooleanExact = `^${exports.PatternBoolean}$`;\nexports.PatternNumberExact = `^${exports.PatternNumber}$`;\nexports.PatternStringExact = `^${exports.PatternString}$`;\n/** A registry for user defined types */ var TypeRegistry;\n(function(TypeRegistry) {\n    const map = new Map();\n    /** Returns the entries in this registry */ function Entries() {\n        return new Map(map);\n    }\n    TypeRegistry.Entries = Entries;\n    /** Clears all user defined types */ function Clear() {\n        return map.clear();\n    }\n    TypeRegistry.Clear = Clear;\n    /** Returns true if this registry contains this kind */ function Has(kind) {\n        return map.has(kind);\n    }\n    TypeRegistry.Has = Has;\n    /** Sets a validation function for a user defined type */ function Set1(kind, func) {\n        map.set(kind, func);\n    }\n    TypeRegistry.Set = Set1;\n    /** Gets a custom validation function for a user defined type */ function Get(kind) {\n        return map.get(kind);\n    }\n    TypeRegistry.Get = Get;\n})(TypeRegistry || (exports.TypeRegistry = TypeRegistry = {}));\n/** A registry for user defined string formats */ var FormatRegistry;\n(function(FormatRegistry) {\n    const map = new Map();\n    /** Returns the entries in this registry */ function Entries() {\n        return new Map(map);\n    }\n    FormatRegistry.Entries = Entries;\n    /** Clears all user defined string formats */ function Clear() {\n        return map.clear();\n    }\n    FormatRegistry.Clear = Clear;\n    /** Returns true if the user defined string format exists */ function Has(format) {\n        return map.has(format);\n    }\n    FormatRegistry.Has = Has;\n    /** Sets a validation function for a user defined string format */ function Set1(format, func) {\n        map.set(format, func);\n    }\n    FormatRegistry.Set = Set1;\n    /** Gets a validation function for a user defined string format */ function Get(format) {\n        return map.get(format);\n    }\n    FormatRegistry.Get = Get;\n})(FormatRegistry || (exports.FormatRegistry = FormatRegistry = {}));\n// --------------------------------------------------------------------------\n// TypeGuard\n// --------------------------------------------------------------------------\nclass TypeGuardUnknownTypeError extends Error {\n    constructor(schema){\n        super(\"TypeGuard: Unknown type\");\n        this.schema = schema;\n    }\n}\nexports.TypeGuardUnknownTypeError = TypeGuardUnknownTypeError;\n/** Provides functions to test if JavaScript values are TypeBox types */ var TypeGuard;\n(function(TypeGuard) {\n    function IsObject(value) {\n        return typeof value === \"object\" && value !== null && !Array.isArray(value);\n    }\n    function IsArray(value) {\n        return typeof value === \"object\" && value !== null && Array.isArray(value);\n    }\n    function IsPattern(value) {\n        try {\n            new RegExp(value);\n            return true;\n        } catch  {\n            return false;\n        }\n    }\n    function IsControlCharacterFree(value) {\n        if (typeof value !== \"string\") return false;\n        for(let i = 0; i < value.length; i++){\n            const code = value.charCodeAt(i);\n            if (code >= 7 && code <= 13 || code === 27 || code === 127) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function IsAdditionalProperties(value) {\n        return IsOptionalBoolean(value) || TSchema(value);\n    }\n    function IsBigInt(value) {\n        return typeof value === \"bigint\";\n    }\n    function IsString(value) {\n        return typeof value === \"string\";\n    }\n    function IsNumber(value) {\n        return typeof value === \"number\" && globalThis.Number.isFinite(value);\n    }\n    function IsBoolean(value) {\n        return typeof value === \"boolean\";\n    }\n    function IsOptionalBigInt(value) {\n        return value === undefined || value !== undefined && IsBigInt(value);\n    }\n    function IsOptionalNumber(value) {\n        return value === undefined || value !== undefined && IsNumber(value);\n    }\n    function IsOptionalBoolean(value) {\n        return value === undefined || value !== undefined && IsBoolean(value);\n    }\n    function IsOptionalString(value) {\n        return value === undefined || value !== undefined && IsString(value);\n    }\n    function IsOptionalPattern(value) {\n        return value === undefined || value !== undefined && IsString(value) && IsControlCharacterFree(value) && IsPattern(value);\n    }\n    function IsOptionalFormat(value) {\n        return value === undefined || value !== undefined && IsString(value) && IsControlCharacterFree(value);\n    }\n    function IsOptionalSchema(value) {\n        return value === undefined || TSchema(value);\n    }\n    /** Returns true if the given schema is TAny */ function TAny(schema) {\n        return TKind(schema) && schema[exports.Kind] === \"Any\" && IsOptionalString(schema.$id);\n    }\n    TypeGuard.TAny = TAny;\n    /** Returns true if the given schema is TArray */ function TArray(schema) {\n        return TKind(schema) && schema[exports.Kind] === \"Array\" && schema.type === \"array\" && IsOptionalString(schema.$id) && TSchema(schema.items) && IsOptionalNumber(schema.minItems) && IsOptionalNumber(schema.maxItems) && IsOptionalBoolean(schema.uniqueItems);\n    }\n    TypeGuard.TArray = TArray;\n    /** Returns true if the given schema is TBigInt */ function TBigInt(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"BigInt\" && schema.type === \"null\" && schema.typeOf === \"BigInt\" && IsOptionalString(schema.$id) && IsOptionalBigInt(schema.multipleOf) && IsOptionalBigInt(schema.minimum) && IsOptionalBigInt(schema.maximum) && IsOptionalBigInt(schema.exclusiveMinimum) && IsOptionalBigInt(schema.exclusiveMaximum);\n    }\n    TypeGuard.TBigInt = TBigInt;\n    /** Returns true if the given schema is TBoolean */ function TBoolean(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"Boolean\" && schema.type === \"boolean\" && IsOptionalString(schema.$id);\n    }\n    TypeGuard.TBoolean = TBoolean;\n    /** Returns true if the given schema is TConstructor */ function TConstructor(schema) {\n        // prettier-ignore\n        if (!(TKind(schema) && schema[exports.Kind] === \"Constructor\" && schema.type === \"object\" && schema.instanceOf === \"Constructor\" && IsOptionalString(schema.$id) && IsArray(schema.parameters) && TSchema(schema.returns))) {\n            return false;\n        }\n        for (const parameter of schema.parameters){\n            if (!TSchema(parameter)) return false;\n        }\n        return true;\n    }\n    TypeGuard.TConstructor = TConstructor;\n    /** Returns true if the given schema is TDate */ function TDate(schema) {\n        return TKind(schema) && schema[exports.Kind] === \"Date\" && schema.type === \"object\" && schema.instanceOf === \"Date\" && IsOptionalString(schema.$id) && IsOptionalNumber(schema.minimumTimestamp) && IsOptionalNumber(schema.maximumTimestamp) && IsOptionalNumber(schema.exclusiveMinimumTimestamp) && IsOptionalNumber(schema.exclusiveMaximumTimestamp);\n    }\n    TypeGuard.TDate = TDate;\n    /** Returns true if the given schema is TFunction */ function TFunction(schema) {\n        // prettier-ignore\n        if (!(TKind(schema) && schema[exports.Kind] === \"Function\" && schema.type === \"object\" && schema.instanceOf === \"Function\" && IsOptionalString(schema.$id) && IsArray(schema.parameters) && TSchema(schema.returns))) {\n            return false;\n        }\n        for (const parameter of schema.parameters){\n            if (!TSchema(parameter)) return false;\n        }\n        return true;\n    }\n    TypeGuard.TFunction = TFunction;\n    /** Returns true if the given schema is TInteger */ function TInteger(schema) {\n        return TKind(schema) && schema[exports.Kind] === \"Integer\" && schema.type === \"integer\" && IsOptionalString(schema.$id) && IsOptionalNumber(schema.multipleOf) && IsOptionalNumber(schema.minimum) && IsOptionalNumber(schema.maximum) && IsOptionalNumber(schema.exclusiveMinimum) && IsOptionalNumber(schema.exclusiveMaximum);\n    }\n    TypeGuard.TInteger = TInteger;\n    /** Returns true if the given schema is TIntersect */ function TIntersect(schema) {\n        // prettier-ignore\n        if (!(TKind(schema) && schema[exports.Kind] === \"Intersect\" && IsArray(schema.allOf) && IsOptionalString(schema.type) && (IsOptionalBoolean(schema.unevaluatedProperties) || IsOptionalSchema(schema.unevaluatedProperties)) && IsOptionalString(schema.$id))) {\n            return false;\n        }\n        if (\"type\" in schema && schema.type !== \"object\") {\n            return false;\n        }\n        for (const inner of schema.allOf){\n            if (!TSchema(inner)) return false;\n        }\n        return true;\n    }\n    TypeGuard.TIntersect = TIntersect;\n    /** Returns true if the given schema is TKind */ function TKind(schema) {\n        return IsObject(schema) && exports.Kind in schema && typeof schema[exports.Kind] === \"string\"; // TS 4.1.5: any required for symbol indexer\n    }\n    TypeGuard.TKind = TKind;\n    /** Returns true if the given schema is TLiteral<string> */ function TLiteralString(schema) {\n        return TKind(schema) && schema[exports.Kind] === \"Literal\" && IsOptionalString(schema.$id) && typeof schema.const === \"string\";\n    }\n    TypeGuard.TLiteralString = TLiteralString;\n    /** Returns true if the given schema is TLiteral<number> */ function TLiteralNumber(schema) {\n        return TKind(schema) && schema[exports.Kind] === \"Literal\" && IsOptionalString(schema.$id) && typeof schema.const === \"number\";\n    }\n    TypeGuard.TLiteralNumber = TLiteralNumber;\n    /** Returns true if the given schema is TLiteral<boolean> */ function TLiteralBoolean(schema) {\n        return TKind(schema) && schema[exports.Kind] === \"Literal\" && IsOptionalString(schema.$id) && typeof schema.const === \"boolean\";\n    }\n    TypeGuard.TLiteralBoolean = TLiteralBoolean;\n    /** Returns true if the given schema is TLiteral */ function TLiteral(schema) {\n        return TLiteralString(schema) || TLiteralNumber(schema) || TLiteralBoolean(schema);\n    }\n    TypeGuard.TLiteral = TLiteral;\n    /** Returns true if the given schema is TNever */ function TNever(schema) {\n        return TKind(schema) && schema[exports.Kind] === \"Never\" && IsObject(schema.not) && globalThis.Object.getOwnPropertyNames(schema.not).length === 0;\n    }\n    TypeGuard.TNever = TNever;\n    /** Returns true if the given schema is TNot */ function TNot(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"Not\" && TSchema(schema.not);\n    }\n    TypeGuard.TNot = TNot;\n    /** Returns true if the given schema is TNull */ function TNull(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"Null\" && schema.type === \"null\" && IsOptionalString(schema.$id);\n    }\n    TypeGuard.TNull = TNull;\n    /** Returns true if the given schema is TNumber */ function TNumber(schema) {\n        return TKind(schema) && schema[exports.Kind] === \"Number\" && schema.type === \"number\" && IsOptionalString(schema.$id) && IsOptionalNumber(schema.multipleOf) && IsOptionalNumber(schema.minimum) && IsOptionalNumber(schema.maximum) && IsOptionalNumber(schema.exclusiveMinimum) && IsOptionalNumber(schema.exclusiveMaximum);\n    }\n    TypeGuard.TNumber = TNumber;\n    /** Returns true if the given schema is TObject */ function TObject(schema) {\n        if (!(TKind(schema) && schema[exports.Kind] === \"Object\" && schema.type === \"object\" && IsOptionalString(schema.$id) && IsObject(schema.properties) && IsAdditionalProperties(schema.additionalProperties) && IsOptionalNumber(schema.minProperties) && IsOptionalNumber(schema.maxProperties))) {\n            return false;\n        }\n        for (const [key, value] of Object.entries(schema.properties)){\n            if (!IsControlCharacterFree(key)) return false;\n            if (!TSchema(value)) return false;\n        }\n        return true;\n    }\n    TypeGuard.TObject = TObject;\n    /** Returns true if the given schema is TPromise */ function TPromise(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"Promise\" && schema.type === \"object\" && schema.instanceOf === \"Promise\" && IsOptionalString(schema.$id) && TSchema(schema.item);\n    }\n    TypeGuard.TPromise = TPromise;\n    /** Returns true if the given schema is TRecord */ function TRecord(schema) {\n        // prettier-ignore\n        if (!(TKind(schema) && schema[exports.Kind] === \"Record\" && schema.type === \"object\" && IsOptionalString(schema.$id) && IsAdditionalProperties(schema.additionalProperties) && IsObject(schema.patternProperties))) {\n            return false;\n        }\n        const keys = Object.keys(schema.patternProperties);\n        if (keys.length !== 1) {\n            return false;\n        }\n        if (!IsPattern(keys[0])) {\n            return false;\n        }\n        if (!TSchema(schema.patternProperties[keys[0]])) {\n            return false;\n        }\n        return true;\n    }\n    TypeGuard.TRecord = TRecord;\n    /** Returns true if the given schema is TRef */ function TRef(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"Ref\" && IsOptionalString(schema.$id) && IsString(schema.$ref);\n    }\n    TypeGuard.TRef = TRef;\n    /** Returns true if the given schema is TString */ function TString(schema) {\n        return TKind(schema) && schema[exports.Kind] === \"String\" && schema.type === \"string\" && IsOptionalString(schema.$id) && IsOptionalNumber(schema.minLength) && IsOptionalNumber(schema.maxLength) && IsOptionalPattern(schema.pattern) && IsOptionalFormat(schema.format);\n    }\n    TypeGuard.TString = TString;\n    /** Returns true if the given schema is TSymbol */ function TSymbol(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"Symbol\" && schema.type === \"null\" && schema.typeOf === \"Symbol\" && IsOptionalString(schema.$id);\n    }\n    TypeGuard.TSymbol = TSymbol;\n    /** Returns true if the given schema is TTemplateLiteral */ function TTemplateLiteral(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"TemplateLiteral\" && schema.type === \"string\" && IsString(schema.pattern) && schema.pattern[0] === \"^\" && schema.pattern[schema.pattern.length - 1] === \"$\";\n    }\n    TypeGuard.TTemplateLiteral = TTemplateLiteral;\n    /** Returns true if the given schema is TThis */ function TThis(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"This\" && IsOptionalString(schema.$id) && IsString(schema.$ref);\n    }\n    TypeGuard.TThis = TThis;\n    /** Returns true if the given schema is TTuple */ function TTuple(schema) {\n        // prettier-ignore\n        if (!(TKind(schema) && schema[exports.Kind] === \"Tuple\" && schema.type === \"array\" && IsOptionalString(schema.$id) && IsNumber(schema.minItems) && IsNumber(schema.maxItems) && schema.minItems === schema.maxItems)) {\n            return false;\n        }\n        if (schema.items === undefined && schema.additionalItems === undefined && schema.minItems === 0) {\n            return true;\n        }\n        if (!IsArray(schema.items)) {\n            return false;\n        }\n        for (const inner of schema.items){\n            if (!TSchema(inner)) return false;\n        }\n        return true;\n    }\n    TypeGuard.TTuple = TTuple;\n    /** Returns true if the given schema is TUndefined */ function TUndefined(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"Undefined\" && schema.type === \"null\" && schema.typeOf === \"Undefined\" && IsOptionalString(schema.$id);\n    }\n    TypeGuard.TUndefined = TUndefined;\n    /** Returns true if the given schema is TUnion<Literal<string | number>[]> */ function TUnionLiteral(schema) {\n        return TUnion(schema) && schema.anyOf.every((schema)=>TLiteralString(schema) || TLiteralNumber(schema));\n    }\n    TypeGuard.TUnionLiteral = TUnionLiteral;\n    /** Returns true if the given schema is TUnion */ function TUnion(schema) {\n        // prettier-ignore\n        if (!(TKind(schema) && schema[exports.Kind] === \"Union\" && IsArray(schema.anyOf) && IsOptionalString(schema.$id))) {\n            return false;\n        }\n        for (const inner of schema.anyOf){\n            if (!TSchema(inner)) return false;\n        }\n        return true;\n    }\n    TypeGuard.TUnion = TUnion;\n    /** Returns true if the given schema is TUint8Array */ function TUint8Array(schema) {\n        return TKind(schema) && schema[exports.Kind] === \"Uint8Array\" && schema.type === \"object\" && IsOptionalString(schema.$id) && schema.instanceOf === \"Uint8Array\" && IsOptionalNumber(schema.minByteLength) && IsOptionalNumber(schema.maxByteLength);\n    }\n    TypeGuard.TUint8Array = TUint8Array;\n    /** Returns true if the given schema is TUnknown */ function TUnknown(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"Unknown\" && IsOptionalString(schema.$id);\n    }\n    TypeGuard.TUnknown = TUnknown;\n    /** Returns true if the given schema is a raw TUnsafe */ function TUnsafe(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"Unsafe\";\n    }\n    TypeGuard.TUnsafe = TUnsafe;\n    /** Returns true if the given schema is TVoid */ function TVoid(schema) {\n        // prettier-ignore\n        return TKind(schema) && schema[exports.Kind] === \"Void\" && schema.type === \"null\" && schema.typeOf === \"Void\" && IsOptionalString(schema.$id);\n    }\n    TypeGuard.TVoid = TVoid;\n    /** Returns true if this schema has the ReadonlyOptional modifier */ function TReadonlyOptional(schema) {\n        return IsObject(schema) && schema[exports.Modifier] === \"ReadonlyOptional\";\n    }\n    TypeGuard.TReadonlyOptional = TReadonlyOptional;\n    /** Returns true if this schema has the Readonly modifier */ function TReadonly(schema) {\n        return IsObject(schema) && schema[exports.Modifier] === \"Readonly\";\n    }\n    TypeGuard.TReadonly = TReadonly;\n    /** Returns true if this schema has the Optional modifier */ function TOptional(schema) {\n        return IsObject(schema) && schema[exports.Modifier] === \"Optional\";\n    }\n    TypeGuard.TOptional = TOptional;\n    /** Returns true if the given schema is TSchema */ function TSchema(schema) {\n        return typeof schema === \"object\" && (TAny(schema) || TArray(schema) || TBoolean(schema) || TBigInt(schema) || TConstructor(schema) || TDate(schema) || TFunction(schema) || TInteger(schema) || TIntersect(schema) || TLiteral(schema) || TNever(schema) || TNot(schema) || TNull(schema) || TNumber(schema) || TObject(schema) || TPromise(schema) || TRecord(schema) || TRef(schema) || TString(schema) || TSymbol(schema) || TTemplateLiteral(schema) || TThis(schema) || TTuple(schema) || TUndefined(schema) || TUnion(schema) || TUint8Array(schema) || TUnknown(schema) || TUnsafe(schema) || TVoid(schema) || TKind(schema) && TypeRegistry.Has(schema[exports.Kind]));\n    }\n    TypeGuard.TSchema = TSchema;\n})(TypeGuard || (exports.TypeGuard = TypeGuard = {}));\n// --------------------------------------------------------------------------\n// ExtendsUndefined\n// --------------------------------------------------------------------------\n/** Fast undefined check used for properties of type undefined */ var ExtendsUndefined;\n(function(ExtendsUndefined) {\n    function Check(schema) {\n        if (schema[exports.Kind] === \"Undefined\") return true;\n        if (schema[exports.Kind] === \"Not\") {\n            return !Check(schema.not);\n        }\n        if (schema[exports.Kind] === \"Intersect\") {\n            const intersect = schema;\n            return intersect.allOf.every((schema)=>Check(schema));\n        }\n        if (schema[exports.Kind] === \"Union\") {\n            const union = schema;\n            return union.anyOf.some((schema)=>Check(schema));\n        }\n        return false;\n    }\n    ExtendsUndefined.Check = Check;\n})(ExtendsUndefined || (exports.ExtendsUndefined = ExtendsUndefined = {}));\n// --------------------------------------------------------------------------\n// TypeExtends\n// --------------------------------------------------------------------------\nvar TypeExtendsResult;\n(function(TypeExtendsResult) {\n    TypeExtendsResult[TypeExtendsResult[\"Union\"] = 0] = \"Union\";\n    TypeExtendsResult[TypeExtendsResult[\"True\"] = 1] = \"True\";\n    TypeExtendsResult[TypeExtendsResult[\"False\"] = 2] = \"False\";\n})(TypeExtendsResult || (exports.TypeExtendsResult = TypeExtendsResult = {}));\nvar TypeExtends;\n(function(TypeExtends) {\n    // --------------------------------------------------------------------------\n    // IntoBooleanResult\n    // --------------------------------------------------------------------------\n    function IntoBooleanResult(result) {\n        return result === TypeExtendsResult.False ? TypeExtendsResult.False : TypeExtendsResult.True;\n    }\n    // --------------------------------------------------------------------------\n    // Any\n    // --------------------------------------------------------------------------\n    function AnyRight(left, right) {\n        return TypeExtendsResult.True;\n    }\n    function Any(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right) && right.anyOf.some((schema)=>TypeGuard.TAny(schema) || TypeGuard.TUnknown(schema))) return TypeExtendsResult.True;\n        if (TypeGuard.TUnion(right)) return TypeExtendsResult.Union;\n        if (TypeGuard.TUnknown(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TAny(right)) return TypeExtendsResult.True;\n        return TypeExtendsResult.Union;\n    }\n    // --------------------------------------------------------------------------\n    // Array\n    // --------------------------------------------------------------------------\n    function ArrayRight(left, right) {\n        if (TypeGuard.TUnknown(left)) return TypeExtendsResult.False;\n        if (TypeGuard.TAny(left)) return TypeExtendsResult.Union;\n        if (TypeGuard.TNever(left)) return TypeExtendsResult.True;\n        return TypeExtendsResult.False;\n    }\n    function Array1(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right) && IsObjectArrayLike(right)) return TypeExtendsResult.True;\n        if (!TypeGuard.TArray(right)) return TypeExtendsResult.False;\n        return IntoBooleanResult(Visit(left.items, right.items));\n    }\n    // --------------------------------------------------------------------------\n    // BigInt\n    // --------------------------------------------------------------------------\n    function BigInt(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TNever(right)) return NeverRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        return TypeGuard.TBigInt(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Boolean\n    // --------------------------------------------------------------------------\n    function BooleanRight(left, right) {\n        if (TypeGuard.TLiteral(left) && typeof left.const === \"boolean\") return TypeExtendsResult.True;\n        return TypeGuard.TBoolean(left) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    function Boolean(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TNever(right)) return NeverRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        return TypeGuard.TBoolean(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Constructor\n    // --------------------------------------------------------------------------\n    function Constructor(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (!TypeGuard.TConstructor(right)) return TypeExtendsResult.False;\n        if (left.parameters.length > right.parameters.length) return TypeExtendsResult.False;\n        if (!left.parameters.every((schema, index)=>IntoBooleanResult(Visit(right.parameters[index], schema)) === TypeExtendsResult.True)) {\n            return TypeExtendsResult.False;\n        }\n        return IntoBooleanResult(Visit(left.returns, right.returns));\n    }\n    // --------------------------------------------------------------------------\n    // Date\n    // --------------------------------------------------------------------------\n    function Date(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        return TypeGuard.TDate(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Function\n    // --------------------------------------------------------------------------\n    function Function(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (!TypeGuard.TFunction(right)) return TypeExtendsResult.False;\n        if (left.parameters.length > right.parameters.length) return TypeExtendsResult.False;\n        if (!left.parameters.every((schema, index)=>IntoBooleanResult(Visit(right.parameters[index], schema)) === TypeExtendsResult.True)) {\n            return TypeExtendsResult.False;\n        }\n        return IntoBooleanResult(Visit(left.returns, right.returns));\n    }\n    // --------------------------------------------------------------------------\n    // Integer\n    // --------------------------------------------------------------------------\n    function IntegerRight(left, right) {\n        if (TypeGuard.TLiteral(left) && typeof left.const === \"number\") return TypeExtendsResult.True;\n        return TypeGuard.TNumber(left) || TypeGuard.TInteger(left) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    function Integer(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TNever(right)) return NeverRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        return TypeGuard.TInteger(right) || TypeGuard.TNumber(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Intersect\n    // --------------------------------------------------------------------------\n    function IntersectRight(left, right) {\n        return right.allOf.every((schema)=>Visit(left, schema) === TypeExtendsResult.True) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    function Intersect(left, right) {\n        return left.allOf.some((schema)=>Visit(schema, right) === TypeExtendsResult.True) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Literal\n    // --------------------------------------------------------------------------\n    function IsLiteralString(schema) {\n        return typeof schema.const === \"string\";\n    }\n    function IsLiteralNumber(schema) {\n        return typeof schema.const === \"number\";\n    }\n    function IsLiteralBoolean(schema) {\n        return typeof schema.const === \"boolean\";\n    }\n    function Literal(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TNever(right)) return NeverRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        if (TypeGuard.TString(right)) return StringRight(left, right);\n        if (TypeGuard.TNumber(right)) return NumberRight(left, right);\n        if (TypeGuard.TInteger(right)) return IntegerRight(left, right);\n        if (TypeGuard.TBoolean(right)) return BooleanRight(left, right);\n        return TypeGuard.TLiteral(right) && right.const === left.const ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Never\n    // --------------------------------------------------------------------------\n    function NeverRight(left, right) {\n        return TypeExtendsResult.False;\n    }\n    function Never(left, right) {\n        return TypeExtendsResult.True;\n    }\n    // --------------------------------------------------------------------------\n    // Not\n    // --------------------------------------------------------------------------\n    function UnwrapNot(schema) {\n        let [current, depth] = [\n            schema,\n            0\n        ];\n        while(true){\n            if (!TypeGuard.TNot(current)) break;\n            current = current.not;\n            depth += 1;\n        }\n        return depth % 2 === 0 ? current : exports.Type.Unknown();\n    }\n    function Not(left, right) {\n        // TypeScript has no concept of negated types, and attempts to correctly check the negated\n        // type at runtime would put TypeBox at odds with TypeScripts ability to statically infer\n        // the type. Instead we unwrap to either unknown or T and continue evaluating.\n        if (TypeGuard.TNot(left)) return Visit(UnwrapNot(left), right);\n        if (TypeGuard.TNot(right)) return Visit(left, UnwrapNot(right));\n        throw new Error(`TypeExtends: Invalid fallthrough for Not`);\n    }\n    // --------------------------------------------------------------------------\n    // Null\n    // --------------------------------------------------------------------------\n    function Null(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TNever(right)) return NeverRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        return TypeGuard.TNull(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Number\n    // --------------------------------------------------------------------------\n    function NumberRight(left, right) {\n        if (TypeGuard.TLiteral(left) && IsLiteralNumber(left)) return TypeExtendsResult.True;\n        return TypeGuard.TNumber(left) || TypeGuard.TInteger(left) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    function Number(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TNever(right)) return NeverRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        return TypeGuard.TInteger(right) || TypeGuard.TNumber(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Object\n    // --------------------------------------------------------------------------\n    function IsObjectPropertyCount(schema, count) {\n        return globalThis.Object.keys(schema.properties).length === count;\n    }\n    function IsObjectStringLike(schema) {\n        return IsObjectArrayLike(schema);\n    }\n    function IsObjectSymbolLike(schema) {\n        // prettier-ignore\n        return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && \"description\" in schema.properties && TypeGuard.TUnion(schema.properties.description) && schema.properties.description.anyOf.length === 2 && (TypeGuard.TString(schema.properties.description.anyOf[0]) && TypeGuard.TUndefined(schema.properties.description.anyOf[1]) || TypeGuard.TString(schema.properties.description.anyOf[1]) && TypeGuard.TUndefined(schema.properties.description.anyOf[0]));\n    }\n    function IsObjectNumberLike(schema) {\n        return IsObjectPropertyCount(schema, 0);\n    }\n    function IsObjectBooleanLike(schema) {\n        return IsObjectPropertyCount(schema, 0);\n    }\n    function IsObjectBigIntLike(schema) {\n        return IsObjectPropertyCount(schema, 0);\n    }\n    function IsObjectDateLike(schema) {\n        return IsObjectPropertyCount(schema, 0);\n    }\n    function IsObjectUint8ArrayLike(schema) {\n        return IsObjectArrayLike(schema);\n    }\n    function IsObjectFunctionLike(schema) {\n        const length = exports.Type.Number();\n        return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && \"length\" in schema.properties && IntoBooleanResult(Visit(schema.properties[\"length\"], length)) === TypeExtendsResult.True;\n    }\n    function IsObjectConstructorLike(schema) {\n        return IsObjectPropertyCount(schema, 0);\n    }\n    function IsObjectArrayLike(schema) {\n        const length = exports.Type.Number();\n        return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && \"length\" in schema.properties && IntoBooleanResult(Visit(schema.properties[\"length\"], length)) === TypeExtendsResult.True;\n    }\n    function IsObjectPromiseLike(schema) {\n        const then = exports.Type.Function([\n            exports.Type.Any()\n        ], exports.Type.Any());\n        return IsObjectPropertyCount(schema, 0) || IsObjectPropertyCount(schema, 1) && \"then\" in schema.properties && IntoBooleanResult(Visit(schema.properties[\"then\"], then)) === TypeExtendsResult.True;\n    }\n    // --------------------------------------------------------------------------\n    // Property\n    // --------------------------------------------------------------------------\n    function Property(left, right) {\n        if (Visit(left, right) === TypeExtendsResult.False) return TypeExtendsResult.False;\n        if (TypeGuard.TOptional(left) && !TypeGuard.TOptional(right)) return TypeExtendsResult.False;\n        return TypeExtendsResult.True;\n    }\n    function ObjectRight(left, right) {\n        if (TypeGuard.TUnknown(left)) return TypeExtendsResult.False;\n        if (TypeGuard.TAny(left)) return TypeExtendsResult.Union;\n        if (TypeGuard.TNever(left)) return TypeExtendsResult.True;\n        if (TypeGuard.TLiteral(left) && IsLiteralString(left) && IsObjectStringLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TLiteral(left) && IsLiteralNumber(left) && IsObjectNumberLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TLiteral(left) && IsLiteralBoolean(left) && IsObjectBooleanLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TSymbol(left) && IsObjectSymbolLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TBigInt(left) && IsObjectBigIntLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TString(left) && IsObjectStringLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TSymbol(left) && IsObjectSymbolLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TNumber(left) && IsObjectNumberLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TInteger(left) && IsObjectNumberLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TBoolean(left) && IsObjectBooleanLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TUint8Array(left) && IsObjectUint8ArrayLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TDate(left) && IsObjectDateLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TConstructor(left) && IsObjectConstructorLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TFunction(left) && IsObjectFunctionLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TRecord(left) && TypeGuard.TString(RecordKey(left))) {\n            // When expressing a Record with literal key values, the Record is converted into a Object with\n            // the Hint assigned as `Record`. This is used to invert the extends logic.\n            return right[exports.Hint] === \"Record\" ? TypeExtendsResult.True : TypeExtendsResult.False;\n        }\n        if (TypeGuard.TRecord(left) && TypeGuard.TNumber(RecordKey(left))) {\n            return IsObjectPropertyCount(right, 0) ? TypeExtendsResult.True : TypeExtendsResult.False;\n        }\n        return TypeExtendsResult.False;\n    }\n    function Object1(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        if (!TypeGuard.TObject(right)) return TypeExtendsResult.False;\n        for (const key of globalThis.Object.keys(right.properties)){\n            if (!(key in left.properties)) return TypeExtendsResult.False;\n            if (Property(left.properties[key], right.properties[key]) === TypeExtendsResult.False) {\n                return TypeExtendsResult.False;\n            }\n        }\n        return TypeExtendsResult.True;\n    }\n    // --------------------------------------------------------------------------\n    // Promise\n    // --------------------------------------------------------------------------\n    function Promise(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right) && IsObjectPromiseLike(right)) return TypeExtendsResult.True;\n        if (!TypeGuard.TPromise(right)) return TypeExtendsResult.False;\n        return IntoBooleanResult(Visit(left.item, right.item));\n    }\n    // --------------------------------------------------------------------------\n    // Record\n    // --------------------------------------------------------------------------\n    function RecordKey(schema) {\n        if (exports.PatternNumberExact in schema.patternProperties) return exports.Type.Number();\n        if (exports.PatternStringExact in schema.patternProperties) return exports.Type.String();\n        throw Error(\"TypeExtends: Cannot get record key\");\n    }\n    function RecordValue(schema) {\n        if (exports.PatternNumberExact in schema.patternProperties) return schema.patternProperties[exports.PatternNumberExact];\n        if (exports.PatternStringExact in schema.patternProperties) return schema.patternProperties[exports.PatternStringExact];\n        throw Error(\"TypeExtends: Cannot get record value\");\n    }\n    function RecordRight(left, right) {\n        const Key = RecordKey(right);\n        const Value = RecordValue(right);\n        if (TypeGuard.TLiteral(left) && IsLiteralString(left) && TypeGuard.TNumber(Key) && IntoBooleanResult(Visit(left, Value)) === TypeExtendsResult.True) return TypeExtendsResult.True;\n        if (TypeGuard.TUint8Array(left) && TypeGuard.TNumber(Key)) return Visit(left, Value);\n        if (TypeGuard.TString(left) && TypeGuard.TNumber(Key)) return Visit(left, Value);\n        if (TypeGuard.TArray(left) && TypeGuard.TNumber(Key)) return Visit(left, Value);\n        if (TypeGuard.TObject(left)) {\n            for (const key of globalThis.Object.keys(left.properties)){\n                if (Property(Value, left.properties[key]) === TypeExtendsResult.False) {\n                    return TypeExtendsResult.False;\n                }\n            }\n            return TypeExtendsResult.True;\n        }\n        return TypeExtendsResult.False;\n    }\n    function Record(left, right) {\n        const Value = RecordValue(left);\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (!TypeGuard.TRecord(right)) return TypeExtendsResult.False;\n        return Visit(Value, RecordValue(right));\n    }\n    // --------------------------------------------------------------------------\n    // String\n    // --------------------------------------------------------------------------\n    function StringRight(left, right) {\n        if (TypeGuard.TLiteral(left) && typeof left.const === \"string\") return TypeExtendsResult.True;\n        return TypeGuard.TString(left) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    function String(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TNever(right)) return NeverRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        return TypeGuard.TString(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Symbol\n    // --------------------------------------------------------------------------\n    function Symbol1(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TNever(right)) return NeverRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        return TypeGuard.TSymbol(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // TemplateLiteral\n    // --------------------------------------------------------------------------\n    function TemplateLiteral(left, right) {\n        // TemplateLiteral types are resolved to either unions for finite expressions or string\n        // for infinite expressions. Here we call to TemplateLiteralResolver to resolve for\n        // either type and continue evaluating.\n        if (TypeGuard.TTemplateLiteral(left)) return Visit(TemplateLiteralResolver.Resolve(left), right);\n        if (TypeGuard.TTemplateLiteral(right)) return Visit(left, TemplateLiteralResolver.Resolve(right));\n        throw new Error(`TypeExtends: Invalid fallthrough for TemplateLiteral`);\n    }\n    // --------------------------------------------------------------------------\n    // Tuple\n    // --------------------------------------------------------------------------\n    function TupleRight(left, right) {\n        if (TypeGuard.TUnknown(left)) return TypeExtendsResult.False;\n        if (TypeGuard.TAny(left)) return TypeExtendsResult.Union;\n        if (TypeGuard.TNever(left)) return TypeExtendsResult.True;\n        return TypeExtendsResult.False;\n    }\n    function IsArrayOfTuple(left, right) {\n        return TypeGuard.TArray(right) && left.items !== undefined && left.items.every((schema)=>Visit(schema, right.items) === TypeExtendsResult.True);\n    }\n    function Tuple(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right) && IsObjectArrayLike(right)) return TypeExtendsResult.True;\n        if (TypeGuard.TArray(right) && IsArrayOfTuple(left, right)) return TypeExtendsResult.True;\n        if (!TypeGuard.TTuple(right)) return TypeExtendsResult.False;\n        if (left.items === undefined && right.items !== undefined || left.items !== undefined && right.items === undefined) return TypeExtendsResult.False;\n        if (left.items === undefined && right.items === undefined) return TypeExtendsResult.True;\n        return left.items.every((schema, index)=>Visit(schema, right.items[index]) === TypeExtendsResult.True) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Uint8Array\n    // --------------------------------------------------------------------------\n    function Uint8Array(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        return TypeGuard.TUint8Array(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Undefined\n    // --------------------------------------------------------------------------\n    function Undefined(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TNever(right)) return NeverRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        if (TypeGuard.TRecord(right)) return RecordRight(left, right);\n        if (TypeGuard.TVoid(right)) return VoidRight(left, right);\n        return TypeGuard.TUndefined(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Union\n    // --------------------------------------------------------------------------\n    function UnionRight(left, right) {\n        return right.anyOf.some((schema)=>Visit(left, schema) === TypeExtendsResult.True) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    function Union(left, right) {\n        return left.anyOf.every((schema)=>Visit(schema, right) === TypeExtendsResult.True) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Unknown\n    // --------------------------------------------------------------------------\n    function UnknownRight(left, right) {\n        return TypeExtendsResult.True;\n    }\n    function Unknown(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TString(right)) return StringRight(left, right);\n        if (TypeGuard.TNumber(right)) return NumberRight(left, right);\n        if (TypeGuard.TInteger(right)) return IntegerRight(left, right);\n        if (TypeGuard.TBoolean(right)) return BooleanRight(left, right);\n        if (TypeGuard.TArray(right)) return ArrayRight(left, right);\n        if (TypeGuard.TTuple(right)) return TupleRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        return TypeGuard.TUnknown(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    // --------------------------------------------------------------------------\n    // Void\n    // --------------------------------------------------------------------------\n    function VoidRight(left, right) {\n        if (TypeGuard.TUndefined(left)) return TypeExtendsResult.True;\n        return TypeGuard.TUndefined(left) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    function Void(left, right) {\n        if (TypeGuard.TIntersect(right)) return IntersectRight(left, right);\n        if (TypeGuard.TUnion(right)) return UnionRight(left, right);\n        if (TypeGuard.TUnknown(right)) return UnknownRight(left, right);\n        if (TypeGuard.TAny(right)) return AnyRight(left, right);\n        if (TypeGuard.TObject(right)) return ObjectRight(left, right);\n        return TypeGuard.TVoid(right) ? TypeExtendsResult.True : TypeExtendsResult.False;\n    }\n    function Visit(left, right) {\n        // Resolvable Types\n        if (TypeGuard.TTemplateLiteral(left) || TypeGuard.TTemplateLiteral(right)) return TemplateLiteral(left, right);\n        if (TypeGuard.TNot(left) || TypeGuard.TNot(right)) return Not(left, right);\n        // Standard Types\n        if (TypeGuard.TAny(left)) return Any(left, right);\n        if (TypeGuard.TArray(left)) return Array1(left, right);\n        if (TypeGuard.TBigInt(left)) return BigInt(left, right);\n        if (TypeGuard.TBoolean(left)) return Boolean(left, right);\n        if (TypeGuard.TConstructor(left)) return Constructor(left, right);\n        if (TypeGuard.TDate(left)) return Date(left, right);\n        if (TypeGuard.TFunction(left)) return Function(left, right);\n        if (TypeGuard.TInteger(left)) return Integer(left, right);\n        if (TypeGuard.TIntersect(left)) return Intersect(left, right);\n        if (TypeGuard.TLiteral(left)) return Literal(left, right);\n        if (TypeGuard.TNever(left)) return Never(left, right);\n        if (TypeGuard.TNull(left)) return Null(left, right);\n        if (TypeGuard.TNumber(left)) return Number(left, right);\n        if (TypeGuard.TObject(left)) return Object1(left, right);\n        if (TypeGuard.TRecord(left)) return Record(left, right);\n        if (TypeGuard.TString(left)) return String(left, right);\n        if (TypeGuard.TSymbol(left)) return Symbol1(left, right);\n        if (TypeGuard.TTuple(left)) return Tuple(left, right);\n        if (TypeGuard.TPromise(left)) return Promise(left, right);\n        if (TypeGuard.TUint8Array(left)) return Uint8Array(left, right);\n        if (TypeGuard.TUndefined(left)) return Undefined(left, right);\n        if (TypeGuard.TUnion(left)) return Union(left, right);\n        if (TypeGuard.TUnknown(left)) return Unknown(left, right);\n        if (TypeGuard.TVoid(left)) return Void(left, right);\n        throw Error(`TypeExtends: Unknown left type operand '${left[exports.Kind]}'`);\n    }\n    function Extends(left, right) {\n        return Visit(left, right);\n    }\n    TypeExtends.Extends = Extends;\n})(TypeExtends || (exports.TypeExtends = TypeExtends = {}));\n// --------------------------------------------------------------------------\n// TypeClone\n// --------------------------------------------------------------------------\n/** Specialized Clone for Types */ var TypeClone;\n(function(TypeClone) {\n    function IsObject(value) {\n        return typeof value === \"object\" && value !== null;\n    }\n    function IsArray(value) {\n        return globalThis.Array.isArray(value);\n    }\n    function Array1(value) {\n        return value.map((value)=>Visit(value));\n    }\n    function Object1(value) {\n        const clonedProperties = globalThis.Object.getOwnPropertyNames(value).reduce((acc, key)=>{\n            return {\n                ...acc,\n                [key]: Visit(value[key])\n            };\n        }, {});\n        const clonedSymbols = globalThis.Object.getOwnPropertySymbols(value).reduce((acc, key)=>{\n            return {\n                ...acc,\n                [key]: Visit(value[key])\n            };\n        }, {});\n        return {\n            ...clonedProperties,\n            ...clonedSymbols\n        };\n    }\n    function Visit(value) {\n        if (IsArray(value)) return Array1(value);\n        if (IsObject(value)) return Object1(value);\n        return value;\n    }\n    /** Clones a type. */ function Clone(schema, options) {\n        return {\n            ...Visit(schema),\n            ...options\n        };\n    }\n    TypeClone.Clone = Clone;\n})(TypeClone || (exports.TypeClone = TypeClone = {}));\n// --------------------------------------------------------------------------\n// IndexedAccessor\n// --------------------------------------------------------------------------\nvar IndexedAccessor;\n(function(IndexedAccessor) {\n    function OptionalUnwrap(schema) {\n        return schema.map((schema)=>{\n            const { [exports.Modifier]: _, ...clone } = TypeClone.Clone(schema, {});\n            return clone;\n        });\n    }\n    function IsIntersectOptional(schema) {\n        return schema.every((schema)=>TypeGuard.TOptional(schema));\n    }\n    function IsUnionOptional(schema) {\n        return schema.some((schema)=>TypeGuard.TOptional(schema));\n    }\n    function ResolveIntersect(schema) {\n        const optional = IsIntersectOptional(schema.allOf);\n        return optional ? exports.Type.Optional(exports.Type.Intersect(OptionalUnwrap(schema.allOf))) : schema;\n    }\n    function ResolveUnion(schema) {\n        const optional = IsUnionOptional(schema.anyOf);\n        return optional ? exports.Type.Optional(exports.Type.Union(OptionalUnwrap(schema.anyOf))) : schema;\n    }\n    function ResolveOptional(schema) {\n        if (schema[exports.Kind] === \"Intersect\") return ResolveIntersect(schema);\n        if (schema[exports.Kind] === \"Union\") return ResolveUnion(schema);\n        return schema;\n    }\n    function Intersect(schema, key) {\n        const resolved = schema.allOf.reduce((acc, schema)=>{\n            const indexed = Visit(schema, key);\n            return indexed[exports.Kind] === \"Never\" ? acc : [\n                ...acc,\n                indexed\n            ];\n        }, []);\n        return ResolveOptional(exports.Type.Intersect(resolved));\n    }\n    function Union(schema, key) {\n        const resolved = schema.anyOf.map((schema)=>Visit(schema, key));\n        return ResolveOptional(exports.Type.Union(resolved));\n    }\n    function Object1(schema, key) {\n        const property = schema.properties[key];\n        return property === undefined ? exports.Type.Never() : exports.Type.Union([\n            property\n        ]);\n    }\n    function Tuple(schema, key) {\n        const items = schema.items;\n        if (items === undefined) return exports.Type.Never();\n        const element = items[key]; //\n        if (element === undefined) return exports.Type.Never();\n        return element;\n    }\n    function Visit(schema, key) {\n        if (schema[exports.Kind] === \"Intersect\") return Intersect(schema, key);\n        if (schema[exports.Kind] === \"Union\") return Union(schema, key);\n        if (schema[exports.Kind] === \"Object\") return Object1(schema, key);\n        if (schema[exports.Kind] === \"Tuple\") return Tuple(schema, key);\n        return exports.Type.Never();\n    }\n    function Resolve(schema, keys, options = {}) {\n        const resolved = keys.map((key)=>Visit(schema, key.toString()));\n        return ResolveOptional(exports.Type.Union(resolved, options));\n    }\n    IndexedAccessor.Resolve = Resolve;\n})(IndexedAccessor || (exports.IndexedAccessor = IndexedAccessor = {}));\n// --------------------------------------------------------------------------\n// ObjectMap\n// --------------------------------------------------------------------------\nvar ObjectMap;\n(function(ObjectMap) {\n    function Intersect(schema, callback) {\n        // prettier-ignore\n        return exports.Type.Intersect(schema.allOf.map((inner)=>Visit(inner, callback)), {\n            ...schema\n        });\n    }\n    function Union(schema, callback) {\n        // prettier-ignore\n        return exports.Type.Union(schema.anyOf.map((inner)=>Visit(inner, callback)), {\n            ...schema\n        });\n    }\n    function Object1(schema, callback) {\n        return callback(schema);\n    }\n    function Visit(schema, callback) {\n        // There are cases where users need to map objects with unregistered kinds. Using a TypeGuard here would\n        // prevent sub schema mapping as unregistered kinds will not pass TSchema checks. This is notable in the\n        // case of TObject where unregistered property kinds cause the TObject check to fail. As mapping is only\n        // used for composition, we use explicit checks instead.\n        if (schema[exports.Kind] === \"Intersect\") return Intersect(schema, callback);\n        if (schema[exports.Kind] === \"Union\") return Union(schema, callback);\n        if (schema[exports.Kind] === \"Object\") return Object1(schema, callback);\n        return schema;\n    }\n    function Map1(schema, callback, options) {\n        return {\n            ...Visit(TypeClone.Clone(schema, {}), callback),\n            ...options\n        };\n    }\n    ObjectMap.Map = Map1;\n})(ObjectMap || (exports.ObjectMap = ObjectMap = {}));\nvar KeyResolver;\n(function(KeyResolver) {\n    function UnwrapPattern(key) {\n        return key[0] === \"^\" && key[key.length - 1] === \"$\" ? key.slice(1, key.length - 1) : key;\n    }\n    function Intersect(schema, options) {\n        return schema.allOf.reduce((acc, schema)=>[\n                ...acc,\n                ...Visit(schema, options)\n            ], []);\n    }\n    function Union(schema, options) {\n        const sets = schema.anyOf.map((inner)=>Visit(inner, options));\n        return [\n            ...sets.reduce((set, outer)=>outer.map((key)=>sets.every((inner)=>inner.includes(key)) ? set.add(key) : set)[0], new Set())\n        ];\n    }\n    function Object1(schema, options) {\n        return globalThis.Object.keys(schema.properties);\n    }\n    function Record(schema, options) {\n        return options.includePatterns ? globalThis.Object.keys(schema.patternProperties) : [];\n    }\n    function Visit(schema, options) {\n        if (TypeGuard.TIntersect(schema)) return Intersect(schema, options);\n        if (TypeGuard.TUnion(schema)) return Union(schema, options);\n        if (TypeGuard.TObject(schema)) return Object1(schema, options);\n        if (TypeGuard.TRecord(schema)) return Record(schema, options);\n        return [];\n    }\n    /** Resolves an array of keys in this schema */ function ResolveKeys(schema, options) {\n        return [\n            ...new Set(Visit(schema, options))\n        ];\n    }\n    KeyResolver.ResolveKeys = ResolveKeys;\n    /** Resolves a regular expression pattern matching all keys in this schema */ function ResolvePattern(schema) {\n        const keys = ResolveKeys(schema, {\n            includePatterns: true\n        });\n        const pattern = keys.map((key)=>`(${UnwrapPattern(key)})`);\n        return `^(${pattern.join(\"|\")})$`;\n    }\n    KeyResolver.ResolvePattern = ResolvePattern;\n})(KeyResolver || (exports.KeyResolver = KeyResolver = {}));\n// --------------------------------------------------------------------------\n// KeyArrayResolver\n// --------------------------------------------------------------------------\nvar KeyArrayResolver;\n(function(KeyArrayResolver) {\n    /** Resolves an array of string[] keys from the given schema or array type. */ function Resolve(schema) {\n        if (globalThis.Array.isArray(schema)) return schema;\n        if (TypeGuard.TUnionLiteral(schema)) return schema.anyOf.map((schema)=>schema.const.toString());\n        if (TypeGuard.TLiteral(schema)) return [\n            schema.const\n        ];\n        if (TypeGuard.TTemplateLiteral(schema)) {\n            const expression = TemplateLiteralParser.ParseExact(schema.pattern);\n            if (!TemplateLiteralFinite.Check(expression)) throw Error(\"KeyArrayResolver: Cannot resolve keys from infinite template expression\");\n            return [\n                ...TemplateLiteralGenerator.Generate(expression)\n            ];\n        }\n        return [];\n    }\n    KeyArrayResolver.Resolve = Resolve;\n})(KeyArrayResolver || (exports.KeyArrayResolver = KeyArrayResolver = {}));\n// --------------------------------------------------------------------------\n// UnionResolver\n// --------------------------------------------------------------------------\nvar UnionResolver;\n(function(UnionResolver) {\n    function* Union(union) {\n        for (const schema of union.anyOf){\n            if (schema[exports.Kind] === \"Union\") {\n                yield* Union(schema);\n            } else {\n                yield schema;\n            }\n        }\n    }\n    /** Returns a resolved union with interior unions flattened */ function Resolve(union) {\n        return exports.Type.Union([\n            ...Union(union)\n        ], {\n            ...union\n        });\n    }\n    UnionResolver.Resolve = Resolve;\n})(UnionResolver || (exports.UnionResolver = UnionResolver = {}));\n// --------------------------------------------------------------------------\n// TemplateLiteralPattern\n// --------------------------------------------------------------------------\nvar TemplateLiteralPattern;\n(function(TemplateLiteralPattern) {\n    function Escape(value) {\n        return value.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n    }\n    function Visit(schema, acc) {\n        if (TypeGuard.TTemplateLiteral(schema)) {\n            const pattern = schema.pattern.slice(1, schema.pattern.length - 1);\n            return pattern;\n        } else if (TypeGuard.TUnion(schema)) {\n            const tokens = schema.anyOf.map((schema)=>Visit(schema, acc)).join(\"|\");\n            return `(${tokens})`;\n        } else if (TypeGuard.TNumber(schema)) {\n            return `${acc}${exports.PatternNumber}`;\n        } else if (TypeGuard.TInteger(schema)) {\n            return `${acc}${exports.PatternNumber}`;\n        } else if (TypeGuard.TBigInt(schema)) {\n            return `${acc}${exports.PatternNumber}`;\n        } else if (TypeGuard.TString(schema)) {\n            return `${acc}${exports.PatternString}`;\n        } else if (TypeGuard.TLiteral(schema)) {\n            return `${acc}${Escape(schema.const.toString())}`;\n        } else if (TypeGuard.TBoolean(schema)) {\n            return `${acc}${exports.PatternBoolean}`;\n        } else if (TypeGuard.TNever(schema)) {\n            throw Error(\"TemplateLiteralPattern: TemplateLiteral cannot operate on types of TNever\");\n        } else {\n            throw Error(`TemplateLiteralPattern: Unexpected Kind '${schema[exports.Kind]}'`);\n        }\n    }\n    function Create(kinds) {\n        return `^${kinds.map((schema)=>Visit(schema, \"\")).join(\"\")}\\$`;\n    }\n    TemplateLiteralPattern.Create = Create;\n})(TemplateLiteralPattern || (exports.TemplateLiteralPattern = TemplateLiteralPattern = {}));\n// --------------------------------------------------------------------------------------\n// TemplateLiteralResolver\n// --------------------------------------------------------------------------------------\nvar TemplateLiteralResolver;\n(function(TemplateLiteralResolver) {\n    /** Resolves a template literal as a TUnion */ function Resolve(template) {\n        const expression = TemplateLiteralParser.ParseExact(template.pattern);\n        if (!TemplateLiteralFinite.Check(expression)) return exports.Type.String();\n        const literals = [\n            ...TemplateLiteralGenerator.Generate(expression)\n        ].map((value)=>exports.Type.Literal(value));\n        return exports.Type.Union(literals);\n    }\n    TemplateLiteralResolver.Resolve = Resolve;\n})(TemplateLiteralResolver || (exports.TemplateLiteralResolver = TemplateLiteralResolver = {}));\n// --------------------------------------------------------------------------------------\n// TemplateLiteralParser\n// --------------------------------------------------------------------------------------\nclass TemplateLiteralParserError extends Error {\n    constructor(message){\n        super(message);\n    }\n}\nexports.TemplateLiteralParserError = TemplateLiteralParserError;\nvar TemplateLiteralParser;\n(function(TemplateLiteralParser) {\n    function IsNonEscaped(pattern, index, char) {\n        return pattern[index] === char && pattern.charCodeAt(index - 1) !== 92;\n    }\n    function IsOpenParen(pattern, index) {\n        return IsNonEscaped(pattern, index, \"(\");\n    }\n    function IsCloseParen(pattern, index) {\n        return IsNonEscaped(pattern, index, \")\");\n    }\n    function IsSeparator(pattern, index) {\n        return IsNonEscaped(pattern, index, \"|\");\n    }\n    function IsGroup(pattern) {\n        if (!(IsOpenParen(pattern, 0) && IsCloseParen(pattern, pattern.length - 1))) return false;\n        let count = 0;\n        for(let index = 0; index < pattern.length; index++){\n            if (IsOpenParen(pattern, index)) count += 1;\n            if (IsCloseParen(pattern, index)) count -= 1;\n            if (count === 0 && index !== pattern.length - 1) return false;\n        }\n        return true;\n    }\n    function InGroup(pattern) {\n        return pattern.slice(1, pattern.length - 1);\n    }\n    function IsPrecedenceOr(pattern) {\n        let count = 0;\n        for(let index = 0; index < pattern.length; index++){\n            if (IsOpenParen(pattern, index)) count += 1;\n            if (IsCloseParen(pattern, index)) count -= 1;\n            if (IsSeparator(pattern, index) && count === 0) return true;\n        }\n        return false;\n    }\n    function IsPrecedenceAnd(pattern) {\n        for(let index = 0; index < pattern.length; index++){\n            if (IsOpenParen(pattern, index)) return true;\n        }\n        return false;\n    }\n    function Or(pattern) {\n        let [count, start] = [\n            0,\n            0\n        ];\n        const expressions = [];\n        for(let index = 0; index < pattern.length; index++){\n            if (IsOpenParen(pattern, index)) count += 1;\n            if (IsCloseParen(pattern, index)) count -= 1;\n            if (IsSeparator(pattern, index) && count === 0) {\n                const range = pattern.slice(start, index);\n                if (range.length > 0) expressions.push(Parse(range));\n                start = index + 1;\n            }\n        }\n        const range = pattern.slice(start);\n        if (range.length > 0) expressions.push(Parse(range));\n        if (expressions.length === 0) return {\n            type: \"const\",\n            const: \"\"\n        };\n        if (expressions.length === 1) return expressions[0];\n        return {\n            type: \"or\",\n            expr: expressions\n        };\n    }\n    function And(pattern) {\n        function Group(value, index) {\n            if (!IsOpenParen(value, index)) throw new TemplateLiteralParserError(`TemplateLiteralParser: Index must point to open parens`);\n            let count = 0;\n            for(let scan = index; scan < value.length; scan++){\n                if (IsOpenParen(value, scan)) count += 1;\n                if (IsCloseParen(value, scan)) count -= 1;\n                if (count === 0) return [\n                    index,\n                    scan\n                ];\n            }\n            throw new TemplateLiteralParserError(`TemplateLiteralParser: Unclosed group parens in expression`);\n        }\n        function Range(pattern, index) {\n            for(let scan = index; scan < pattern.length; scan++){\n                if (IsOpenParen(pattern, scan)) return [\n                    index,\n                    scan\n                ];\n            }\n            return [\n                index,\n                pattern.length\n            ];\n        }\n        const expressions = [];\n        for(let index = 0; index < pattern.length; index++){\n            if (IsOpenParen(pattern, index)) {\n                const [start, end] = Group(pattern, index);\n                const range = pattern.slice(start, end + 1);\n                expressions.push(Parse(range));\n                index = end;\n            } else {\n                const [start, end] = Range(pattern, index);\n                const range = pattern.slice(start, end);\n                if (range.length > 0) expressions.push(Parse(range));\n                index = end - 1;\n            }\n        }\n        if (expressions.length === 0) return {\n            type: \"const\",\n            const: \"\"\n        };\n        if (expressions.length === 1) return expressions[0];\n        return {\n            type: \"and\",\n            expr: expressions\n        };\n    }\n    /** Parses a pattern and returns an expression tree */ function Parse(pattern) {\n        if (IsGroup(pattern)) return Parse(InGroup(pattern));\n        if (IsPrecedenceOr(pattern)) return Or(pattern);\n        if (IsPrecedenceAnd(pattern)) return And(pattern);\n        return {\n            type: \"const\",\n            const: pattern\n        };\n    }\n    TemplateLiteralParser.Parse = Parse;\n    /** Parses a pattern and strips forward and trailing ^ and $ */ function ParseExact(pattern) {\n        return Parse(pattern.slice(1, pattern.length - 1));\n    }\n    TemplateLiteralParser.ParseExact = ParseExact;\n})(TemplateLiteralParser || (exports.TemplateLiteralParser = TemplateLiteralParser = {}));\n// --------------------------------------------------------------------------------------\n// TemplateLiteralFinite\n// --------------------------------------------------------------------------------------\nvar TemplateLiteralFinite;\n(function(TemplateLiteralFinite) {\n    function IsNumber(expression) {\n        // prettier-ignore\n        return expression.type === \"or\" && expression.expr.length === 2 && expression.expr[0].type === \"const\" && expression.expr[0].const === \"0\" && expression.expr[1].type === \"const\" && expression.expr[1].const === \"[1-9][0-9]*\";\n    }\n    function IsBoolean(expression) {\n        // prettier-ignore\n        return expression.type === \"or\" && expression.expr.length === 2 && expression.expr[0].type === \"const\" && expression.expr[0].const === \"true\" && expression.expr[1].type === \"const\" && expression.expr[1].const === \"false\";\n    }\n    function IsString(expression) {\n        return expression.type === \"const\" && expression.const === \".*\";\n    }\n    function Check(expression) {\n        if (IsBoolean(expression)) return true;\n        if (IsNumber(expression) || IsString(expression)) return false;\n        if (expression.type === \"and\") return expression.expr.every((expr)=>Check(expr));\n        if (expression.type === \"or\") return expression.expr.every((expr)=>Check(expr));\n        if (expression.type === \"const\") return true;\n        throw Error(`TemplateLiteralFinite: Unknown expression type`);\n    }\n    TemplateLiteralFinite.Check = Check;\n})(TemplateLiteralFinite || (exports.TemplateLiteralFinite = TemplateLiteralFinite = {}));\n// --------------------------------------------------------------------------------------\n// TemplateLiteralGenerator\n// --------------------------------------------------------------------------------------\nvar TemplateLiteralGenerator;\n(function(TemplateLiteralGenerator) {\n    function* Reduce(buffer) {\n        if (buffer.length === 1) return yield* buffer[0];\n        for (const left of buffer[0]){\n            for (const right of Reduce(buffer.slice(1))){\n                yield `${left}${right}`;\n            }\n        }\n    }\n    function* And(expression) {\n        return yield* Reduce(expression.expr.map((expr)=>[\n                ...Generate(expr)\n            ]));\n    }\n    function* Or(expression) {\n        for (const expr of expression.expr)yield* Generate(expr);\n    }\n    function* Const(expression) {\n        return yield expression.const;\n    }\n    function* Generate(expression) {\n        if (expression.type === \"and\") return yield* And(expression);\n        if (expression.type === \"or\") return yield* Or(expression);\n        if (expression.type === \"const\") return yield* Const(expression);\n        throw Error(\"TemplateLiteralGenerator: Unknown expression\");\n    }\n    TemplateLiteralGenerator.Generate = Generate;\n})(TemplateLiteralGenerator || (exports.TemplateLiteralGenerator = TemplateLiteralGenerator = {}));\n// ---------------------------------------------------------------------\n// TemplateLiteralDslParser\n// ---------------------------------------------------------------------\nvar TemplateLiteralDslParser;\n(function(TemplateLiteralDslParser) {\n    function* ParseUnion(template) {\n        const trim = template.trim().replace(/\"|'/g, \"\");\n        if (trim === \"boolean\") return yield exports.Type.Boolean();\n        if (trim === \"number\") return yield exports.Type.Number();\n        if (trim === \"bigint\") return yield exports.Type.BigInt();\n        if (trim === \"string\") return yield exports.Type.String();\n        const literals = trim.split(\"|\").map((literal)=>exports.Type.Literal(literal.trim()));\n        return yield literals.length === 0 ? exports.Type.Never() : literals.length === 1 ? literals[0] : exports.Type.Union(literals);\n    }\n    function* ParseTerminal(template) {\n        if (template[1] !== \"{\") {\n            const L = exports.Type.Literal(\"$\");\n            const R = ParseLiteral(template.slice(1));\n            return yield* [\n                L,\n                ...R\n            ];\n        }\n        for(let i = 2; i < template.length; i++){\n            if (template[i] === \"}\") {\n                const L = ParseUnion(template.slice(2, i));\n                const R = ParseLiteral(template.slice(i + 1));\n                return yield* [\n                    ...L,\n                    ...R\n                ];\n            }\n        }\n        yield exports.Type.Literal(template);\n    }\n    function* ParseLiteral(template) {\n        for(let i = 0; i < template.length; i++){\n            if (template[i] === \"$\") {\n                const L = exports.Type.Literal(template.slice(0, i));\n                const R = ParseTerminal(template.slice(i));\n                return yield* [\n                    L,\n                    ...R\n                ];\n            }\n        }\n        yield exports.Type.Literal(template);\n    }\n    function Parse(template_dsl) {\n        return [\n            ...ParseLiteral(template_dsl)\n        ];\n    }\n    TemplateLiteralDslParser.Parse = Parse;\n})(TemplateLiteralDslParser || (exports.TemplateLiteralDslParser = TemplateLiteralDslParser = {}));\n// --------------------------------------------------------------------------\n// TypeOrdinal: Used for auto $id generation\n// --------------------------------------------------------------------------\nlet TypeOrdinal = 0;\n// --------------------------------------------------------------------------\n// TypeBuilder\n// --------------------------------------------------------------------------\nclass TypeBuilder {\n    /** `[Utility]` Creates a schema without `static` and `params` types */ Create(schema) {\n        return schema;\n    }\n    /** `[Standard]` Omits compositing symbols from this schema */ Strict(schema) {\n        return JSON.parse(JSON.stringify(schema));\n    }\n}\nexports.TypeBuilder = TypeBuilder;\n// --------------------------------------------------------------------------\n// StandardTypeBuilder\n// --------------------------------------------------------------------------\nclass StandardTypeBuilder extends TypeBuilder {\n    // ------------------------------------------------------------------------\n    // Modifiers\n    // ------------------------------------------------------------------------\n    /** `[Modifier]` Creates a Optional property */ Optional(schema) {\n        return {\n            [exports.Modifier]: \"Optional\",\n            ...TypeClone.Clone(schema, {})\n        };\n    }\n    /** `[Modifier]` Creates a ReadonlyOptional property */ ReadonlyOptional(schema) {\n        return {\n            [exports.Modifier]: \"ReadonlyOptional\",\n            ...TypeClone.Clone(schema, {})\n        };\n    }\n    /** `[Modifier]` Creates a Readonly object or property */ Readonly(schema) {\n        return {\n            [exports.Modifier]: \"Readonly\",\n            ...schema\n        };\n    }\n    // ------------------------------------------------------------------------\n    // Types\n    // ------------------------------------------------------------------------\n    /** `[Standard]` Creates an Any type */ Any(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Any\"\n        });\n    }\n    /** `[Standard]` Creates an Array type */ Array(items, options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Array\",\n            type: \"array\",\n            items: TypeClone.Clone(items, {})\n        });\n    }\n    /** `[Standard]` Creates a Boolean type */ Boolean(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Boolean\",\n            type: \"boolean\"\n        });\n    }\n    /** `[Standard]` Creates a Composite object type. */ Composite(objects, options) {\n        const intersect = exports.Type.Intersect(objects, {});\n        const keys = KeyResolver.ResolveKeys(intersect, {\n            includePatterns: false\n        });\n        const properties = keys.reduce((acc, key)=>({\n                ...acc,\n                [key]: exports.Type.Index(intersect, [\n                    key\n                ])\n            }), {});\n        return exports.Type.Object(properties, options);\n    }\n    /** `[Standard]` Creates a Enum type */ Enum(item, options = {}) {\n        // prettier-ignore\n        const values = globalThis.Object.keys(item).filter((key)=>isNaN(key)).map((key)=>item[key]);\n        const anyOf = values.map((value)=>typeof value === \"string\" ? {\n                [exports.Kind]: \"Literal\",\n                type: \"string\",\n                const: value\n            } : {\n                [exports.Kind]: \"Literal\",\n                type: \"number\",\n                const: value\n            });\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Union\",\n            anyOf\n        });\n    }\n    /** `[Standard]` A conditional type expression that will return the true type if the left type extends the right */ Extends(left, right, trueType, falseType, options = {}) {\n        switch(TypeExtends.Extends(left, right)){\n            case TypeExtendsResult.Union:\n                return this.Union([\n                    TypeClone.Clone(trueType, options),\n                    TypeClone.Clone(falseType, options)\n                ]);\n            case TypeExtendsResult.True:\n                return TypeClone.Clone(trueType, options);\n            case TypeExtendsResult.False:\n                return TypeClone.Clone(falseType, options);\n        }\n    }\n    /** `[Standard]` Excludes from the left type any type that is not assignable to the right */ Exclude(left, right, options = {}) {\n        if (TypeGuard.TTemplateLiteral(left)) return this.Exclude(TemplateLiteralResolver.Resolve(left), right, options);\n        if (TypeGuard.TTemplateLiteral(right)) return this.Exclude(left, TemplateLiteralResolver.Resolve(right), options);\n        if (TypeGuard.TUnion(left)) {\n            const narrowed = left.anyOf.filter((inner)=>TypeExtends.Extends(inner, right) === TypeExtendsResult.False);\n            return narrowed.length === 1 ? TypeClone.Clone(narrowed[0], options) : this.Union(narrowed, options);\n        } else {\n            return TypeExtends.Extends(left, right) !== TypeExtendsResult.False ? this.Never(options) : TypeClone.Clone(left, options);\n        }\n    }\n    /** `[Standard]` Extracts from the left type any type that is assignable to the right */ Extract(left, right, options = {}) {\n        if (TypeGuard.TTemplateLiteral(left)) return this.Extract(TemplateLiteralResolver.Resolve(left), right, options);\n        if (TypeGuard.TTemplateLiteral(right)) return this.Extract(left, TemplateLiteralResolver.Resolve(right), options);\n        if (TypeGuard.TUnion(left)) {\n            const narrowed = left.anyOf.filter((inner)=>TypeExtends.Extends(inner, right) !== TypeExtendsResult.False);\n            return narrowed.length === 1 ? TypeClone.Clone(narrowed[0], options) : this.Union(narrowed, options);\n        } else {\n            return TypeExtends.Extends(left, right) !== TypeExtendsResult.False ? TypeClone.Clone(left, options) : this.Never(options);\n        }\n    }\n    /** `[Standard]` Returns indexed property types for the given keys */ Index(schema, unresolved, options = {}) {\n        if (TypeGuard.TArray(schema) && TypeGuard.TNumber(unresolved)) {\n            return TypeClone.Clone(schema.items, options);\n        } else if (TypeGuard.TTuple(schema) && TypeGuard.TNumber(unresolved)) {\n            const items = schema.items === undefined ? [] : schema.items;\n            const cloned = items.map((schema)=>TypeClone.Clone(schema, {}));\n            return this.Union(cloned, options);\n        } else {\n            const keys = KeyArrayResolver.Resolve(unresolved);\n            const clone = TypeClone.Clone(schema, {});\n            return IndexedAccessor.Resolve(clone, keys, options);\n        }\n    }\n    /** `[Standard]` Creates an Integer type */ Integer(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Integer\",\n            type: \"integer\"\n        });\n    }\n    Intersect(allOf, options = {}) {\n        if (allOf.length === 0) return exports.Type.Never();\n        if (allOf.length === 1) return TypeClone.Clone(allOf[0], options);\n        const objects = allOf.every((schema)=>TypeGuard.TObject(schema));\n        const cloned = allOf.map((schema)=>TypeClone.Clone(schema, {}));\n        const clonedUnevaluatedProperties = TypeGuard.TSchema(options.unevaluatedProperties) ? {\n            unevaluatedProperties: TypeClone.Clone(options.unevaluatedProperties, {})\n        } : {};\n        if (options.unevaluatedProperties === false || TypeGuard.TSchema(options.unevaluatedProperties) || objects) {\n            return this.Create({\n                ...options,\n                ...clonedUnevaluatedProperties,\n                [exports.Kind]: \"Intersect\",\n                type: \"object\",\n                allOf: cloned\n            });\n        } else {\n            return this.Create({\n                ...options,\n                ...clonedUnevaluatedProperties,\n                [exports.Kind]: \"Intersect\",\n                allOf: cloned\n            });\n        }\n    }\n    /** `[Standard]` Creates a KeyOf type */ KeyOf(schema, options = {}) {\n        if (TypeGuard.TRecord(schema)) {\n            const pattern = Object.getOwnPropertyNames(schema.patternProperties)[0];\n            if (pattern === exports.PatternNumberExact) return this.Number(options);\n            if (pattern === exports.PatternStringExact) return this.String(options);\n            throw Error(\"StandardTypeBuilder: Unable to resolve key type from Record key pattern\");\n        } else if (TypeGuard.TTuple(schema)) {\n            const items = schema.items === undefined ? [] : schema.items;\n            const literals = items.map((_, index)=>exports.Type.Literal(index));\n            return this.Union(literals, options);\n        } else if (TypeGuard.TArray(schema)) {\n            return this.Number(options);\n        } else {\n            const keys = KeyResolver.ResolveKeys(schema, {\n                includePatterns: false\n            });\n            if (keys.length === 0) return this.Never(options);\n            const literals = keys.map((key)=>this.Literal(key));\n            return this.Union(literals, options);\n        }\n    }\n    /** `[Standard]` Creates a Literal type */ Literal(value, options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Literal\",\n            const: value,\n            type: typeof value\n        });\n    }\n    /** `[Standard]` Creates a Never type */ Never(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Never\",\n            not: {}\n        });\n    }\n    /** `[Standard]` Creates a Not type */ Not(not, options) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Not\",\n            not\n        });\n    }\n    /** `[Standard]` Creates a Null type */ Null(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Null\",\n            type: \"null\"\n        });\n    }\n    /** `[Standard]` Creates a Number type */ Number(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Number\",\n            type: \"number\"\n        });\n    }\n    /** `[Standard]` Creates an Object type */ Object(properties, options = {}) {\n        const propertyKeys = globalThis.Object.getOwnPropertyNames(properties);\n        const optionalKeys = propertyKeys.filter((key)=>TypeGuard.TOptional(properties[key]) || TypeGuard.TReadonlyOptional(properties[key]));\n        const requiredKeys = propertyKeys.filter((name)=>!optionalKeys.includes(name));\n        const clonedAdditionalProperties = TypeGuard.TSchema(options.additionalProperties) ? {\n            additionalProperties: TypeClone.Clone(options.additionalProperties, {})\n        } : {};\n        const clonedProperties = propertyKeys.reduce((acc, key)=>({\n                ...acc,\n                [key]: TypeClone.Clone(properties[key], {})\n            }), {});\n        if (requiredKeys.length > 0) {\n            return this.Create({\n                ...options,\n                ...clonedAdditionalProperties,\n                [exports.Kind]: \"Object\",\n                type: \"object\",\n                properties: clonedProperties,\n                required: requiredKeys\n            });\n        } else {\n            return this.Create({\n                ...options,\n                ...clonedAdditionalProperties,\n                [exports.Kind]: \"Object\",\n                type: \"object\",\n                properties: clonedProperties\n            });\n        }\n    }\n    Omit(schema, unresolved, options = {}) {\n        const keys = KeyArrayResolver.Resolve(unresolved);\n        // prettier-ignore\n        return ObjectMap.Map(TypeClone.Clone(schema, {}), (schema)=>{\n            if (schema.required) {\n                schema.required = schema.required.filter((key)=>!keys.includes(key));\n                if (schema.required.length === 0) delete schema.required;\n            }\n            for (const key of globalThis.Object.keys(schema.properties)){\n                if (keys.includes(key)) delete schema.properties[key];\n            }\n            return this.Create(schema);\n        }, options);\n    }\n    /** `[Standard]` Creates a mapped type where all properties are Optional */ Partial(schema, options = {}) {\n        function Apply(schema) {\n            // prettier-ignore\n            switch(schema[exports.Modifier]){\n                case \"ReadonlyOptional\":\n                    schema[exports.Modifier] = \"ReadonlyOptional\";\n                    break;\n                case \"Readonly\":\n                    schema[exports.Modifier] = \"ReadonlyOptional\";\n                    break;\n                case \"Optional\":\n                    schema[exports.Modifier] = \"Optional\";\n                    break;\n                default:\n                    schema[exports.Modifier] = \"Optional\";\n                    break;\n            }\n        }\n        // prettier-ignore\n        return ObjectMap.Map(TypeClone.Clone(schema, {}), (schema)=>{\n            delete schema.required;\n            globalThis.Object.keys(schema.properties).forEach((key)=>Apply(schema.properties[key]));\n            return schema;\n        }, options);\n    }\n    Pick(schema, unresolved, options = {}) {\n        const keys = KeyArrayResolver.Resolve(unresolved);\n        // prettier-ignore\n        return ObjectMap.Map(TypeClone.Clone(schema, {}), (schema)=>{\n            if (schema.required) {\n                schema.required = schema.required.filter((key)=>keys.includes(key));\n                if (schema.required.length === 0) delete schema.required;\n            }\n            for (const key of globalThis.Object.keys(schema.properties)){\n                if (!keys.includes(key)) delete schema.properties[key];\n            }\n            return this.Create(schema);\n        }, options);\n    }\n    /** `[Standard]` Creates a Record type */ Record(key, schema, options = {}) {\n        if (TypeGuard.TTemplateLiteral(key)) {\n            const expression = TemplateLiteralParser.ParseExact(key.pattern);\n            // prettier-ignore\n            return TemplateLiteralFinite.Check(expression) ? this.Object([\n                ...TemplateLiteralGenerator.Generate(expression)\n            ].reduce((acc, key)=>({\n                    ...acc,\n                    [key]: TypeClone.Clone(schema, {})\n                }), {}), options) : this.Create({\n                ...options,\n                [exports.Kind]: \"Record\",\n                type: \"object\",\n                patternProperties: {\n                    [key.pattern]: TypeClone.Clone(schema, {})\n                }\n            });\n        } else if (TypeGuard.TUnion(key)) {\n            const union = UnionResolver.Resolve(key);\n            if (TypeGuard.TUnionLiteral(union)) {\n                const properties = union.anyOf.reduce((acc, literal)=>({\n                        ...acc,\n                        [literal.const]: TypeClone.Clone(schema, {})\n                    }), {});\n                return this.Object(properties, {\n                    ...options,\n                    [exports.Hint]: \"Record\"\n                });\n            } else throw Error(\"TypeBuilder: Record key of type union contains non-literal types\");\n        } else if (TypeGuard.TLiteral(key)) {\n            if (typeof key.const === \"string\" || typeof key.const === \"number\") {\n                return this.Object({\n                    [key.const]: TypeClone.Clone(schema, {})\n                }, options);\n            } else throw Error(\"TypeBuilder: Record key of type literal is not of type string or number\");\n        } else if (TypeGuard.TInteger(key) || TypeGuard.TNumber(key)) {\n            const pattern = exports.PatternNumberExact;\n            return this.Create({\n                ...options,\n                [exports.Kind]: \"Record\",\n                type: \"object\",\n                patternProperties: {\n                    [pattern]: TypeClone.Clone(schema, {})\n                }\n            });\n        } else if (TypeGuard.TString(key)) {\n            const pattern = key.pattern === undefined ? exports.PatternStringExact : key.pattern;\n            return this.Create({\n                ...options,\n                [exports.Kind]: \"Record\",\n                type: \"object\",\n                patternProperties: {\n                    [pattern]: TypeClone.Clone(schema, {})\n                }\n            });\n        } else {\n            throw Error(`StandardTypeBuilder: Record key is an invalid type`);\n        }\n    }\n    /** `[Standard]` Creates a Recursive type */ Recursive(callback, options = {}) {\n        if (options.$id === undefined) options.$id = `T${TypeOrdinal++}`;\n        const thisType = callback({\n            [exports.Kind]: \"This\",\n            $ref: `${options.$id}`\n        });\n        thisType.$id = options.$id;\n        return this.Create({\n            ...options,\n            [exports.Hint]: \"Recursive\",\n            ...thisType\n        });\n    }\n    /** `[Standard]` Creates a Ref type. The referenced type must contain a $id */ Ref(schema, options = {}) {\n        if (schema.$id === undefined) throw Error(\"StandardTypeBuilder.Ref: Target type must specify an $id\");\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Ref\",\n            $ref: schema.$id\n        });\n    }\n    /** `[Standard]` Creates a mapped type where all properties are Required */ Required(schema, options = {}) {\n        function Apply(schema) {\n            // prettier-ignore\n            switch(schema[exports.Modifier]){\n                case \"ReadonlyOptional\":\n                    schema[exports.Modifier] = \"Readonly\";\n                    break;\n                case \"Readonly\":\n                    schema[exports.Modifier] = \"Readonly\";\n                    break;\n                case \"Optional\":\n                    delete schema[exports.Modifier];\n                    break;\n                default:\n                    delete schema[exports.Modifier];\n                    break;\n            }\n        }\n        // prettier-ignore\n        return ObjectMap.Map(TypeClone.Clone(schema, {}), (schema)=>{\n            schema.required = globalThis.Object.keys(schema.properties);\n            globalThis.Object.keys(schema.properties).forEach((key)=>Apply(schema.properties[key]));\n            return schema;\n        }, options);\n    }\n    /** `[Standard]` Returns a schema array which allows types to compose with the JavaScript spread operator */ Rest(schema) {\n        if (TypeGuard.TTuple(schema)) {\n            if (schema.items === undefined) return [];\n            return schema.items.map((schema)=>TypeClone.Clone(schema, {}));\n        } else {\n            return [\n                TypeClone.Clone(schema, {})\n            ];\n        }\n    }\n    /** `[Standard]` Creates a String type */ String(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"String\",\n            type: \"string\"\n        });\n    }\n    /** `[Standard]` Creates a template literal type */ TemplateLiteral(unresolved, options = {}) {\n        // prettier-ignore\n        const pattern = typeof unresolved === \"string\" ? TemplateLiteralPattern.Create(TemplateLiteralDslParser.Parse(unresolved)) : TemplateLiteralPattern.Create(unresolved);\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"TemplateLiteral\",\n            type: \"string\",\n            pattern\n        });\n    }\n    /** `[Standard]` Creates a Tuple type */ Tuple(items, options = {}) {\n        const [additionalItems, minItems, maxItems] = [\n            false,\n            items.length,\n            items.length\n        ];\n        const clonedItems = items.map((item)=>TypeClone.Clone(item, {}));\n        // prettier-ignore\n        const schema = items.length > 0 ? {\n            ...options,\n            [exports.Kind]: \"Tuple\",\n            type: \"array\",\n            items: clonedItems,\n            additionalItems,\n            minItems,\n            maxItems\n        } : {\n            ...options,\n            [exports.Kind]: \"Tuple\",\n            type: \"array\",\n            minItems,\n            maxItems\n        };\n        return this.Create(schema);\n    }\n    Union(union, options = {}) {\n        if (TypeGuard.TTemplateLiteral(union)) {\n            return TemplateLiteralResolver.Resolve(union);\n        } else {\n            const anyOf = union;\n            if (anyOf.length === 0) return this.Never(options);\n            if (anyOf.length === 1) return this.Create(TypeClone.Clone(anyOf[0], options));\n            const clonedAnyOf = anyOf.map((schema)=>TypeClone.Clone(schema, {}));\n            return this.Create({\n                ...options,\n                [exports.Kind]: \"Union\",\n                anyOf: clonedAnyOf\n            });\n        }\n    }\n    /** `[Standard]` Creates an Unknown type */ Unknown(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Unknown\"\n        });\n    }\n    /** `[Standard]` Creates a Unsafe type that infers for the generic argument */ Unsafe(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: options[exports.Kind] || \"Unsafe\"\n        });\n    }\n}\nexports.StandardTypeBuilder = StandardTypeBuilder;\n// --------------------------------------------------------------------------\n// ExtendedTypeBuilder\n// --------------------------------------------------------------------------\nclass ExtendedTypeBuilder extends StandardTypeBuilder {\n    /** `[Extended]` Creates a BigInt type */ BigInt(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"BigInt\",\n            type: \"null\",\n            typeOf: \"BigInt\"\n        });\n    }\n    /** `[Extended]` Extracts the ConstructorParameters from the given Constructor type */ ConstructorParameters(schema, options = {}) {\n        return this.Tuple([\n            ...schema.parameters\n        ], {\n            ...options\n        });\n    }\n    /** `[Extended]` Creates a Constructor type */ Constructor(parameters, returns, options) {\n        const clonedReturns = TypeClone.Clone(returns, {});\n        const clonedParameters = parameters.map((parameter)=>TypeClone.Clone(parameter, {}));\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Constructor\",\n            type: \"object\",\n            instanceOf: \"Constructor\",\n            parameters: clonedParameters,\n            returns: clonedReturns\n        });\n    }\n    /** `[Extended]` Creates a Date type */ Date(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Date\",\n            type: \"object\",\n            instanceOf: \"Date\"\n        });\n    }\n    /** `[Extended]` Creates a Function type */ Function(parameters, returns, options) {\n        const clonedReturns = TypeClone.Clone(returns, {});\n        const clonedParameters = parameters.map((parameter)=>TypeClone.Clone(parameter, {}));\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Function\",\n            type: \"object\",\n            instanceOf: \"Function\",\n            parameters: clonedParameters,\n            returns: clonedReturns\n        });\n    }\n    /** `[Extended]` Extracts the InstanceType from the given Constructor */ InstanceType(schema, options = {}) {\n        return TypeClone.Clone(schema.returns, options);\n    }\n    /** `[Extended]` Extracts the Parameters from the given Function type */ Parameters(schema, options = {}) {\n        return this.Tuple(schema.parameters, {\n            ...options\n        });\n    }\n    /** `[Extended]` Creates a Promise type */ Promise(item, options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Promise\",\n            type: \"object\",\n            instanceOf: \"Promise\",\n            item: TypeClone.Clone(item, {})\n        });\n    }\n    /** `[Extended]` Creates a regular expression type */ RegEx(regex, options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"String\",\n            type: \"string\",\n            pattern: regex.source\n        });\n    }\n    /** `[Extended]` Extracts the ReturnType from the given Function */ ReturnType(schema, options = {}) {\n        return TypeClone.Clone(schema.returns, options);\n    }\n    /** `[Extended]` Creates a Symbol type */ Symbol(options) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Symbol\",\n            type: \"null\",\n            typeOf: \"Symbol\"\n        });\n    }\n    /** `[Extended]` Creates a Undefined type */ Undefined(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Undefined\",\n            type: \"null\",\n            typeOf: \"Undefined\"\n        });\n    }\n    /** `[Extended]` Creates a Uint8Array type */ Uint8Array(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Uint8Array\",\n            type: \"object\",\n            instanceOf: \"Uint8Array\"\n        });\n    }\n    /** `[Extended]` Creates a Void type */ Void(options = {}) {\n        return this.Create({\n            ...options,\n            [exports.Kind]: \"Void\",\n            type: \"null\",\n            typeOf: \"Void\"\n        });\n    }\n}\nexports.ExtendedTypeBuilder = ExtendedTypeBuilder;\n/** JSON Schema TypeBuilder with Static Resolution for TypeScript */ exports.StandardType = new StandardTypeBuilder();\n/** JSON Schema TypeBuilder with Static Resolution for TypeScript */ exports.Type = new ExtendedTypeBuilder();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sinclair/typebox/typebox.js\n");

/***/ })

};
;