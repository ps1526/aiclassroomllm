"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fast-uri";
exports.ids = ["vendor-chunks/fast-uri"];
exports.modules = {

/***/ "(rsc)/./node_modules/fast-uri/index.js":
/*!****************************************!*\
  !*** ./node_modules/fast-uri/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { normalizeIPv6, normalizeIPv4, removeDotSegments, recomposeAuthority, normalizeComponentEncoding } = __webpack_require__(/*! ./lib/utils */ \"(rsc)/./node_modules/fast-uri/lib/utils.js\");\nconst SCHEMES = __webpack_require__(/*! ./lib/schemes */ \"(rsc)/./node_modules/fast-uri/lib/schemes.js\");\nfunction normalize(uri, options) {\n    if (typeof uri === \"string\") {\n        uri = serialize(parse(uri, options), options);\n    } else if (typeof uri === \"object\") {\n        uri = parse(serialize(uri, options), options);\n    }\n    return uri;\n}\nfunction resolve(baseURI, relativeURI, options) {\n    const schemelessOptions = Object.assign({\n        scheme: \"null\"\n    }, options);\n    const resolved = resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true);\n    return serialize(resolved, {\n        ...schemelessOptions,\n        skipEscape: true\n    });\n}\nfunction resolveComponents(base, relative, options, skipNormalization) {\n    const target = {};\n    if (!skipNormalization) {\n        base = parse(serialize(base, options), options) // normalize base components\n        ;\n        relative = parse(serialize(relative, options), options) // normalize relative components\n        ;\n    }\n    options = options || {};\n    if (!options.tolerant && relative.scheme) {\n        target.scheme = relative.scheme;\n        // target.authority = relative.authority;\n        target.userinfo = relative.userinfo;\n        target.host = relative.host;\n        target.port = relative.port;\n        target.path = removeDotSegments(relative.path || \"\");\n        target.query = relative.query;\n    } else {\n        if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {\n            // target.authority = relative.authority;\n            target.userinfo = relative.userinfo;\n            target.host = relative.host;\n            target.port = relative.port;\n            target.path = removeDotSegments(relative.path || \"\");\n            target.query = relative.query;\n        } else {\n            if (!relative.path) {\n                target.path = base.path;\n                if (relative.query !== undefined) {\n                    target.query = relative.query;\n                } else {\n                    target.query = base.query;\n                }\n            } else {\n                if (relative.path.charAt(0) === \"/\") {\n                    target.path = removeDotSegments(relative.path);\n                } else {\n                    if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {\n                        target.path = \"/\" + relative.path;\n                    } else if (!base.path) {\n                        target.path = relative.path;\n                    } else {\n                        target.path = base.path.slice(0, base.path.lastIndexOf(\"/\") + 1) + relative.path;\n                    }\n                    target.path = removeDotSegments(target.path);\n                }\n                target.query = relative.query;\n            }\n            // target.authority = base.authority;\n            target.userinfo = base.userinfo;\n            target.host = base.host;\n            target.port = base.port;\n        }\n        target.scheme = base.scheme;\n    }\n    target.fragment = relative.fragment;\n    return target;\n}\nfunction equal(uriA, uriB, options) {\n    if (typeof uriA === \"string\") {\n        uriA = unescape(uriA);\n        uriA = serialize(normalizeComponentEncoding(parse(uriA, options), true), {\n            ...options,\n            skipEscape: true\n        });\n    } else if (typeof uriA === \"object\") {\n        uriA = serialize(normalizeComponentEncoding(uriA, true), {\n            ...options,\n            skipEscape: true\n        });\n    }\n    if (typeof uriB === \"string\") {\n        uriB = unescape(uriB);\n        uriB = serialize(normalizeComponentEncoding(parse(uriB, options), true), {\n            ...options,\n            skipEscape: true\n        });\n    } else if (typeof uriB === \"object\") {\n        uriB = serialize(normalizeComponentEncoding(uriB, true), {\n            ...options,\n            skipEscape: true\n        });\n    }\n    return uriA.toLowerCase() === uriB.toLowerCase();\n}\nfunction serialize(cmpts, opts) {\n    const components = {\n        host: cmpts.host,\n        scheme: cmpts.scheme,\n        userinfo: cmpts.userinfo,\n        port: cmpts.port,\n        path: cmpts.path,\n        query: cmpts.query,\n        nid: cmpts.nid,\n        nss: cmpts.nss,\n        uuid: cmpts.uuid,\n        fragment: cmpts.fragment,\n        reference: cmpts.reference,\n        resourceName: cmpts.resourceName,\n        secure: cmpts.secure,\n        error: \"\"\n    };\n    const options = Object.assign({}, opts);\n    const uriTokens = [];\n    // find scheme handler\n    const schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()];\n    // perform scheme specific serialization\n    if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);\n    if (components.path !== undefined) {\n        if (!options.skipEscape) {\n            components.path = escape(components.path);\n            if (components.scheme !== undefined) {\n                components.path = components.path.split(\"%3A\").join(\":\");\n            }\n        } else {\n            components.path = unescape(components.path);\n        }\n    }\n    if (options.reference !== \"suffix\" && components.scheme) {\n        uriTokens.push(components.scheme, \":\");\n    }\n    const authority = recomposeAuthority(components);\n    if (authority !== undefined) {\n        if (options.reference !== \"suffix\") {\n            uriTokens.push(\"//\");\n        }\n        uriTokens.push(authority);\n        if (components.path && components.path.charAt(0) !== \"/\") {\n            uriTokens.push(\"/\");\n        }\n    }\n    if (components.path !== undefined) {\n        let s = components.path;\n        if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {\n            s = removeDotSegments(s);\n        }\n        if (authority === undefined) {\n            s = s.replace(/^\\/\\//u, \"/%2F\") // don't allow the path to start with \"//\"\n            ;\n        }\n        uriTokens.push(s);\n    }\n    if (components.query !== undefined) {\n        uriTokens.push(\"?\", components.query);\n    }\n    if (components.fragment !== undefined) {\n        uriTokens.push(\"#\", components.fragment);\n    }\n    return uriTokens.join(\"\");\n}\nconst hexLookUp = Array.from({\n    length: 127\n}, (_v, k)=>/[^!\"$&'()*+,\\-.;=_`a-z{}~]/u.test(String.fromCharCode(k)));\nfunction nonSimpleDomain(value) {\n    let code = 0;\n    for(let i = 0, len = value.length; i < len; ++i){\n        code = value.charCodeAt(i);\n        if (code > 126 || hexLookUp[code]) {\n            return true;\n        }\n    }\n    return false;\n}\nconst URI_PARSE = /^(?:([^#/:?]+):)?(?:\\/\\/((?:([^#/?@]*)@)?(\\[[^#/?\\]]+\\]|[^#/:?]*)(?::(\\d*))?))?([^#?]*)(?:\\?([^#]*))?(?:#((?:.|[\\n\\r])*))?/u;\nfunction parse(uri, opts) {\n    const options = Object.assign({}, opts);\n    const parsed = {\n        scheme: undefined,\n        userinfo: undefined,\n        host: \"\",\n        port: undefined,\n        path: \"\",\n        query: undefined,\n        fragment: undefined\n    };\n    const gotEncoding = uri.indexOf(\"%\") !== -1;\n    let isIP = false;\n    if (options.reference === \"suffix\") uri = (options.scheme ? options.scheme + \":\" : \"\") + \"//\" + uri;\n    const matches = uri.match(URI_PARSE);\n    if (matches) {\n        // store each component\n        parsed.scheme = matches[1];\n        parsed.userinfo = matches[3];\n        parsed.host = matches[4];\n        parsed.port = parseInt(matches[5], 10);\n        parsed.path = matches[6] || \"\";\n        parsed.query = matches[7];\n        parsed.fragment = matches[8];\n        // fix port number\n        if (isNaN(parsed.port)) {\n            parsed.port = matches[5];\n        }\n        if (parsed.host) {\n            const ipv4result = normalizeIPv4(parsed.host);\n            if (ipv4result.isIPV4 === false) {\n                const ipv6result = normalizeIPv6(ipv4result.host);\n                parsed.host = ipv6result.host.toLowerCase();\n                isIP = ipv6result.isIPV6;\n            } else {\n                parsed.host = ipv4result.host;\n                isIP = true;\n            }\n        }\n        if (parsed.scheme === undefined && parsed.userinfo === undefined && parsed.host === undefined && parsed.port === undefined && parsed.query === undefined && !parsed.path) {\n            parsed.reference = \"same-document\";\n        } else if (parsed.scheme === undefined) {\n            parsed.reference = \"relative\";\n        } else if (parsed.fragment === undefined) {\n            parsed.reference = \"absolute\";\n        } else {\n            parsed.reference = \"uri\";\n        }\n        // check for reference errors\n        if (options.reference && options.reference !== \"suffix\" && options.reference !== parsed.reference) {\n            parsed.error = parsed.error || \"URI is not a \" + options.reference + \" reference.\";\n        }\n        // find scheme handler\n        const schemeHandler = SCHEMES[(options.scheme || parsed.scheme || \"\").toLowerCase()];\n        // check if scheme can't handle IRIs\n        if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {\n            // if host component is a domain name\n            if (parsed.host && (options.domainHost || schemeHandler && schemeHandler.domainHost) && isIP === false && nonSimpleDomain(parsed.host)) {\n                // convert Unicode IDN -> ASCII IDN\n                try {\n                    parsed.host = URL.domainToASCII(parsed.host.toLowerCase());\n                } catch (e) {\n                    parsed.error = parsed.error || \"Host's domain name can not be converted to ASCII: \" + e;\n                }\n            }\n        // convert IRI -> URI\n        }\n        if (!schemeHandler || schemeHandler && !schemeHandler.skipNormalize) {\n            if (gotEncoding && parsed.scheme !== undefined) {\n                parsed.scheme = unescape(parsed.scheme);\n            }\n            if (gotEncoding && parsed.host !== undefined) {\n                parsed.host = unescape(parsed.host);\n            }\n            if (parsed.path) {\n                parsed.path = escape(unescape(parsed.path));\n            }\n            if (parsed.fragment) {\n                parsed.fragment = encodeURI(decodeURIComponent(parsed.fragment));\n            }\n        }\n        // perform scheme specific parsing\n        if (schemeHandler && schemeHandler.parse) {\n            schemeHandler.parse(parsed, options);\n        }\n    } else {\n        parsed.error = parsed.error || \"URI can not be parsed.\";\n    }\n    return parsed;\n}\nconst fastUri = {\n    SCHEMES,\n    normalize,\n    resolve,\n    resolveComponents,\n    equal,\n    serialize,\n    parse\n};\nmodule.exports = fastUri;\nmodule.exports[\"default\"] = fastUri;\nmodule.exports.fastUri = fastUri;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fast-uri/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fast-uri/lib/schemes.js":
/*!**********************************************!*\
  !*** ./node_modules/fast-uri/lib/schemes.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\nconst UUID_REG = /^[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}$/iu;\nconst URN_REG = /([\\da-z][\\d\\-a-z]{0,31}):((?:[\\w!$'()*+,\\-.:;=@]|%[\\da-f]{2})+)/iu;\nfunction isSecure(wsComponents) {\n    return typeof wsComponents.secure === \"boolean\" ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === \"wss\";\n}\nfunction httpParse(components) {\n    if (!components.host) {\n        components.error = components.error || \"HTTP URIs must have a host.\";\n    }\n    return components;\n}\nfunction httpSerialize(components) {\n    const secure = String(components.scheme).toLowerCase() === \"https\";\n    // normalize the default port\n    if (components.port === (secure ? 443 : 80) || components.port === \"\") {\n        components.port = undefined;\n    }\n    // normalize the empty path\n    if (!components.path) {\n        components.path = \"/\";\n    }\n    // NOTE: We do not parse query strings for HTTP URIs\n    // as WWW Form Url Encoded query strings are part of the HTML4+ spec,\n    // and not the HTTP spec.\n    return components;\n}\nfunction wsParse(wsComponents) {\n    // indicate if the secure flag is set\n    wsComponents.secure = isSecure(wsComponents);\n    // construct resouce name\n    wsComponents.resourceName = (wsComponents.path || \"/\") + (wsComponents.query ? \"?\" + wsComponents.query : \"\");\n    wsComponents.path = undefined;\n    wsComponents.query = undefined;\n    return wsComponents;\n}\nfunction wsSerialize(wsComponents) {\n    // normalize the default port\n    if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === \"\") {\n        wsComponents.port = undefined;\n    }\n    // ensure scheme matches secure flag\n    if (typeof wsComponents.secure === \"boolean\") {\n        wsComponents.scheme = wsComponents.secure ? \"wss\" : \"ws\";\n        wsComponents.secure = undefined;\n    }\n    // reconstruct path from resource name\n    if (wsComponents.resourceName) {\n        const [path, query] = wsComponents.resourceName.split(\"?\");\n        wsComponents.path = path && path !== \"/\" ? path : undefined;\n        wsComponents.query = query;\n        wsComponents.resourceName = undefined;\n    }\n    // forbid fragment component\n    wsComponents.fragment = undefined;\n    return wsComponents;\n}\nfunction urnParse(urnComponents, options) {\n    if (!urnComponents.path) {\n        urnComponents.error = \"URN can not be parsed\";\n        return urnComponents;\n    }\n    const matches = urnComponents.path.match(URN_REG);\n    if (matches) {\n        const scheme = options.scheme || urnComponents.scheme || \"urn\";\n        urnComponents.nid = matches[1].toLowerCase();\n        urnComponents.nss = matches[2];\n        const urnScheme = `${scheme}:${options.nid || urnComponents.nid}`;\n        const schemeHandler = SCHEMES[urnScheme];\n        urnComponents.path = undefined;\n        if (schemeHandler) {\n            urnComponents = schemeHandler.parse(urnComponents, options);\n        }\n    } else {\n        urnComponents.error = urnComponents.error || \"URN can not be parsed.\";\n    }\n    return urnComponents;\n}\nfunction urnSerialize(urnComponents, options) {\n    const scheme = options.scheme || urnComponents.scheme || \"urn\";\n    const nid = urnComponents.nid.toLowerCase();\n    const urnScheme = `${scheme}:${options.nid || nid}`;\n    const schemeHandler = SCHEMES[urnScheme];\n    if (schemeHandler) {\n        urnComponents = schemeHandler.serialize(urnComponents, options);\n    }\n    const uriComponents = urnComponents;\n    const nss = urnComponents.nss;\n    uriComponents.path = `${nid || options.nid}:${nss}`;\n    options.skipEscape = true;\n    return uriComponents;\n}\nfunction urnuuidParse(urnComponents, options) {\n    const uuidComponents = urnComponents;\n    uuidComponents.uuid = uuidComponents.nss;\n    uuidComponents.nss = undefined;\n    if (!options.tolerant && (!uuidComponents.uuid || !UUID_REG.test(uuidComponents.uuid))) {\n        uuidComponents.error = uuidComponents.error || \"UUID is not valid.\";\n    }\n    return uuidComponents;\n}\nfunction urnuuidSerialize(uuidComponents) {\n    const urnComponents = uuidComponents;\n    // normalize UUID\n    urnComponents.nss = (uuidComponents.uuid || \"\").toLowerCase();\n    return urnComponents;\n}\nconst http = {\n    scheme: \"http\",\n    domainHost: true,\n    parse: httpParse,\n    serialize: httpSerialize\n};\nconst https = {\n    scheme: \"https\",\n    domainHost: http.domainHost,\n    parse: httpParse,\n    serialize: httpSerialize\n};\nconst ws = {\n    scheme: \"ws\",\n    domainHost: true,\n    parse: wsParse,\n    serialize: wsSerialize\n};\nconst wss = {\n    scheme: \"wss\",\n    domainHost: ws.domainHost,\n    parse: ws.parse,\n    serialize: ws.serialize\n};\nconst urn = {\n    scheme: \"urn\",\n    parse: urnParse,\n    serialize: urnSerialize,\n    skipNormalize: true\n};\nconst urnuuid = {\n    scheme: \"urn:uuid\",\n    parse: urnuuidParse,\n    serialize: urnuuidSerialize,\n    skipNormalize: true\n};\nconst SCHEMES = {\n    http,\n    https,\n    ws,\n    wss,\n    urn,\n    \"urn:uuid\": urnuuid\n};\nmodule.exports = SCHEMES;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fast-uri/lib/schemes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fast-uri/lib/scopedChars.js":
/*!**************************************************!*\
  !*** ./node_modules/fast-uri/lib/scopedChars.js ***!
  \**************************************************/
/***/ ((module) => {

eval("\nconst HEX = {\n    0: 0,\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9,\n    a: 10,\n    A: 10,\n    b: 11,\n    B: 11,\n    c: 12,\n    C: 12,\n    d: 13,\n    D: 13,\n    e: 14,\n    E: 14,\n    f: 15,\n    F: 15\n};\nmodule.exports = {\n    HEX\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmFzdC11cmkvbGliL3Njb3BlZENoYXJzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsTUFBTTtJQUNWLEdBQUc7SUFDSCxHQUFHO0lBQ0gsR0FBRztJQUNILEdBQUc7SUFDSCxHQUFHO0lBQ0gsR0FBRztJQUNILEdBQUc7SUFDSCxHQUFHO0lBQ0gsR0FBRztJQUNILEdBQUc7SUFDSEMsR0FBRztJQUNIQyxHQUFHO0lBQ0hDLEdBQUc7SUFDSEMsR0FBRztJQUNIQyxHQUFHO0lBQ0hDLEdBQUc7SUFDSEMsR0FBRztJQUNIQyxHQUFHO0lBQ0hDLEdBQUc7SUFDSEMsR0FBRztJQUNIQyxHQUFHO0lBQ0hDLEdBQUc7QUFDTDtBQUVBQyxPQUFPQyxPQUFPLEdBQUc7SUFDZmQ7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2hhcmR3YXJlLWRvYy1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL2Zhc3QtdXJpL2xpYi9zY29wZWRDaGFycy5qcz9iNmExIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBIRVggPSB7XG4gIDA6IDAsXG4gIDE6IDEsXG4gIDI6IDIsXG4gIDM6IDMsXG4gIDQ6IDQsXG4gIDU6IDUsXG4gIDY6IDYsXG4gIDc6IDcsXG4gIDg6IDgsXG4gIDk6IDksXG4gIGE6IDEwLFxuICBBOiAxMCxcbiAgYjogMTEsXG4gIEI6IDExLFxuICBjOiAxMixcbiAgQzogMTIsXG4gIGQ6IDEzLFxuICBEOiAxMyxcbiAgZTogMTQsXG4gIEU6IDE0LFxuICBmOiAxNSxcbiAgRjogMTVcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEhFWFxufVxuIl0sIm5hbWVzIjpbIkhFWCIsImEiLCJBIiwiYiIsIkIiLCJjIiwiQyIsImQiLCJEIiwiZSIsIkUiLCJmIiwiRiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fast-uri/lib/scopedChars.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fast-uri/lib/utils.js":
/*!********************************************!*\
  !*** ./node_modules/fast-uri/lib/utils.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { HEX } = __webpack_require__(/*! ./scopedChars */ \"(rsc)/./node_modules/fast-uri/lib/scopedChars.js\");\nconst IPV4_REG = /^(?:(?:25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]\\d|\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]\\d|\\d)$/u;\nfunction normalizeIPv4(host) {\n    if (findToken(host, \".\") < 3) {\n        return {\n            host,\n            isIPV4: false\n        };\n    }\n    const matches = host.match(IPV4_REG) || [];\n    const [address] = matches;\n    if (address) {\n        return {\n            host: stripLeadingZeros(address, \".\"),\n            isIPV4: true\n        };\n    } else {\n        return {\n            host,\n            isIPV4: false\n        };\n    }\n}\n/**\n * @param {string[]} input\n * @param {boolean} [keepZero=false]\n * @returns {string|undefined}\n */ function stringArrayToHexStripped(input, keepZero = false) {\n    let acc = \"\";\n    let strip = true;\n    for (const c of input){\n        if (HEX[c] === undefined) return undefined;\n        if (c !== \"0\" && strip === true) strip = false;\n        if (!strip) acc += c;\n    }\n    if (keepZero && acc.length === 0) acc = \"0\";\n    return acc;\n}\nfunction getIPV6(input) {\n    let tokenCount = 0;\n    const output = {\n        error: false,\n        address: \"\",\n        zone: \"\"\n    };\n    const address = [];\n    const buffer = [];\n    let isZone = false;\n    let endipv6Encountered = false;\n    let endIpv6 = false;\n    function consume() {\n        if (buffer.length) {\n            if (isZone === false) {\n                const hex = stringArrayToHexStripped(buffer);\n                if (hex !== undefined) {\n                    address.push(hex);\n                } else {\n                    output.error = true;\n                    return false;\n                }\n            }\n            buffer.length = 0;\n        }\n        return true;\n    }\n    for(let i = 0; i < input.length; i++){\n        const cursor = input[i];\n        if (cursor === \"[\" || cursor === \"]\") {\n            continue;\n        }\n        if (cursor === \":\") {\n            if (endipv6Encountered === true) {\n                endIpv6 = true;\n            }\n            if (!consume()) {\n                break;\n            }\n            tokenCount++;\n            address.push(\":\");\n            if (tokenCount > 7) {\n                // not valid\n                output.error = true;\n                break;\n            }\n            if (i - 1 >= 0 && input[i - 1] === \":\") {\n                endipv6Encountered = true;\n            }\n            continue;\n        } else if (cursor === \"%\") {\n            if (!consume()) {\n                break;\n            }\n            // switch to zone detection\n            isZone = true;\n        } else {\n            buffer.push(cursor);\n            continue;\n        }\n    }\n    if (buffer.length) {\n        if (isZone) {\n            output.zone = buffer.join(\"\");\n        } else if (endIpv6) {\n            address.push(buffer.join(\"\"));\n        } else {\n            address.push(stringArrayToHexStripped(buffer));\n        }\n    }\n    output.address = address.join(\"\");\n    return output;\n}\nfunction normalizeIPv6(host) {\n    if (findToken(host, \":\") < 2) {\n        return {\n            host,\n            isIPV6: false\n        };\n    }\n    const ipv6 = getIPV6(host);\n    if (!ipv6.error) {\n        let newHost = ipv6.address;\n        let escapedHost = ipv6.address;\n        if (ipv6.zone) {\n            newHost += \"%\" + ipv6.zone;\n            escapedHost += \"%25\" + ipv6.zone;\n        }\n        return {\n            host: newHost,\n            escapedHost,\n            isIPV6: true\n        };\n    } else {\n        return {\n            host,\n            isIPV6: false\n        };\n    }\n}\nfunction stripLeadingZeros(str, token) {\n    let out = \"\";\n    let skip = true;\n    const l = str.length;\n    for(let i = 0; i < l; i++){\n        const c = str[i];\n        if (c === \"0\" && skip) {\n            if (i + 1 <= l && str[i + 1] === token || i + 1 === l) {\n                out += c;\n                skip = false;\n            }\n        } else {\n            if (c === token) {\n                skip = true;\n            } else {\n                skip = false;\n            }\n            out += c;\n        }\n    }\n    return out;\n}\nfunction findToken(str, token) {\n    let ind = 0;\n    for(let i = 0; i < str.length; i++){\n        if (str[i] === token) ind++;\n    }\n    return ind;\n}\nconst RDS1 = /^\\.\\.?\\//u;\nconst RDS2 = /^\\/\\.(?:\\/|$)/u;\nconst RDS3 = /^\\/\\.\\.(?:\\/|$)/u;\nconst RDS5 = /^\\/?(?:.|\\n)*?(?=\\/|$)/u;\nfunction removeDotSegments(input) {\n    const output = [];\n    while(input.length){\n        if (input.match(RDS1)) {\n            input = input.replace(RDS1, \"\");\n        } else if (input.match(RDS2)) {\n            input = input.replace(RDS2, \"/\");\n        } else if (input.match(RDS3)) {\n            input = input.replace(RDS3, \"/\");\n            output.pop();\n        } else if (input === \".\" || input === \"..\") {\n            input = \"\";\n        } else {\n            const im = input.match(RDS5);\n            if (im) {\n                const s = im[0];\n                input = input.slice(s.length);\n                output.push(s);\n            } else {\n                throw new Error(\"Unexpected dot segment condition\");\n            }\n        }\n    }\n    return output.join(\"\");\n}\nfunction normalizeComponentEncoding(components, esc) {\n    const func = esc !== true ? escape : unescape;\n    if (components.scheme !== undefined) {\n        components.scheme = func(components.scheme);\n    }\n    if (components.userinfo !== undefined) {\n        components.userinfo = func(components.userinfo);\n    }\n    if (components.host !== undefined) {\n        components.host = func(components.host);\n    }\n    if (components.path !== undefined) {\n        components.path = func(components.path);\n    }\n    if (components.query !== undefined) {\n        components.query = func(components.query);\n    }\n    if (components.fragment !== undefined) {\n        components.fragment = func(components.fragment);\n    }\n    return components;\n}\nfunction recomposeAuthority(components) {\n    const uriTokens = [];\n    if (components.userinfo !== undefined) {\n        uriTokens.push(components.userinfo);\n        uriTokens.push(\"@\");\n    }\n    if (components.host !== undefined) {\n        let host = unescape(components.host);\n        const ipV4res = normalizeIPv4(host);\n        if (ipV4res.isIPV4) {\n            host = ipV4res.host;\n        } else {\n            const ipV6res = normalizeIPv6(ipV4res.host);\n            if (ipV6res.isIPV6 === true) {\n                host = `[${ipV6res.escapedHost}]`;\n            } else {\n                host = components.host;\n            }\n        }\n        uriTokens.push(host);\n    }\n    if (typeof components.port === \"number\" || typeof components.port === \"string\") {\n        uriTokens.push(\":\");\n        uriTokens.push(String(components.port));\n    }\n    return uriTokens.length ? uriTokens.join(\"\") : undefined;\n}\nmodule.exports = {\n    recomposeAuthority,\n    normalizeComponentEncoding,\n    removeDotSegments,\n    normalizeIPv4,\n    normalizeIPv6,\n    stringArrayToHexStripped\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fast-uri/lib/utils.js\n");

/***/ })

};
;