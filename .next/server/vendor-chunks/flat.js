"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/flat";
exports.ids = ["vendor-chunks/flat"];
exports.modules = {

/***/ "(rsc)/./node_modules/flat/index.js":
/*!************************************!*\
  !*** ./node_modules/flat/index.js ***!
  \************************************/
/***/ ((module) => {

eval("\nmodule.exports = flatten;\nflatten.flatten = flatten;\nflatten.unflatten = unflatten;\nfunction isBuffer(obj) {\n    return obj && obj.constructor && typeof obj.constructor.isBuffer === \"function\" && obj.constructor.isBuffer(obj);\n}\nfunction keyIdentity(key) {\n    return key;\n}\nfunction flatten(target, opts) {\n    opts = opts || {};\n    const delimiter = opts.delimiter || \".\";\n    const maxDepth = opts.maxDepth;\n    const transformKey = opts.transformKey || keyIdentity;\n    const output = {};\n    function step(object, prev, currentDepth) {\n        currentDepth = currentDepth || 1;\n        Object.keys(object).forEach(function(key) {\n            const value = object[key];\n            const isarray = opts.safe && Array.isArray(value);\n            const type = Object.prototype.toString.call(value);\n            const isbuffer = isBuffer(value);\n            const isobject = type === \"[object Object]\" || type === \"[object Array]\";\n            const newKey = prev ? prev + delimiter + transformKey(key) : transformKey(key);\n            if (!isarray && !isbuffer && isobject && Object.keys(value).length && (!opts.maxDepth || currentDepth < maxDepth)) {\n                return step(value, newKey, currentDepth + 1);\n            }\n            output[newKey] = value;\n        });\n    }\n    step(target);\n    return output;\n}\nfunction unflatten(target, opts) {\n    opts = opts || {};\n    const delimiter = opts.delimiter || \".\";\n    const overwrite = opts.overwrite || false;\n    const transformKey = opts.transformKey || keyIdentity;\n    const result = {};\n    const isbuffer = isBuffer(target);\n    if (isbuffer || Object.prototype.toString.call(target) !== \"[object Object]\") {\n        return target;\n    }\n    // safely ensure that the key is\n    // an integer.\n    function getkey(key) {\n        const parsedKey = Number(key);\n        return isNaN(parsedKey) || key.indexOf(\".\") !== -1 || opts.object ? key : parsedKey;\n    }\n    function addKeys(keyPrefix, recipient, target) {\n        return Object.keys(target).reduce(function(result, key) {\n            result[keyPrefix + delimiter + key] = target[key];\n            return result;\n        }, recipient);\n    }\n    function isEmpty(val) {\n        const type = Object.prototype.toString.call(val);\n        const isArray = type === \"[object Array]\";\n        const isObject = type === \"[object Object]\";\n        if (!val) {\n            return true;\n        } else if (isArray) {\n            return !val.length;\n        } else if (isObject) {\n            return !Object.keys(val).length;\n        }\n    }\n    target = Object.keys(target).reduce(function(result, key) {\n        const type = Object.prototype.toString.call(target[key]);\n        const isObject = type === \"[object Object]\" || type === \"[object Array]\";\n        if (!isObject || isEmpty(target[key])) {\n            result[key] = target[key];\n            return result;\n        } else {\n            return addKeys(key, result, flatten(target[key], opts));\n        }\n    }, {});\n    Object.keys(target).forEach(function(key) {\n        const split = key.split(delimiter).map(transformKey);\n        let key1 = getkey(split.shift());\n        let key2 = getkey(split[0]);\n        let recipient = result;\n        while(key2 !== undefined){\n            if (key1 === \"__proto__\") {\n                return;\n            }\n            const type = Object.prototype.toString.call(recipient[key1]);\n            const isobject = type === \"[object Object]\" || type === \"[object Array]\";\n            // do not write over falsey, non-undefined values if overwrite is false\n            if (!overwrite && !isobject && typeof recipient[key1] !== \"undefined\") {\n                return;\n            }\n            if (overwrite && !isobject || !overwrite && recipient[key1] == null) {\n                recipient[key1] = typeof key2 === \"number\" && !opts.object ? [] : {};\n            }\n            recipient = recipient[key1];\n            if (split.length > 0) {\n                key1 = getkey(split.shift());\n                key2 = getkey(split[0]);\n            }\n        }\n        // unflatten again for 'messy objects'\n        recipient[key1] = unflatten(target[key], opts);\n    });\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/flat/index.js\n");

/***/ })

};
;