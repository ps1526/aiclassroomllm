"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/highlight.js";
exports.ids = ["vendor-chunks/highlight.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/highlight.js/lib/core.js":
/*!***********************************************!*\
  !*** ./node_modules/highlight.js/lib/core.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/* eslint-disable no-multi-assign */ \nfunction deepFreeze(obj) {\n    if (obj instanceof Map) {\n        obj.clear = obj.delete = obj.set = function() {\n            throw new Error(\"map is read-only\");\n        };\n    } else if (obj instanceof Set) {\n        obj.add = obj.clear = obj.delete = function() {\n            throw new Error(\"set is read-only\");\n        };\n    }\n    // Freeze self\n    Object.freeze(obj);\n    Object.getOwnPropertyNames(obj).forEach((name)=>{\n        const prop = obj[name];\n        const type = typeof prop;\n        // Freeze prop if it is an object or function and also not already frozen\n        if ((type === \"object\" || type === \"function\") && !Object.isFrozen(prop)) {\n            deepFreeze(prop);\n        }\n    });\n    return obj;\n}\n/** @typedef {import('highlight.js').CallbackResponse} CallbackResponse */ /** @typedef {import('highlight.js').CompiledMode} CompiledMode */ /** @implements CallbackResponse */ class Response {\n    /**\n   * @param {CompiledMode} mode\n   */ constructor(mode){\n        // eslint-disable-next-line no-undefined\n        if (mode.data === undefined) mode.data = {};\n        this.data = mode.data;\n        this.isMatchIgnored = false;\n    }\n    ignoreMatch() {\n        this.isMatchIgnored = true;\n    }\n}\n/**\n * @param {string} value\n * @returns {string}\n */ function escapeHTML(value) {\n    return value.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#x27;\");\n}\n/**\n * performs a shallow merge of multiple objects into one\n *\n * @template T\n * @param {T} original\n * @param {Record<string,any>[]} objects\n * @returns {T} a single new object\n */ function inherit$1(original, ...objects) {\n    /** @type Record<string,any> */ const result = Object.create(null);\n    for(const key in original){\n        result[key] = original[key];\n    }\n    objects.forEach(function(obj) {\n        for(const key in obj){\n            result[key] = obj[key];\n        }\n    });\n    return /** @type {T} */ result;\n}\n/**\n * @typedef {object} Renderer\n * @property {(text: string) => void} addText\n * @property {(node: Node) => void} openNode\n * @property {(node: Node) => void} closeNode\n * @property {() => string} value\n */ /** @typedef {{scope?: string, language?: string, sublanguage?: boolean}} Node */ /** @typedef {{walk: (r: Renderer) => void}} Tree */ /** */ const SPAN_CLOSE = \"</span>\";\n/**\n * Determines if a node needs to be wrapped in <span>\n *\n * @param {Node} node */ const emitsWrappingTags = (node)=>{\n    // rarely we can have a sublanguage where language is undefined\n    // TODO: track down why\n    return !!node.scope;\n};\n/**\n *\n * @param {string} name\n * @param {{prefix:string}} options\n */ const scopeToCSSClass = (name, { prefix })=>{\n    // sub-language\n    if (name.startsWith(\"language:\")) {\n        return name.replace(\"language:\", \"language-\");\n    }\n    // tiered scope: comment.line\n    if (name.includes(\".\")) {\n        const pieces = name.split(\".\");\n        return [\n            `${prefix}${pieces.shift()}`,\n            ...pieces.map((x, i)=>`${x}${\"_\".repeat(i + 1)}`)\n        ].join(\" \");\n    }\n    // simple scope\n    return `${prefix}${name}`;\n};\n/** @type {Renderer} */ class HTMLRenderer {\n    /**\n   * Creates a new HTMLRenderer\n   *\n   * @param {Tree} parseTree - the parse tree (must support `walk` API)\n   * @param {{classPrefix: string}} options\n   */ constructor(parseTree, options){\n        this.buffer = \"\";\n        this.classPrefix = options.classPrefix;\n        parseTree.walk(this);\n    }\n    /**\n   * Adds texts to the output stream\n   *\n   * @param {string} text */ addText(text) {\n        this.buffer += escapeHTML(text);\n    }\n    /**\n   * Adds a node open to the output stream (if needed)\n   *\n   * @param {Node} node */ openNode(node) {\n        if (!emitsWrappingTags(node)) return;\n        const className = scopeToCSSClass(node.scope, {\n            prefix: this.classPrefix\n        });\n        this.span(className);\n    }\n    /**\n   * Adds a node close to the output stream (if needed)\n   *\n   * @param {Node} node */ closeNode(node) {\n        if (!emitsWrappingTags(node)) return;\n        this.buffer += SPAN_CLOSE;\n    }\n    /**\n   * returns the accumulated buffer\n  */ value() {\n        return this.buffer;\n    }\n    // helpers\n    /**\n   * Builds a span element\n   *\n   * @param {string} className */ span(className) {\n        this.buffer += `<span class=\"${className}\">`;\n    }\n}\n/** @typedef {{scope?: string, language?: string, children: Node[]} | string} Node */ /** @typedef {{scope?: string, language?: string, children: Node[]} } DataNode */ /** @typedef {import('highlight.js').Emitter} Emitter */ /**  */ /** @returns {DataNode} */ const newNode = (opts = {})=>{\n    /** @type DataNode */ const result = {\n        children: []\n    };\n    Object.assign(result, opts);\n    return result;\n};\nclass TokenTree {\n    constructor(){\n        /** @type DataNode */ this.rootNode = newNode();\n        this.stack = [\n            this.rootNode\n        ];\n    }\n    get top() {\n        return this.stack[this.stack.length - 1];\n    }\n    get root() {\n        return this.rootNode;\n    }\n    /** @param {Node} node */ add(node) {\n        this.top.children.push(node);\n    }\n    /** @param {string} scope */ openNode(scope) {\n        /** @type Node */ const node = newNode({\n            scope\n        });\n        this.add(node);\n        this.stack.push(node);\n    }\n    closeNode() {\n        if (this.stack.length > 1) {\n            return this.stack.pop();\n        }\n        // eslint-disable-next-line no-undefined\n        return undefined;\n    }\n    closeAllNodes() {\n        while(this.closeNode());\n    }\n    toJSON() {\n        return JSON.stringify(this.rootNode, null, 4);\n    }\n    /**\n   * @typedef { import(\"./html_renderer\").Renderer } Renderer\n   * @param {Renderer} builder\n   */ walk(builder) {\n        // this does not\n        return this.constructor._walk(builder, this.rootNode);\n    // this works\n    // return TokenTree._walk(builder, this.rootNode);\n    }\n    /**\n   * @param {Renderer} builder\n   * @param {Node} node\n   */ static _walk(builder, node) {\n        if (typeof node === \"string\") {\n            builder.addText(node);\n        } else if (node.children) {\n            builder.openNode(node);\n            node.children.forEach((child)=>this._walk(builder, child));\n            builder.closeNode(node);\n        }\n        return builder;\n    }\n    /**\n   * @param {Node} node\n   */ static _collapse(node) {\n        if (typeof node === \"string\") return;\n        if (!node.children) return;\n        if (node.children.every((el)=>typeof el === \"string\")) {\n            // node.text = node.children.join(\"\");\n            // delete node.children;\n            node.children = [\n                node.children.join(\"\")\n            ];\n        } else {\n            node.children.forEach((child)=>{\n                TokenTree._collapse(child);\n            });\n        }\n    }\n}\n/**\n  Currently this is all private API, but this is the minimal API necessary\n  that an Emitter must implement to fully support the parser.\n\n  Minimal interface:\n\n  - addText(text)\n  - __addSublanguage(emitter, subLanguageName)\n  - startScope(scope)\n  - endScope()\n  - finalize()\n  - toHTML()\n\n*/ /**\n * @implements {Emitter}\n */ class TokenTreeEmitter extends TokenTree {\n    /**\n   * @param {*} options\n   */ constructor(options){\n        super();\n        this.options = options;\n    }\n    /**\n   * @param {string} text\n   */ addText(text) {\n        if (text === \"\") {\n            return;\n        }\n        this.add(text);\n    }\n    /** @param {string} scope */ startScope(scope) {\n        this.openNode(scope);\n    }\n    endScope() {\n        this.closeNode();\n    }\n    /**\n   * @param {Emitter & {root: DataNode}} emitter\n   * @param {string} name\n   */ __addSublanguage(emitter, name) {\n        /** @type DataNode */ const node = emitter.root;\n        if (name) node.scope = `language:${name}`;\n        this.add(node);\n    }\n    toHTML() {\n        const renderer = new HTMLRenderer(this, this.options);\n        return renderer.value();\n    }\n    finalize() {\n        this.closeAllNodes();\n        return true;\n    }\n}\n/**\n * @param {string} value\n * @returns {RegExp}\n * */ /**\n * @param {RegExp | string } re\n * @returns {string}\n */ function source(re) {\n    if (!re) return null;\n    if (typeof re === \"string\") return re;\n    return re.source;\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */ function lookahead(re) {\n    return concat(\"(?=\", re, \")\");\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */ function anyNumberOfTimes(re) {\n    return concat(\"(?:\", re, \")*\");\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */ function optional(re) {\n    return concat(\"(?:\", re, \")?\");\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */ function concat(...args) {\n    const joined = args.map((x)=>source(x)).join(\"\");\n    return joined;\n}\n/**\n * @param { Array<string | RegExp | Object> } args\n * @returns {object}\n */ function stripOptionsFromArgs(args) {\n    const opts = args[args.length - 1];\n    if (typeof opts === \"object\" && opts.constructor === Object) {\n        args.splice(args.length - 1, 1);\n        return opts;\n    } else {\n        return {};\n    }\n}\n/** @typedef { {capture?: boolean} } RegexEitherOptions */ /**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]} args\n * @returns {string}\n */ function either(...args) {\n    /** @type { object & {capture?: boolean} }  */ const opts = stripOptionsFromArgs(args);\n    const joined = \"(\" + (opts.capture ? \"\" : \"?:\") + args.map((x)=>source(x)).join(\"|\") + \")\";\n    return joined;\n}\n/**\n * @param {RegExp | string} re\n * @returns {number}\n */ function countMatchGroups(re) {\n    return new RegExp(re.toString() + \"|\").exec(\"\").length - 1;\n}\n/**\n * Does lexeme start with a regular expression match at the beginning\n * @param {RegExp} re\n * @param {string} lexeme\n */ function startsWith(re, lexeme) {\n    const match = re && re.exec(lexeme);\n    return match && match.index === 0;\n}\n// BACKREF_RE matches an open parenthesis or backreference. To avoid\n// an incorrect parse, it additionally matches the following:\n// - [...] elements, where the meaning of parentheses and escapes change\n// - other escape sequences, so we do not misparse escape sequences as\n//   interesting elements\n// - non-matching or lookahead parentheses, which do not capture. These\n//   follow the '(' with a '?'.\nconst BACKREF_RE = /\\[(?:[^\\\\\\]]|\\\\.)*\\]|\\(\\??|\\\\([1-9][0-9]*)|\\\\./;\n// **INTERNAL** Not intended for outside usage\n// join logically computes regexps.join(separator), but fixes the\n// backreferences so they continue to match.\n// it also places each individual regular expression into it's own\n// match group, keeping track of the sequencing of those match groups\n// is currently an exercise for the caller. :-)\n/**\n * @param {(string | RegExp)[]} regexps\n * @param {{joinWith: string}} opts\n * @returns {string}\n */ function _rewriteBackreferences(regexps, { joinWith }) {\n    let numCaptures = 0;\n    return regexps.map((regex)=>{\n        numCaptures += 1;\n        const offset = numCaptures;\n        let re = source(regex);\n        let out = \"\";\n        while(re.length > 0){\n            const match = BACKREF_RE.exec(re);\n            if (!match) {\n                out += re;\n                break;\n            }\n            out += re.substring(0, match.index);\n            re = re.substring(match.index + match[0].length);\n            if (match[0][0] === \"\\\\\" && match[1]) {\n                // Adjust the backreference.\n                out += \"\\\\\" + String(Number(match[1]) + offset);\n            } else {\n                out += match[0];\n                if (match[0] === \"(\") {\n                    numCaptures++;\n                }\n            }\n        }\n        return out;\n    }).map((re)=>`(${re})`).join(joinWith);\n}\n/** @typedef {import('highlight.js').Mode} Mode */ /** @typedef {import('highlight.js').ModeCallback} ModeCallback */ // Common regexps\nconst MATCH_NOTHING_RE = /\\b\\B/;\nconst IDENT_RE = \"[a-zA-Z]\\\\w*\";\nconst UNDERSCORE_IDENT_RE = \"[a-zA-Z_]\\\\w*\";\nconst NUMBER_RE = \"\\\\b\\\\d+(\\\\.\\\\d+)?\";\nconst C_NUMBER_RE = \"(-?)(\\\\b0[xX][a-fA-F0-9]+|(\\\\b\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)\"; // 0x..., 0..., decimal, float\nconst BINARY_NUMBER_RE = \"\\\\b(0b[01]+)\"; // 0b...\nconst RE_STARTERS_RE = \"!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~\";\n/**\n* @param { Partial<Mode> & {binary?: string | RegExp} } opts\n*/ const SHEBANG = (opts = {})=>{\n    const beginShebang = /^#![ ]*\\//;\n    if (opts.binary) {\n        opts.begin = concat(beginShebang, /.*\\b/, opts.binary, /\\b.*/);\n    }\n    return inherit$1({\n        scope: \"meta\",\n        begin: beginShebang,\n        end: /$/,\n        relevance: 0,\n        /** @type {ModeCallback} */ \"on:begin\": (m, resp)=>{\n            if (m.index !== 0) resp.ignoreMatch();\n        }\n    }, opts);\n};\n// Common modes\nconst BACKSLASH_ESCAPE = {\n    begin: \"\\\\\\\\[\\\\s\\\\S]\",\n    relevance: 0\n};\nconst APOS_STRING_MODE = {\n    scope: \"string\",\n    begin: \"'\",\n    end: \"'\",\n    illegal: \"\\\\n\",\n    contains: [\n        BACKSLASH_ESCAPE\n    ]\n};\nconst QUOTE_STRING_MODE = {\n    scope: \"string\",\n    begin: '\"',\n    end: '\"',\n    illegal: \"\\\\n\",\n    contains: [\n        BACKSLASH_ESCAPE\n    ]\n};\nconst PHRASAL_WORDS_MODE = {\n    begin: /\\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\\b/\n};\n/**\n * Creates a comment mode\n *\n * @param {string | RegExp} begin\n * @param {string | RegExp} end\n * @param {Mode | {}} [modeOptions]\n * @returns {Partial<Mode>}\n */ const COMMENT = function(begin, end, modeOptions = {}) {\n    const mode = inherit$1({\n        scope: \"comment\",\n        begin,\n        end,\n        contains: []\n    }, modeOptions);\n    mode.contains.push({\n        scope: \"doctag\",\n        // hack to avoid the space from being included. the space is necessary to\n        // match here to prevent the plain text rule below from gobbling up doctags\n        begin: \"[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)\",\n        end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,\n        excludeBegin: true,\n        relevance: 0\n    });\n    const ENGLISH_WORD = either(// list of common 1 and 2 letter words in English\n    \"I\", \"a\", \"is\", \"so\", \"us\", \"to\", \"at\", \"if\", \"in\", \"it\", \"on\", // note: this is not an exhaustive list of contractions, just popular ones\n    /[A-Za-z]+['](d|ve|re|ll|t|s|n)/, /[A-Za-z]+[-][a-z]+/, /[A-Za-z][a-z]{2,}/ // allow capitalized words at beginning of sentences\n    );\n    // looking like plain text, more likely to be a comment\n    mode.contains.push({\n        // TODO: how to include \", (, ) without breaking grammars that use these for\n        // comment delimiters?\n        // begin: /[ ]+([()\"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()\":]?([.][ ]|[ ]|\\))){3}/\n        // ---\n        // this tries to find sequences of 3 english words in a row (without any\n        // \"programming\" type syntax) this gives us a strong signal that we've\n        // TRULY found a comment - vs perhaps scanning with the wrong language.\n        // It's possible to find something that LOOKS like the start of the\n        // comment - but then if there is no readable text - good chance it is a\n        // false match and not a comment.\n        //\n        // for a visual example please see:\n        // https://github.com/highlightjs/highlight.js/issues/2827\n        begin: concat(/[ ]+/, \"(\", ENGLISH_WORD, /[.]?[:]?([.][ ]|[ ])/, \"){3}\") // look for 3 words in a row\n    });\n    return mode;\n};\nconst C_LINE_COMMENT_MODE = COMMENT(\"//\", \"$\");\nconst C_BLOCK_COMMENT_MODE = COMMENT(\"/\\\\*\", \"\\\\*/\");\nconst HASH_COMMENT_MODE = COMMENT(\"#\", \"$\");\nconst NUMBER_MODE = {\n    scope: \"number\",\n    begin: NUMBER_RE,\n    relevance: 0\n};\nconst C_NUMBER_MODE = {\n    scope: \"number\",\n    begin: C_NUMBER_RE,\n    relevance: 0\n};\nconst BINARY_NUMBER_MODE = {\n    scope: \"number\",\n    begin: BINARY_NUMBER_RE,\n    relevance: 0\n};\nconst REGEXP_MODE = {\n    scope: \"regexp\",\n    begin: /\\/(?=[^/\\n]*\\/)/,\n    end: /\\/[gimuy]*/,\n    contains: [\n        BACKSLASH_ESCAPE,\n        {\n            begin: /\\[/,\n            end: /\\]/,\n            relevance: 0,\n            contains: [\n                BACKSLASH_ESCAPE\n            ]\n        }\n    ]\n};\nconst TITLE_MODE = {\n    scope: \"title\",\n    begin: IDENT_RE,\n    relevance: 0\n};\nconst UNDERSCORE_TITLE_MODE = {\n    scope: \"title\",\n    begin: UNDERSCORE_IDENT_RE,\n    relevance: 0\n};\nconst METHOD_GUARD = {\n    // excludes method names from keyword processing\n    begin: \"\\\\.\\\\s*\" + UNDERSCORE_IDENT_RE,\n    relevance: 0\n};\n/**\n * Adds end same as begin mechanics to a mode\n *\n * Your mode must include at least a single () match group as that first match\n * group is what is used for comparison\n * @param {Partial<Mode>} mode\n */ const END_SAME_AS_BEGIN = function(mode) {\n    return Object.assign(mode, {\n        /** @type {ModeCallback} */ \"on:begin\": (m, resp)=>{\n            resp.data._beginMatch = m[1];\n        },\n        /** @type {ModeCallback} */ \"on:end\": (m, resp)=>{\n            if (resp.data._beginMatch !== m[1]) resp.ignoreMatch();\n        }\n    });\n};\nvar MODES = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    APOS_STRING_MODE: APOS_STRING_MODE,\n    BACKSLASH_ESCAPE: BACKSLASH_ESCAPE,\n    BINARY_NUMBER_MODE: BINARY_NUMBER_MODE,\n    BINARY_NUMBER_RE: BINARY_NUMBER_RE,\n    COMMENT: COMMENT,\n    C_BLOCK_COMMENT_MODE: C_BLOCK_COMMENT_MODE,\n    C_LINE_COMMENT_MODE: C_LINE_COMMENT_MODE,\n    C_NUMBER_MODE: C_NUMBER_MODE,\n    C_NUMBER_RE: C_NUMBER_RE,\n    END_SAME_AS_BEGIN: END_SAME_AS_BEGIN,\n    HASH_COMMENT_MODE: HASH_COMMENT_MODE,\n    IDENT_RE: IDENT_RE,\n    MATCH_NOTHING_RE: MATCH_NOTHING_RE,\n    METHOD_GUARD: METHOD_GUARD,\n    NUMBER_MODE: NUMBER_MODE,\n    NUMBER_RE: NUMBER_RE,\n    PHRASAL_WORDS_MODE: PHRASAL_WORDS_MODE,\n    QUOTE_STRING_MODE: QUOTE_STRING_MODE,\n    REGEXP_MODE: REGEXP_MODE,\n    RE_STARTERS_RE: RE_STARTERS_RE,\n    SHEBANG: SHEBANG,\n    TITLE_MODE: TITLE_MODE,\n    UNDERSCORE_IDENT_RE: UNDERSCORE_IDENT_RE,\n    UNDERSCORE_TITLE_MODE: UNDERSCORE_TITLE_MODE\n});\n/**\n@typedef {import('highlight.js').CallbackResponse} CallbackResponse\n@typedef {import('highlight.js').CompilerExt} CompilerExt\n*/ // Grammar extensions / plugins\n// See: https://github.com/highlightjs/highlight.js/issues/2833\n// Grammar extensions allow \"syntactic sugar\" to be added to the grammar modes\n// without requiring any underlying changes to the compiler internals.\n// `compileMatch` being the perfect small example of now allowing a grammar\n// author to write `match` when they desire to match a single expression rather\n// than being forced to use `begin`.  The extension then just moves `match` into\n// `begin` when it runs.  Ie, no features have been added, but we've just made\n// the experience of writing (and reading grammars) a little bit nicer.\n// ------\n// TODO: We need negative look-behind support to do this properly\n/**\n * Skip a match if it has a preceding dot\n *\n * This is used for `beginKeywords` to prevent matching expressions such as\n * `bob.keyword.do()`. The mode compiler automatically wires this up as a\n * special _internal_ 'on:begin' callback for modes with `beginKeywords`\n * @param {RegExpMatchArray} match\n * @param {CallbackResponse} response\n */ function skipIfHasPrecedingDot(match, response) {\n    const before = match.input[match.index - 1];\n    if (before === \".\") {\n        response.ignoreMatch();\n    }\n}\n/**\n *\n * @type {CompilerExt}\n */ function scopeClassName(mode, _parent) {\n    // eslint-disable-next-line no-undefined\n    if (mode.className !== undefined) {\n        mode.scope = mode.className;\n        delete mode.className;\n    }\n}\n/**\n * `beginKeywords` syntactic sugar\n * @type {CompilerExt}\n */ function beginKeywords(mode, parent) {\n    if (!parent) return;\n    if (!mode.beginKeywords) return;\n    // for languages with keywords that include non-word characters checking for\n    // a word boundary is not sufficient, so instead we check for a word boundary\n    // or whitespace - this does no harm in any case since our keyword engine\n    // doesn't allow spaces in keywords anyways and we still check for the boundary\n    // first\n    mode.begin = \"\\\\b(\" + mode.beginKeywords.split(\" \").join(\"|\") + \")(?!\\\\.)(?=\\\\b|\\\\s)\";\n    mode.__beforeBegin = skipIfHasPrecedingDot;\n    mode.keywords = mode.keywords || mode.beginKeywords;\n    delete mode.beginKeywords;\n    // prevents double relevance, the keywords themselves provide\n    // relevance, the mode doesn't need to double it\n    // eslint-disable-next-line no-undefined\n    if (mode.relevance === undefined) mode.relevance = 0;\n}\n/**\n * Allow `illegal` to contain an array of illegal values\n * @type {CompilerExt}\n */ function compileIllegal(mode, _parent) {\n    if (!Array.isArray(mode.illegal)) return;\n    mode.illegal = either(...mode.illegal);\n}\n/**\n * `match` to match a single expression for readability\n * @type {CompilerExt}\n */ function compileMatch(mode, _parent) {\n    if (!mode.match) return;\n    if (mode.begin || mode.end) throw new Error(\"begin & end are not supported with match\");\n    mode.begin = mode.match;\n    delete mode.match;\n}\n/**\n * provides the default 1 relevance to all modes\n * @type {CompilerExt}\n */ function compileRelevance(mode, _parent) {\n    // eslint-disable-next-line no-undefined\n    if (mode.relevance === undefined) mode.relevance = 1;\n}\n// allow beforeMatch to act as a \"qualifier\" for the match\n// the full match begin must be [beforeMatch][begin]\nconst beforeMatchExt = (mode, parent)=>{\n    if (!mode.beforeMatch) return;\n    // starts conflicts with endsParent which we need to make sure the child\n    // rule is not matched multiple times\n    if (mode.starts) throw new Error(\"beforeMatch cannot be used with starts\");\n    const originalMode = Object.assign({}, mode);\n    Object.keys(mode).forEach((key)=>{\n        delete mode[key];\n    });\n    mode.keywords = originalMode.keywords;\n    mode.begin = concat(originalMode.beforeMatch, lookahead(originalMode.begin));\n    mode.starts = {\n        relevance: 0,\n        contains: [\n            Object.assign(originalMode, {\n                endsParent: true\n            })\n        ]\n    };\n    mode.relevance = 0;\n    delete originalMode.beforeMatch;\n};\n// keywords that should have no default relevance value\nconst COMMON_KEYWORDS = [\n    \"of\",\n    \"and\",\n    \"for\",\n    \"in\",\n    \"not\",\n    \"or\",\n    \"if\",\n    \"then\",\n    \"parent\",\n    \"list\",\n    \"value\" // common variable name\n];\nconst DEFAULT_KEYWORD_SCOPE = \"keyword\";\n/**\n * Given raw keywords from a language definition, compile them.\n *\n * @param {string | Record<string,string|string[]> | Array<string>} rawKeywords\n * @param {boolean} caseInsensitive\n */ function compileKeywords(rawKeywords, caseInsensitive, scopeName = DEFAULT_KEYWORD_SCOPE) {\n    /** @type {import(\"highlight.js/private\").KeywordDict} */ const compiledKeywords = Object.create(null);\n    // input can be a string of keywords, an array of keywords, or a object with\n    // named keys representing scopeName (which can then point to a string or array)\n    if (typeof rawKeywords === \"string\") {\n        compileList(scopeName, rawKeywords.split(\" \"));\n    } else if (Array.isArray(rawKeywords)) {\n        compileList(scopeName, rawKeywords);\n    } else {\n        Object.keys(rawKeywords).forEach(function(scopeName) {\n            // collapse all our objects back into the parent object\n            Object.assign(compiledKeywords, compileKeywords(rawKeywords[scopeName], caseInsensitive, scopeName));\n        });\n    }\n    return compiledKeywords;\n    // ---\n    /**\n   * Compiles an individual list of keywords\n   *\n   * Ex: \"for if when while|5\"\n   *\n   * @param {string} scopeName\n   * @param {Array<string>} keywordList\n   */ function compileList(scopeName, keywordList) {\n        if (caseInsensitive) {\n            keywordList = keywordList.map((x)=>x.toLowerCase());\n        }\n        keywordList.forEach(function(keyword) {\n            const pair = keyword.split(\"|\");\n            compiledKeywords[pair[0]] = [\n                scopeName,\n                scoreForKeyword(pair[0], pair[1])\n            ];\n        });\n    }\n}\n/**\n * Returns the proper score for a given keyword\n *\n * Also takes into account comment keywords, which will be scored 0 UNLESS\n * another score has been manually assigned.\n * @param {string} keyword\n * @param {string} [providedScore]\n */ function scoreForKeyword(keyword, providedScore) {\n    // manual scores always win over common keywords\n    // so you can force a score of 1 if you really insist\n    if (providedScore) {\n        return Number(providedScore);\n    }\n    return commonKeyword(keyword) ? 0 : 1;\n}\n/**\n * Determines if a given keyword is common or not\n *\n * @param {string} keyword */ function commonKeyword(keyword) {\n    return COMMON_KEYWORDS.includes(keyword.toLowerCase());\n}\n/*\n\nFor the reasoning behind this please see:\nhttps://github.com/highlightjs/highlight.js/issues/2880#issuecomment-747275419\n\n*/ /**\n * @type {Record<string, boolean>}\n */ const seenDeprecations = {};\n/**\n * @param {string} message\n */ const error = (message)=>{\n    console.error(message);\n};\n/**\n * @param {string} message\n * @param {any} args\n */ const warn = (message, ...args)=>{\n    console.log(`WARN: ${message}`, ...args);\n};\n/**\n * @param {string} version\n * @param {string} message\n */ const deprecated = (version, message)=>{\n    if (seenDeprecations[`${version}/${message}`]) return;\n    console.log(`Deprecated as of ${version}. ${message}`);\n    seenDeprecations[`${version}/${message}`] = true;\n};\n/* eslint-disable no-throw-literal */ /**\n@typedef {import('highlight.js').CompiledMode} CompiledMode\n*/ const MultiClassError = new Error();\n/**\n * Renumbers labeled scope names to account for additional inner match\n * groups that otherwise would break everything.\n *\n * Lets say we 3 match scopes:\n *\n *   { 1 => ..., 2 => ..., 3 => ... }\n *\n * So what we need is a clean match like this:\n *\n *   (a)(b)(c) => [ \"a\", \"b\", \"c\" ]\n *\n * But this falls apart with inner match groups:\n *\n * (a)(((b)))(c) => [\"a\", \"b\", \"b\", \"b\", \"c\" ]\n *\n * Our scopes are now \"out of alignment\" and we're repeating `b` 3 times.\n * What needs to happen is the numbers are remapped:\n *\n *   { 1 => ..., 2 => ..., 5 => ... }\n *\n * We also need to know that the ONLY groups that should be output\n * are 1, 2, and 5.  This function handles this behavior.\n *\n * @param {CompiledMode} mode\n * @param {Array<RegExp | string>} regexes\n * @param {{key: \"beginScope\"|\"endScope\"}} opts\n */ function remapScopeNames(mode, regexes, { key }) {\n    let offset = 0;\n    const scopeNames = mode[key];\n    /** @type Record<number,boolean> */ const emit = {};\n    /** @type Record<number,string> */ const positions = {};\n    for(let i = 1; i <= regexes.length; i++){\n        positions[i + offset] = scopeNames[i];\n        emit[i + offset] = true;\n        offset += countMatchGroups(regexes[i - 1]);\n    }\n    // we use _emit to keep track of which match groups are \"top-level\" to avoid double\n    // output from inside match groups\n    mode[key] = positions;\n    mode[key]._emit = emit;\n    mode[key]._multi = true;\n}\n/**\n * @param {CompiledMode} mode\n */ function beginMultiClass(mode) {\n    if (!Array.isArray(mode.begin)) return;\n    if (mode.skip || mode.excludeBegin || mode.returnBegin) {\n        error(\"skip, excludeBegin, returnBegin not compatible with beginScope: {}\");\n        throw MultiClassError;\n    }\n    if (typeof mode.beginScope !== \"object\" || mode.beginScope === null) {\n        error(\"beginScope must be object\");\n        throw MultiClassError;\n    }\n    remapScopeNames(mode, mode.begin, {\n        key: \"beginScope\"\n    });\n    mode.begin = _rewriteBackreferences(mode.begin, {\n        joinWith: \"\"\n    });\n}\n/**\n * @param {CompiledMode} mode\n */ function endMultiClass(mode) {\n    if (!Array.isArray(mode.end)) return;\n    if (mode.skip || mode.excludeEnd || mode.returnEnd) {\n        error(\"skip, excludeEnd, returnEnd not compatible with endScope: {}\");\n        throw MultiClassError;\n    }\n    if (typeof mode.endScope !== \"object\" || mode.endScope === null) {\n        error(\"endScope must be object\");\n        throw MultiClassError;\n    }\n    remapScopeNames(mode, mode.end, {\n        key: \"endScope\"\n    });\n    mode.end = _rewriteBackreferences(mode.end, {\n        joinWith: \"\"\n    });\n}\n/**\n * this exists only to allow `scope: {}` to be used beside `match:`\n * Otherwise `beginScope` would necessary and that would look weird\n\n  {\n    match: [ /def/, /\\w+/ ]\n    scope: { 1: \"keyword\" , 2: \"title\" }\n  }\n\n * @param {CompiledMode} mode\n */ function scopeSugar(mode) {\n    if (mode.scope && typeof mode.scope === \"object\" && mode.scope !== null) {\n        mode.beginScope = mode.scope;\n        delete mode.scope;\n    }\n}\n/**\n * @param {CompiledMode} mode\n */ function MultiClass(mode) {\n    scopeSugar(mode);\n    if (typeof mode.beginScope === \"string\") {\n        mode.beginScope = {\n            _wrap: mode.beginScope\n        };\n    }\n    if (typeof mode.endScope === \"string\") {\n        mode.endScope = {\n            _wrap: mode.endScope\n        };\n    }\n    beginMultiClass(mode);\n    endMultiClass(mode);\n}\n/**\n@typedef {import('highlight.js').Mode} Mode\n@typedef {import('highlight.js').CompiledMode} CompiledMode\n@typedef {import('highlight.js').Language} Language\n@typedef {import('highlight.js').HLJSPlugin} HLJSPlugin\n@typedef {import('highlight.js').CompiledLanguage} CompiledLanguage\n*/ // compilation\n/**\n * Compiles a language definition result\n *\n * Given the raw result of a language definition (Language), compiles this so\n * that it is ready for highlighting code.\n * @param {Language} language\n * @returns {CompiledLanguage}\n */ function compileLanguage(language) {\n    /**\n   * Builds a regex with the case sensitivity of the current language\n   *\n   * @param {RegExp | string} value\n   * @param {boolean} [global]\n   */ function langRe(value, global) {\n        return new RegExp(source(value), \"m\" + (language.case_insensitive ? \"i\" : \"\") + (language.unicodeRegex ? \"u\" : \"\") + (global ? \"g\" : \"\"));\n    }\n    /**\n    Stores multiple regular expressions and allows you to quickly search for\n    them all in a string simultaneously - returning the first match.  It does\n    this by creating a huge (a|b|c) regex - each individual item wrapped with ()\n    and joined by `|` - using match groups to track position.  When a match is\n    found checking which position in the array has content allows us to figure\n    out which of the original regexes / match groups triggered the match.\n\n    The match object itself (the result of `Regex.exec`) is returned but also\n    enhanced by merging in any meta-data that was registered with the regex.\n    This is how we keep track of which mode matched, and what type of rule\n    (`illegal`, `begin`, end, etc).\n  */ class MultiRegex {\n        constructor(){\n            this.matchIndexes = {};\n            // @ts-ignore\n            this.regexes = [];\n            this.matchAt = 1;\n            this.position = 0;\n        }\n        // @ts-ignore\n        addRule(re, opts) {\n            opts.position = this.position++;\n            // @ts-ignore\n            this.matchIndexes[this.matchAt] = opts;\n            this.regexes.push([\n                opts,\n                re\n            ]);\n            this.matchAt += countMatchGroups(re) + 1;\n        }\n        compile() {\n            if (this.regexes.length === 0) {\n                // avoids the need to check length every time exec is called\n                // @ts-ignore\n                this.exec = ()=>null;\n            }\n            const terminators = this.regexes.map((el)=>el[1]);\n            this.matcherRe = langRe(_rewriteBackreferences(terminators, {\n                joinWith: \"|\"\n            }), true);\n            this.lastIndex = 0;\n        }\n        /** @param {string} s */ exec(s) {\n            this.matcherRe.lastIndex = this.lastIndex;\n            const match = this.matcherRe.exec(s);\n            if (!match) {\n                return null;\n            }\n            // eslint-disable-next-line no-undefined\n            const i = match.findIndex((el, i)=>i > 0 && el !== undefined);\n            // @ts-ignore\n            const matchData = this.matchIndexes[i];\n            // trim off any earlier non-relevant match groups (ie, the other regex\n            // match groups that make up the multi-matcher)\n            match.splice(0, i);\n            return Object.assign(match, matchData);\n        }\n    }\n    /*\n    Created to solve the key deficiently with MultiRegex - there is no way to\n    test for multiple matches at a single location.  Why would we need to do\n    that?  In the future a more dynamic engine will allow certain matches to be\n    ignored.  An example: if we matched say the 3rd regex in a large group but\n    decided to ignore it - we'd need to started testing again at the 4th\n    regex... but MultiRegex itself gives us no real way to do that.\n\n    So what this class creates MultiRegexs on the fly for whatever search\n    position they are needed.\n\n    NOTE: These additional MultiRegex objects are created dynamically.  For most\n    grammars most of the time we will never actually need anything more than the\n    first MultiRegex - so this shouldn't have too much overhead.\n\n    Say this is our search group, and we match regex3, but wish to ignore it.\n\n      regex1 | regex2 | regex3 | regex4 | regex5    ' ie, startAt = 0\n\n    What we need is a new MultiRegex that only includes the remaining\n    possibilities:\n\n      regex4 | regex5                               ' ie, startAt = 3\n\n    This class wraps all that complexity up in a simple API... `startAt` decides\n    where in the array of expressions to start doing the matching. It\n    auto-increments, so if a match is found at position 2, then startAt will be\n    set to 3.  If the end is reached startAt will return to 0.\n\n    MOST of the time the parser will be setting startAt manually to 0.\n  */ class ResumableMultiRegex {\n        constructor(){\n            // @ts-ignore\n            this.rules = [];\n            // @ts-ignore\n            this.multiRegexes = [];\n            this.count = 0;\n            this.lastIndex = 0;\n            this.regexIndex = 0;\n        }\n        // @ts-ignore\n        getMatcher(index) {\n            if (this.multiRegexes[index]) return this.multiRegexes[index];\n            const matcher = new MultiRegex();\n            this.rules.slice(index).forEach(([re, opts])=>matcher.addRule(re, opts));\n            matcher.compile();\n            this.multiRegexes[index] = matcher;\n            return matcher;\n        }\n        resumingScanAtSamePosition() {\n            return this.regexIndex !== 0;\n        }\n        considerAll() {\n            this.regexIndex = 0;\n        }\n        // @ts-ignore\n        addRule(re, opts) {\n            this.rules.push([\n                re,\n                opts\n            ]);\n            if (opts.type === \"begin\") this.count++;\n        }\n        /** @param {string} s */ exec(s) {\n            const m = this.getMatcher(this.regexIndex);\n            m.lastIndex = this.lastIndex;\n            let result = m.exec(s);\n            // The following is because we have no easy way to say \"resume scanning at the\n            // existing position but also skip the current rule ONLY\". What happens is\n            // all prior rules are also skipped which can result in matching the wrong\n            // thing. Example of matching \"booger\":\n            // our matcher is [string, \"booger\", number]\n            //\n            // ....booger....\n            // if \"booger\" is ignored then we'd really need a regex to scan from the\n            // SAME position for only: [string, number] but ignoring \"booger\" (if it\n            // was the first match), a simple resume would scan ahead who knows how\n            // far looking only for \"number\", ignoring potential string matches (or\n            // future \"booger\" matches that might be valid.)\n            // So what we do: We execute two matchers, one resuming at the same\n            // position, but the second full matcher starting at the position after:\n            //     /--- resume first regex match here (for [number])\n            //     |/---- full match here for [string, \"booger\", number]\n            //     vv\n            // ....booger....\n            // Which ever results in a match first is then used. So this 3-4 step\n            // process essentially allows us to say \"match at this position, excluding\n            // a prior rule that was ignored\".\n            //\n            // 1. Match \"booger\" first, ignore. Also proves that [string] does non match.\n            // 2. Resume matching for [number]\n            // 3. Match at index + 1 for [string, \"booger\", number]\n            // 4. If #2 and #3 result in matches, which came first?\n            if (this.resumingScanAtSamePosition()) {\n                if (result && result.index === this.lastIndex) ;\n                else {\n                    const m2 = this.getMatcher(0);\n                    m2.lastIndex = this.lastIndex + 1;\n                    result = m2.exec(s);\n                }\n            }\n            if (result) {\n                this.regexIndex += result.position + 1;\n                if (this.regexIndex === this.count) {\n                    // wrap-around to considering all matches again\n                    this.considerAll();\n                }\n            }\n            return result;\n        }\n    }\n    /**\n   * Given a mode, builds a huge ResumableMultiRegex that can be used to walk\n   * the content and find matches.\n   *\n   * @param {CompiledMode} mode\n   * @returns {ResumableMultiRegex}\n   */ function buildModeRegex(mode) {\n        const mm = new ResumableMultiRegex();\n        mode.contains.forEach((term)=>mm.addRule(term.begin, {\n                rule: term,\n                type: \"begin\"\n            }));\n        if (mode.terminatorEnd) {\n            mm.addRule(mode.terminatorEnd, {\n                type: \"end\"\n            });\n        }\n        if (mode.illegal) {\n            mm.addRule(mode.illegal, {\n                type: \"illegal\"\n            });\n        }\n        return mm;\n    }\n    /** skip vs abort vs ignore\n   *\n   * @skip   - The mode is still entered and exited normally (and contains rules apply),\n   *           but all content is held and added to the parent buffer rather than being\n   *           output when the mode ends.  Mostly used with `sublanguage` to build up\n   *           a single large buffer than can be parsed by sublanguage.\n   *\n   *             - The mode begin ands ends normally.\n   *             - Content matched is added to the parent mode buffer.\n   *             - The parser cursor is moved forward normally.\n   *\n   * @abort  - A hack placeholder until we have ignore.  Aborts the mode (as if it\n   *           never matched) but DOES NOT continue to match subsequent `contains`\n   *           modes.  Abort is bad/suboptimal because it can result in modes\n   *           farther down not getting applied because an earlier rule eats the\n   *           content but then aborts.\n   *\n   *             - The mode does not begin.\n   *             - Content matched by `begin` is added to the mode buffer.\n   *             - The parser cursor is moved forward accordingly.\n   *\n   * @ignore - Ignores the mode (as if it never matched) and continues to match any\n   *           subsequent `contains` modes.  Ignore isn't technically possible with\n   *           the current parser implementation.\n   *\n   *             - The mode does not begin.\n   *             - Content matched by `begin` is ignored.\n   *             - The parser cursor is not moved forward.\n   */ /**\n   * Compiles an individual mode\n   *\n   * This can raise an error if the mode contains certain detectable known logic\n   * issues.\n   * @param {Mode} mode\n   * @param {CompiledMode | null} [parent]\n   * @returns {CompiledMode | never}\n   */ function compileMode(mode, parent) {\n        const cmode = /** @type CompiledMode */ mode;\n        if (mode.isCompiled) return cmode;\n        [\n            scopeClassName,\n            // do this early so compiler extensions generally don't have to worry about\n            // the distinction between match/begin\n            compileMatch,\n            MultiClass,\n            beforeMatchExt\n        ].forEach((ext)=>ext(mode, parent));\n        language.compilerExtensions.forEach((ext)=>ext(mode, parent));\n        // __beforeBegin is considered private API, internal use only\n        mode.__beforeBegin = null;\n        [\n            beginKeywords,\n            // do this later so compiler extensions that come earlier have access to the\n            // raw array if they wanted to perhaps manipulate it, etc.\n            compileIllegal,\n            // default to 1 relevance if not specified\n            compileRelevance\n        ].forEach((ext)=>ext(mode, parent));\n        mode.isCompiled = true;\n        let keywordPattern = null;\n        if (typeof mode.keywords === \"object\" && mode.keywords.$pattern) {\n            // we need a copy because keywords might be compiled multiple times\n            // so we can't go deleting $pattern from the original on the first\n            // pass\n            mode.keywords = Object.assign({}, mode.keywords);\n            keywordPattern = mode.keywords.$pattern;\n            delete mode.keywords.$pattern;\n        }\n        keywordPattern = keywordPattern || /\\w+/;\n        if (mode.keywords) {\n            mode.keywords = compileKeywords(mode.keywords, language.case_insensitive);\n        }\n        cmode.keywordPatternRe = langRe(keywordPattern, true);\n        if (parent) {\n            if (!mode.begin) mode.begin = /\\B|\\b/;\n            cmode.beginRe = langRe(cmode.begin);\n            if (!mode.end && !mode.endsWithParent) mode.end = /\\B|\\b/;\n            if (mode.end) cmode.endRe = langRe(cmode.end);\n            cmode.terminatorEnd = source(cmode.end) || \"\";\n            if (mode.endsWithParent && parent.terminatorEnd) {\n                cmode.terminatorEnd += (mode.end ? \"|\" : \"\") + parent.terminatorEnd;\n            }\n        }\n        if (mode.illegal) cmode.illegalRe = langRe(/** @type {RegExp | string} */ mode.illegal);\n        if (!mode.contains) mode.contains = [];\n        mode.contains = [].concat(...mode.contains.map(function(c) {\n            return expandOrCloneMode(c === \"self\" ? mode : c);\n        }));\n        mode.contains.forEach(function(c) {\n            compileMode(/** @type Mode */ c, cmode);\n        });\n        if (mode.starts) {\n            compileMode(mode.starts, parent);\n        }\n        cmode.matcher = buildModeRegex(cmode);\n        return cmode;\n    }\n    if (!language.compilerExtensions) language.compilerExtensions = [];\n    // self is not valid at the top-level\n    if (language.contains && language.contains.includes(\"self\")) {\n        throw new Error(\"ERR: contains `self` is not supported at the top-level of a language.  See documentation.\");\n    }\n    // we need a null object, which inherit will guarantee\n    language.classNameAliases = inherit$1(language.classNameAliases || {});\n    return compileMode(/** @type Mode */ language);\n}\n/**\n * Determines if a mode has a dependency on it's parent or not\n *\n * If a mode does have a parent dependency then often we need to clone it if\n * it's used in multiple places so that each copy points to the correct parent,\n * where-as modes without a parent can often safely be re-used at the bottom of\n * a mode chain.\n *\n * @param {Mode | null} mode\n * @returns {boolean} - is there a dependency on the parent?\n * */ function dependencyOnParent(mode) {\n    if (!mode) return false;\n    return mode.endsWithParent || dependencyOnParent(mode.starts);\n}\n/**\n * Expands a mode or clones it if necessary\n *\n * This is necessary for modes with parental dependenceis (see notes on\n * `dependencyOnParent`) and for nodes that have `variants` - which must then be\n * exploded into their own individual modes at compile time.\n *\n * @param {Mode} mode\n * @returns {Mode | Mode[]}\n * */ function expandOrCloneMode(mode) {\n    if (mode.variants && !mode.cachedVariants) {\n        mode.cachedVariants = mode.variants.map(function(variant) {\n            return inherit$1(mode, {\n                variants: null\n            }, variant);\n        });\n    }\n    // EXPAND\n    // if we have variants then essentially \"replace\" the mode with the variants\n    // this happens in compileMode, where this function is called from\n    if (mode.cachedVariants) {\n        return mode.cachedVariants;\n    }\n    // CLONE\n    // if we have dependencies on parents then we need a unique\n    // instance of ourselves, so we can be reused with many\n    // different parents without issue\n    if (dependencyOnParent(mode)) {\n        return inherit$1(mode, {\n            starts: mode.starts ? inherit$1(mode.starts) : null\n        });\n    }\n    if (Object.isFrozen(mode)) {\n        return inherit$1(mode);\n    }\n    // no special dependency issues, just return ourselves\n    return mode;\n}\nvar version = \"11.11.1\";\nclass HTMLInjectionError extends Error {\n    constructor(reason, html){\n        super(reason);\n        this.name = \"HTMLInjectionError\";\n        this.html = html;\n    }\n}\n/*\nSyntax highlighting with language autodetection.\nhttps://highlightjs.org/\n*/ /**\n@typedef {import('highlight.js').Mode} Mode\n@typedef {import('highlight.js').CompiledMode} CompiledMode\n@typedef {import('highlight.js').CompiledScope} CompiledScope\n@typedef {import('highlight.js').Language} Language\n@typedef {import('highlight.js').HLJSApi} HLJSApi\n@typedef {import('highlight.js').HLJSPlugin} HLJSPlugin\n@typedef {import('highlight.js').PluginEvent} PluginEvent\n@typedef {import('highlight.js').HLJSOptions} HLJSOptions\n@typedef {import('highlight.js').LanguageFn} LanguageFn\n@typedef {import('highlight.js').HighlightedHTMLElement} HighlightedHTMLElement\n@typedef {import('highlight.js').BeforeHighlightContext} BeforeHighlightContext\n@typedef {import('highlight.js/private').MatchType} MatchType\n@typedef {import('highlight.js/private').KeywordData} KeywordData\n@typedef {import('highlight.js/private').EnhancedMatch} EnhancedMatch\n@typedef {import('highlight.js/private').AnnotatedError} AnnotatedError\n@typedef {import('highlight.js').AutoHighlightResult} AutoHighlightResult\n@typedef {import('highlight.js').HighlightOptions} HighlightOptions\n@typedef {import('highlight.js').HighlightResult} HighlightResult\n*/ const escape = escapeHTML;\nconst inherit = inherit$1;\nconst NO_MATCH = Symbol(\"nomatch\");\nconst MAX_KEYWORD_HITS = 7;\n/**\n * @param {any} hljs - object that is extended (legacy)\n * @returns {HLJSApi}\n */ const HLJS = function(hljs) {\n    // Global internal variables used within the highlight.js library.\n    /** @type {Record<string, Language>} */ const languages = Object.create(null);\n    /** @type {Record<string, string>} */ const aliases = Object.create(null);\n    /** @type {HLJSPlugin[]} */ const plugins = [];\n    // safe/production mode - swallows more errors, tries to keep running\n    // even if a single syntax or parse hits a fatal error\n    let SAFE_MODE = true;\n    const LANGUAGE_NOT_FOUND = \"Could not find the language '{}', did you forget to load/include a language module?\";\n    /** @type {Language} */ const PLAINTEXT_LANGUAGE = {\n        disableAutodetect: true,\n        name: \"Plain text\",\n        contains: []\n    };\n    // Global options used when within external APIs. This is modified when\n    // calling the `hljs.configure` function.\n    /** @type HLJSOptions */ let options = {\n        ignoreUnescapedHTML: false,\n        throwUnescapedHTML: false,\n        noHighlightRe: /^(no-?highlight)$/i,\n        languageDetectRe: /\\blang(?:uage)?-([\\w-]+)\\b/i,\n        classPrefix: \"hljs-\",\n        cssSelector: \"pre code\",\n        languages: null,\n        // beta configuration options, subject to change, welcome to discuss\n        // https://github.com/highlightjs/highlight.js/issues/1086\n        __emitter: TokenTreeEmitter\n    };\n    /* Utility functions */ /**\n   * Tests a language name to see if highlighting should be skipped\n   * @param {string} languageName\n   */ function shouldNotHighlight(languageName) {\n        return options.noHighlightRe.test(languageName);\n    }\n    /**\n   * @param {HighlightedHTMLElement} block - the HTML element to determine language for\n   */ function blockLanguage(block) {\n        let classes = block.className + \" \";\n        classes += block.parentNode ? block.parentNode.className : \"\";\n        // language-* takes precedence over non-prefixed class names.\n        const match = options.languageDetectRe.exec(classes);\n        if (match) {\n            const language = getLanguage(match[1]);\n            if (!language) {\n                warn(LANGUAGE_NOT_FOUND.replace(\"{}\", match[1]));\n                warn(\"Falling back to no-highlight mode for this block.\", block);\n            }\n            return language ? match[1] : \"no-highlight\";\n        }\n        return classes.split(/\\s+/).find((_class)=>shouldNotHighlight(_class) || getLanguage(_class));\n    }\n    /**\n   * Core highlighting function.\n   *\n   * OLD API\n   * highlight(lang, code, ignoreIllegals, continuation)\n   *\n   * NEW API\n   * highlight(code, {lang, ignoreIllegals})\n   *\n   * @param {string} codeOrLanguageName - the language to use for highlighting\n   * @param {string | HighlightOptions} optionsOrCode - the code to highlight\n   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\n   *\n   * @returns {HighlightResult} Result - an object that represents the result\n   * @property {string} language - the language name\n   * @property {number} relevance - the relevance score\n   * @property {string} value - the highlighted HTML code\n   * @property {string} code - the original raw code\n   * @property {CompiledMode} top - top of the current mode stack\n   * @property {boolean} illegal - indicates whether any illegal matches were found\n  */ function highlight(codeOrLanguageName, optionsOrCode, ignoreIllegals) {\n        let code = \"\";\n        let languageName = \"\";\n        if (typeof optionsOrCode === \"object\") {\n            code = codeOrLanguageName;\n            ignoreIllegals = optionsOrCode.ignoreIllegals;\n            languageName = optionsOrCode.language;\n        } else {\n            // old API\n            deprecated(\"10.7.0\", \"highlight(lang, code, ...args) has been deprecated.\");\n            deprecated(\"10.7.0\", \"Please use highlight(code, options) instead.\\nhttps://github.com/highlightjs/highlight.js/issues/2277\");\n            languageName = codeOrLanguageName;\n            code = optionsOrCode;\n        }\n        // https://github.com/highlightjs/highlight.js/issues/3149\n        // eslint-disable-next-line no-undefined\n        if (ignoreIllegals === undefined) {\n            ignoreIllegals = true;\n        }\n        /** @type {BeforeHighlightContext} */ const context = {\n            code,\n            language: languageName\n        };\n        // the plugin can change the desired language or the code to be highlighted\n        // just be changing the object it was passed\n        fire(\"before:highlight\", context);\n        // a before plugin can usurp the result completely by providing it's own\n        // in which case we don't even need to call highlight\n        const result = context.result ? context.result : _highlight(context.language, context.code, ignoreIllegals);\n        result.code = context.code;\n        // the plugin can change anything in result to suite it\n        fire(\"after:highlight\", result);\n        return result;\n    }\n    /**\n   * private highlight that's used internally and does not fire callbacks\n   *\n   * @param {string} languageName - the language to use for highlighting\n   * @param {string} codeToHighlight - the code to highlight\n   * @param {boolean?} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\n   * @param {CompiledMode?} [continuation] - current continuation mode, if any\n   * @returns {HighlightResult} - result of the highlight operation\n  */ function _highlight(languageName, codeToHighlight, ignoreIllegals, continuation) {\n        const keywordHits = Object.create(null);\n        /**\n     * Return keyword data if a match is a keyword\n     * @param {CompiledMode} mode - current mode\n     * @param {string} matchText - the textual match\n     * @returns {KeywordData | false}\n     */ function keywordData(mode, matchText) {\n            return mode.keywords[matchText];\n        }\n        function processKeywords() {\n            if (!top.keywords) {\n                emitter.addText(modeBuffer);\n                return;\n            }\n            let lastIndex = 0;\n            top.keywordPatternRe.lastIndex = 0;\n            let match = top.keywordPatternRe.exec(modeBuffer);\n            let buf = \"\";\n            while(match){\n                buf += modeBuffer.substring(lastIndex, match.index);\n                const word = language.case_insensitive ? match[0].toLowerCase() : match[0];\n                const data = keywordData(top, word);\n                if (data) {\n                    const [kind, keywordRelevance] = data;\n                    emitter.addText(buf);\n                    buf = \"\";\n                    keywordHits[word] = (keywordHits[word] || 0) + 1;\n                    if (keywordHits[word] <= MAX_KEYWORD_HITS) relevance += keywordRelevance;\n                    if (kind.startsWith(\"_\")) {\n                        // _ implied for relevance only, do not highlight\n                        // by applying a class name\n                        buf += match[0];\n                    } else {\n                        const cssClass = language.classNameAliases[kind] || kind;\n                        emitKeyword(match[0], cssClass);\n                    }\n                } else {\n                    buf += match[0];\n                }\n                lastIndex = top.keywordPatternRe.lastIndex;\n                match = top.keywordPatternRe.exec(modeBuffer);\n            }\n            buf += modeBuffer.substring(lastIndex);\n            emitter.addText(buf);\n        }\n        function processSubLanguage() {\n            if (modeBuffer === \"\") return;\n            /** @type HighlightResult */ let result = null;\n            if (typeof top.subLanguage === \"string\") {\n                if (!languages[top.subLanguage]) {\n                    emitter.addText(modeBuffer);\n                    return;\n                }\n                result = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);\n                continuations[top.subLanguage] = /** @type {CompiledMode} */ result._top;\n            } else {\n                result = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);\n            }\n            // Counting embedded language score towards the host language may be disabled\n            // with zeroing the containing mode relevance. Use case in point is Markdown that\n            // allows XML everywhere and makes every XML snippet to have a much larger Markdown\n            // score.\n            if (top.relevance > 0) {\n                relevance += result.relevance;\n            }\n            emitter.__addSublanguage(result._emitter, result.language);\n        }\n        function processBuffer() {\n            if (top.subLanguage != null) {\n                processSubLanguage();\n            } else {\n                processKeywords();\n            }\n            modeBuffer = \"\";\n        }\n        /**\n     * @param {string} text\n     * @param {string} scope\n     */ function emitKeyword(keyword, scope) {\n            if (keyword === \"\") return;\n            emitter.startScope(scope);\n            emitter.addText(keyword);\n            emitter.endScope();\n        }\n        /**\n     * @param {CompiledScope} scope\n     * @param {RegExpMatchArray} match\n     */ function emitMultiClass(scope, match) {\n            let i = 1;\n            const max = match.length - 1;\n            while(i <= max){\n                if (!scope._emit[i]) {\n                    i++;\n                    continue;\n                }\n                const klass = language.classNameAliases[scope[i]] || scope[i];\n                const text = match[i];\n                if (klass) {\n                    emitKeyword(text, klass);\n                } else {\n                    modeBuffer = text;\n                    processKeywords();\n                    modeBuffer = \"\";\n                }\n                i++;\n            }\n        }\n        /**\n     * @param {CompiledMode} mode - new mode to start\n     * @param {RegExpMatchArray} match\n     */ function startNewMode(mode, match) {\n            if (mode.scope && typeof mode.scope === \"string\") {\n                emitter.openNode(language.classNameAliases[mode.scope] || mode.scope);\n            }\n            if (mode.beginScope) {\n                // beginScope just wraps the begin match itself in a scope\n                if (mode.beginScope._wrap) {\n                    emitKeyword(modeBuffer, language.classNameAliases[mode.beginScope._wrap] || mode.beginScope._wrap);\n                    modeBuffer = \"\";\n                } else if (mode.beginScope._multi) {\n                    // at this point modeBuffer should just be the match\n                    emitMultiClass(mode.beginScope, match);\n                    modeBuffer = \"\";\n                }\n            }\n            top = Object.create(mode, {\n                parent: {\n                    value: top\n                }\n            });\n            return top;\n        }\n        /**\n     * @param {CompiledMode } mode - the mode to potentially end\n     * @param {RegExpMatchArray} match - the latest match\n     * @param {string} matchPlusRemainder - match plus remainder of content\n     * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode\n     */ function endOfMode(mode, match, matchPlusRemainder) {\n            let matched = startsWith(mode.endRe, matchPlusRemainder);\n            if (matched) {\n                if (mode[\"on:end\"]) {\n                    const resp = new Response(mode);\n                    mode[\"on:end\"](match, resp);\n                    if (resp.isMatchIgnored) matched = false;\n                }\n                if (matched) {\n                    while(mode.endsParent && mode.parent){\n                        mode = mode.parent;\n                    }\n                    return mode;\n                }\n            }\n            // even if on:end fires an `ignore` it's still possible\n            // that we might trigger the end node because of a parent mode\n            if (mode.endsWithParent) {\n                return endOfMode(mode.parent, match, matchPlusRemainder);\n            }\n        }\n        /**\n     * Handle matching but then ignoring a sequence of text\n     *\n     * @param {string} lexeme - string containing full match text\n     */ function doIgnore(lexeme) {\n            if (top.matcher.regexIndex === 0) {\n                // no more regexes to potentially match here, so we move the cursor forward one\n                // space\n                modeBuffer += lexeme[0];\n                return 1;\n            } else {\n                // no need to move the cursor, we still have additional regexes to try and\n                // match at this very spot\n                resumeScanAtSamePosition = true;\n                return 0;\n            }\n        }\n        /**\n     * Handle the start of a new potential mode match\n     *\n     * @param {EnhancedMatch} match - the current match\n     * @returns {number} how far to advance the parse cursor\n     */ function doBeginMatch(match) {\n            const lexeme = match[0];\n            const newMode = match.rule;\n            const resp = new Response(newMode);\n            // first internal before callbacks, then the public ones\n            const beforeCallbacks = [\n                newMode.__beforeBegin,\n                newMode[\"on:begin\"]\n            ];\n            for (const cb of beforeCallbacks){\n                if (!cb) continue;\n                cb(match, resp);\n                if (resp.isMatchIgnored) return doIgnore(lexeme);\n            }\n            if (newMode.skip) {\n                modeBuffer += lexeme;\n            } else {\n                if (newMode.excludeBegin) {\n                    modeBuffer += lexeme;\n                }\n                processBuffer();\n                if (!newMode.returnBegin && !newMode.excludeBegin) {\n                    modeBuffer = lexeme;\n                }\n            }\n            startNewMode(newMode, match);\n            return newMode.returnBegin ? 0 : lexeme.length;\n        }\n        /**\n     * Handle the potential end of mode\n     *\n     * @param {RegExpMatchArray} match - the current match\n     */ function doEndMatch(match) {\n            const lexeme = match[0];\n            const matchPlusRemainder = codeToHighlight.substring(match.index);\n            const endMode = endOfMode(top, match, matchPlusRemainder);\n            if (!endMode) {\n                return NO_MATCH;\n            }\n            const origin = top;\n            if (top.endScope && top.endScope._wrap) {\n                processBuffer();\n                emitKeyword(lexeme, top.endScope._wrap);\n            } else if (top.endScope && top.endScope._multi) {\n                processBuffer();\n                emitMultiClass(top.endScope, match);\n            } else if (origin.skip) {\n                modeBuffer += lexeme;\n            } else {\n                if (!(origin.returnEnd || origin.excludeEnd)) {\n                    modeBuffer += lexeme;\n                }\n                processBuffer();\n                if (origin.excludeEnd) {\n                    modeBuffer = lexeme;\n                }\n            }\n            do {\n                if (top.scope) {\n                    emitter.closeNode();\n                }\n                if (!top.skip && !top.subLanguage) {\n                    relevance += top.relevance;\n                }\n                top = top.parent;\n            }while (top !== endMode.parent);\n            if (endMode.starts) {\n                startNewMode(endMode.starts, match);\n            }\n            return origin.returnEnd ? 0 : lexeme.length;\n        }\n        function processContinuations() {\n            const list = [];\n            for(let current = top; current !== language; current = current.parent){\n                if (current.scope) {\n                    list.unshift(current.scope);\n                }\n            }\n            list.forEach((item)=>emitter.openNode(item));\n        }\n        /** @type {{type?: MatchType, index?: number, rule?: Mode}}} */ let lastMatch = {};\n        /**\n     *  Process an individual match\n     *\n     * @param {string} textBeforeMatch - text preceding the match (since the last match)\n     * @param {EnhancedMatch} [match] - the match itself\n     */ function processLexeme(textBeforeMatch, match) {\n            const lexeme = match && match[0];\n            // add non-matched text to the current mode buffer\n            modeBuffer += textBeforeMatch;\n            if (lexeme == null) {\n                processBuffer();\n                return 0;\n            }\n            // we've found a 0 width match and we're stuck, so we need to advance\n            // this happens when we have badly behaved rules that have optional matchers to the degree that\n            // sometimes they can end up matching nothing at all\n            // Ref: https://github.com/highlightjs/highlight.js/issues/2140\n            if (lastMatch.type === \"begin\" && match.type === \"end\" && lastMatch.index === match.index && lexeme === \"\") {\n                // spit the \"skipped\" character that our regex choked on back into the output sequence\n                modeBuffer += codeToHighlight.slice(match.index, match.index + 1);\n                if (!SAFE_MODE) {\n                    /** @type {AnnotatedError} */ const err = new Error(`0 width match regex (${languageName})`);\n                    err.languageName = languageName;\n                    err.badRule = lastMatch.rule;\n                    throw err;\n                }\n                return 1;\n            }\n            lastMatch = match;\n            if (match.type === \"begin\") {\n                return doBeginMatch(match);\n            } else if (match.type === \"illegal\" && !ignoreIllegals) {\n                // illegal match, we do not continue processing\n                /** @type {AnnotatedError} */ const err = new Error('Illegal lexeme \"' + lexeme + '\" for mode \"' + (top.scope || \"<unnamed>\") + '\"');\n                err.mode = top;\n                throw err;\n            } else if (match.type === \"end\") {\n                const processed = doEndMatch(match);\n                if (processed !== NO_MATCH) {\n                    return processed;\n                }\n            }\n            // edge case for when illegal matches $ (end of line) which is technically\n            // a 0 width match but not a begin/end match so it's not caught by the\n            // first handler (when ignoreIllegals is true)\n            if (match.type === \"illegal\" && lexeme === \"\") {\n                // advance so we aren't stuck in an infinite loop\n                modeBuffer += \"\\n\";\n                return 1;\n            }\n            // infinite loops are BAD, this is a last ditch catch all. if we have a\n            // decent number of iterations yet our index (cursor position in our\n            // parsing) still 3x behind our index then something is very wrong\n            // so we bail\n            if (iterations > 100000 && iterations > match.index * 3) {\n                const err = new Error(\"potential infinite loop, way more iterations than matches\");\n                throw err;\n            }\n            /*\n      Why might be find ourselves here?  An potential end match that was\n      triggered but could not be completed.  IE, `doEndMatch` returned NO_MATCH.\n      (this could be because a callback requests the match be ignored, etc)\n\n      This causes no real harm other than stopping a few times too many.\n      */ modeBuffer += lexeme;\n            return lexeme.length;\n        }\n        const language = getLanguage(languageName);\n        if (!language) {\n            error(LANGUAGE_NOT_FOUND.replace(\"{}\", languageName));\n            throw new Error('Unknown language: \"' + languageName + '\"');\n        }\n        const md = compileLanguage(language);\n        let result = \"\";\n        /** @type {CompiledMode} */ let top = continuation || md;\n        /** @type Record<string,CompiledMode> */ const continuations = {}; // keep continuations for sub-languages\n        const emitter = new options.__emitter(options);\n        processContinuations();\n        let modeBuffer = \"\";\n        let relevance = 0;\n        let index = 0;\n        let iterations = 0;\n        let resumeScanAtSamePosition = false;\n        try {\n            if (!language.__emitTokens) {\n                top.matcher.considerAll();\n                for(;;){\n                    iterations++;\n                    if (resumeScanAtSamePosition) {\n                        // only regexes not matched previously will now be\n                        // considered for a potential match\n                        resumeScanAtSamePosition = false;\n                    } else {\n                        top.matcher.considerAll();\n                    }\n                    top.matcher.lastIndex = index;\n                    const match = top.matcher.exec(codeToHighlight);\n                    // console.log(\"match\", match[0], match.rule && match.rule.begin)\n                    if (!match) break;\n                    const beforeMatch = codeToHighlight.substring(index, match.index);\n                    const processedCount = processLexeme(beforeMatch, match);\n                    index = match.index + processedCount;\n                }\n                processLexeme(codeToHighlight.substring(index));\n            } else {\n                language.__emitTokens(codeToHighlight, emitter);\n            }\n            emitter.finalize();\n            result = emitter.toHTML();\n            return {\n                language: languageName,\n                value: result,\n                relevance,\n                illegal: false,\n                _emitter: emitter,\n                _top: top\n            };\n        } catch (err) {\n            if (err.message && err.message.includes(\"Illegal\")) {\n                return {\n                    language: languageName,\n                    value: escape(codeToHighlight),\n                    illegal: true,\n                    relevance: 0,\n                    _illegalBy: {\n                        message: err.message,\n                        index,\n                        context: codeToHighlight.slice(index - 100, index + 100),\n                        mode: err.mode,\n                        resultSoFar: result\n                    },\n                    _emitter: emitter\n                };\n            } else if (SAFE_MODE) {\n                return {\n                    language: languageName,\n                    value: escape(codeToHighlight),\n                    illegal: false,\n                    relevance: 0,\n                    errorRaised: err,\n                    _emitter: emitter,\n                    _top: top\n                };\n            } else {\n                throw err;\n            }\n        }\n    }\n    /**\n   * returns a valid highlight result, without actually doing any actual work,\n   * auto highlight starts with this and it's possible for small snippets that\n   * auto-detection may not find a better match\n   * @param {string} code\n   * @returns {HighlightResult}\n   */ function justTextHighlightResult(code) {\n        const result = {\n            value: escape(code),\n            illegal: false,\n            relevance: 0,\n            _top: PLAINTEXT_LANGUAGE,\n            _emitter: new options.__emitter(options)\n        };\n        result._emitter.addText(code);\n        return result;\n    }\n    /**\n  Highlighting with language detection. Accepts a string with the code to\n  highlight. Returns an object with the following properties:\n\n  - language (detected language)\n  - relevance (int)\n  - value (an HTML string with highlighting markup)\n  - secondBest (object with the same structure for second-best heuristically\n    detected language, may be absent)\n\n    @param {string} code\n    @param {Array<string>} [languageSubset]\n    @returns {AutoHighlightResult}\n  */ function highlightAuto(code, languageSubset) {\n        languageSubset = languageSubset || options.languages || Object.keys(languages);\n        const plaintext = justTextHighlightResult(code);\n        const results = languageSubset.filter(getLanguage).filter(autoDetection).map((name)=>_highlight(name, code, false));\n        results.unshift(plaintext); // plaintext is always an option\n        const sorted = results.sort((a, b)=>{\n            // sort base on relevance\n            if (a.relevance !== b.relevance) return b.relevance - a.relevance;\n            // always award the tie to the base language\n            // ie if C++ and Arduino are tied, it's more likely to be C++\n            if (a.language && b.language) {\n                if (getLanguage(a.language).supersetOf === b.language) {\n                    return 1;\n                } else if (getLanguage(b.language).supersetOf === a.language) {\n                    return -1;\n                }\n            }\n            // otherwise say they are equal, which has the effect of sorting on\n            // relevance while preserving the original ordering - which is how ties\n            // have historically been settled, ie the language that comes first always\n            // wins in the case of a tie\n            return 0;\n        });\n        const [best, secondBest] = sorted;\n        /** @type {AutoHighlightResult} */ const result = best;\n        result.secondBest = secondBest;\n        return result;\n    }\n    /**\n   * Builds new class name for block given the language name\n   *\n   * @param {HTMLElement} element\n   * @param {string} [currentLang]\n   * @param {string} [resultLang]\n   */ function updateClassName(element, currentLang, resultLang) {\n        const language = currentLang && aliases[currentLang] || resultLang;\n        element.classList.add(\"hljs\");\n        element.classList.add(`language-${language}`);\n    }\n    /**\n   * Applies highlighting to a DOM node containing code.\n   *\n   * @param {HighlightedHTMLElement} element - the HTML element to highlight\n  */ function highlightElement(element) {\n        /** @type HTMLElement */ let node = null;\n        const language = blockLanguage(element);\n        if (shouldNotHighlight(language)) return;\n        fire(\"before:highlightElement\", {\n            el: element,\n            language\n        });\n        if (element.dataset.highlighted) {\n            console.log(\"Element previously highlighted. To highlight again, first unset `dataset.highlighted`.\", element);\n            return;\n        }\n        // we should be all text, no child nodes (unescaped HTML) - this is possibly\n        // an HTML injection attack - it's likely too late if this is already in\n        // production (the code has likely already done its damage by the time\n        // we're seeing it)... but we yell loudly about this so that hopefully it's\n        // more likely to be caught in development before making it to production\n        if (element.children.length > 0) {\n            if (!options.ignoreUnescapedHTML) {\n                console.warn(\"One of your code blocks includes unescaped HTML. This is a potentially serious security risk.\");\n                console.warn(\"https://github.com/highlightjs/highlight.js/wiki/security\");\n                console.warn(\"The element with unescaped HTML:\");\n                console.warn(element);\n            }\n            if (options.throwUnescapedHTML) {\n                const err = new HTMLInjectionError(\"One of your code blocks includes unescaped HTML.\", element.innerHTML);\n                throw err;\n            }\n        }\n        node = element;\n        const text = node.textContent;\n        const result = language ? highlight(text, {\n            language,\n            ignoreIllegals: true\n        }) : highlightAuto(text);\n        element.innerHTML = result.value;\n        element.dataset.highlighted = \"yes\";\n        updateClassName(element, language, result.language);\n        element.result = {\n            language: result.language,\n            // TODO: remove with version 11.0\n            re: result.relevance,\n            relevance: result.relevance\n        };\n        if (result.secondBest) {\n            element.secondBest = {\n                language: result.secondBest.language,\n                relevance: result.secondBest.relevance\n            };\n        }\n        fire(\"after:highlightElement\", {\n            el: element,\n            result,\n            text\n        });\n    }\n    /**\n   * Updates highlight.js global options with the passed options\n   *\n   * @param {Partial<HLJSOptions>} userOptions\n   */ function configure(userOptions) {\n        options = inherit(options, userOptions);\n    }\n    // TODO: remove v12, deprecated\n    const initHighlighting = ()=>{\n        highlightAll();\n        deprecated(\"10.6.0\", \"initHighlighting() deprecated.  Use highlightAll() now.\");\n    };\n    // TODO: remove v12, deprecated\n    function initHighlightingOnLoad() {\n        highlightAll();\n        deprecated(\"10.6.0\", \"initHighlightingOnLoad() deprecated.  Use highlightAll() now.\");\n    }\n    let wantsHighlight = false;\n    /**\n   * auto-highlights all pre>code elements on the page\n   */ function highlightAll() {\n        function boot() {\n            // if a highlight was requested before DOM was loaded, do now\n            highlightAll();\n        }\n        // if we are called too early in the loading process\n        if (document.readyState === \"loading\") {\n            // make sure the event listener is only added once\n            if (!wantsHighlight) {\n                window.addEventListener(\"DOMContentLoaded\", boot, false);\n            }\n            wantsHighlight = true;\n            return;\n        }\n        const blocks = document.querySelectorAll(options.cssSelector);\n        blocks.forEach(highlightElement);\n    }\n    /**\n   * Register a language grammar module\n   *\n   * @param {string} languageName\n   * @param {LanguageFn} languageDefinition\n   */ function registerLanguage(languageName, languageDefinition) {\n        let lang = null;\n        try {\n            lang = languageDefinition(hljs);\n        } catch (error$1) {\n            error(\"Language definition for '{}' could not be registered.\".replace(\"{}\", languageName));\n            // hard or soft error\n            if (!SAFE_MODE) {\n                throw error$1;\n            } else {\n                error(error$1);\n            }\n            // languages that have serious errors are replaced with essentially a\n            // \"plaintext\" stand-in so that the code blocks will still get normal\n            // css classes applied to them - and one bad language won't break the\n            // entire highlighter\n            lang = PLAINTEXT_LANGUAGE;\n        }\n        // give it a temporary name if it doesn't have one in the meta-data\n        if (!lang.name) lang.name = languageName;\n        languages[languageName] = lang;\n        lang.rawDefinition = languageDefinition.bind(null, hljs);\n        if (lang.aliases) {\n            registerAliases(lang.aliases, {\n                languageName\n            });\n        }\n    }\n    /**\n   * Remove a language grammar module\n   *\n   * @param {string} languageName\n   */ function unregisterLanguage(languageName) {\n        delete languages[languageName];\n        for (const alias of Object.keys(aliases)){\n            if (aliases[alias] === languageName) {\n                delete aliases[alias];\n            }\n        }\n    }\n    /**\n   * @returns {string[]} List of language internal names\n   */ function listLanguages() {\n        return Object.keys(languages);\n    }\n    /**\n   * @param {string} name - name of the language to retrieve\n   * @returns {Language | undefined}\n   */ function getLanguage(name) {\n        name = (name || \"\").toLowerCase();\n        return languages[name] || languages[aliases[name]];\n    }\n    /**\n   *\n   * @param {string|string[]} aliasList - single alias or list of aliases\n   * @param {{languageName: string}} opts\n   */ function registerAliases(aliasList, { languageName }) {\n        if (typeof aliasList === \"string\") {\n            aliasList = [\n                aliasList\n            ];\n        }\n        aliasList.forEach((alias)=>{\n            aliases[alias.toLowerCase()] = languageName;\n        });\n    }\n    /**\n   * Determines if a given language has auto-detection enabled\n   * @param {string} name - name of the language\n   */ function autoDetection(name) {\n        const lang = getLanguage(name);\n        return lang && !lang.disableAutodetect;\n    }\n    /**\n   * Upgrades the old highlightBlock plugins to the new\n   * highlightElement API\n   * @param {HLJSPlugin} plugin\n   */ function upgradePluginAPI(plugin) {\n        // TODO: remove with v12\n        if (plugin[\"before:highlightBlock\"] && !plugin[\"before:highlightElement\"]) {\n            plugin[\"before:highlightElement\"] = (data)=>{\n                plugin[\"before:highlightBlock\"](Object.assign({\n                    block: data.el\n                }, data));\n            };\n        }\n        if (plugin[\"after:highlightBlock\"] && !plugin[\"after:highlightElement\"]) {\n            plugin[\"after:highlightElement\"] = (data)=>{\n                plugin[\"after:highlightBlock\"](Object.assign({\n                    block: data.el\n                }, data));\n            };\n        }\n    }\n    /**\n   * @param {HLJSPlugin} plugin\n   */ function addPlugin(plugin) {\n        upgradePluginAPI(plugin);\n        plugins.push(plugin);\n    }\n    /**\n   * @param {HLJSPlugin} plugin\n   */ function removePlugin(plugin) {\n        const index = plugins.indexOf(plugin);\n        if (index !== -1) {\n            plugins.splice(index, 1);\n        }\n    }\n    /**\n   *\n   * @param {PluginEvent} event\n   * @param {any} args\n   */ function fire(event, args) {\n        const cb = event;\n        plugins.forEach(function(plugin) {\n            if (plugin[cb]) {\n                plugin[cb](args);\n            }\n        });\n    }\n    /**\n   * DEPRECATED\n   * @param {HighlightedHTMLElement} el\n   */ function deprecateHighlightBlock(el) {\n        deprecated(\"10.7.0\", \"highlightBlock will be removed entirely in v12.0\");\n        deprecated(\"10.7.0\", \"Please use highlightElement now.\");\n        return highlightElement(el);\n    }\n    /* Interface definition */ Object.assign(hljs, {\n        highlight,\n        highlightAuto,\n        highlightAll,\n        highlightElement,\n        // TODO: Remove with v12 API\n        highlightBlock: deprecateHighlightBlock,\n        configure,\n        initHighlighting,\n        initHighlightingOnLoad,\n        registerLanguage,\n        unregisterLanguage,\n        listLanguages,\n        getLanguage,\n        registerAliases,\n        autoDetection,\n        inherit,\n        addPlugin,\n        removePlugin\n    });\n    hljs.debugMode = function() {\n        SAFE_MODE = false;\n    };\n    hljs.safeMode = function() {\n        SAFE_MODE = true;\n    };\n    hljs.versionString = version;\n    hljs.regex = {\n        concat: concat,\n        lookahead: lookahead,\n        either: either,\n        optional: optional,\n        anyNumberOfTimes: anyNumberOfTimes\n    };\n    for(const key in MODES){\n        // @ts-ignore\n        if (typeof MODES[key] === \"object\") {\n            // @ts-ignore\n            deepFreeze(MODES[key]);\n        }\n    }\n    // merge all the modes/regexes into our main object\n    Object.assign(hljs, MODES);\n    return hljs;\n};\n// Other names for the variable may break build script\nconst highlight = HLJS({});\n// returns a new instance of the highlighter to be used for extensions\n// check https://github.com/wooorm/lowlight/issues/47\nhighlight.newInstance = ()=>HLJS({});\nmodule.exports = highlight;\nhighlight.HighlightJS = highlight;\nhighlight.default = highlight;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2xpYi9jb3JlLmpzIiwibWFwcGluZ3MiOiJBQUFBLGtDQUFrQztBQUVsQyxTQUFTQSxXQUFXQyxHQUFHO0lBQ3JCLElBQUlBLGVBQWVDLEtBQUs7UUFDdEJELElBQUlFLEtBQUssR0FDUEYsSUFBSUcsTUFBTSxHQUNWSCxJQUFJSSxHQUFHLEdBQ0w7WUFDRSxNQUFNLElBQUlDLE1BQU07UUFDbEI7SUFDTixPQUFPLElBQUlMLGVBQWVNLEtBQUs7UUFDN0JOLElBQUlPLEdBQUcsR0FDTFAsSUFBSUUsS0FBSyxHQUNURixJQUFJRyxNQUFNLEdBQ1I7WUFDRSxNQUFNLElBQUlFLE1BQU07UUFDbEI7SUFDTjtJQUVBLGNBQWM7SUFDZEcsT0FBT0MsTUFBTSxDQUFDVDtJQUVkUSxPQUFPRSxtQkFBbUIsQ0FBQ1YsS0FBS1csT0FBTyxDQUFDLENBQUNDO1FBQ3ZDLE1BQU1DLE9BQU9iLEdBQUcsQ0FBQ1ksS0FBSztRQUN0QixNQUFNRSxPQUFPLE9BQU9EO1FBRXBCLHlFQUF5RTtRQUN6RSxJQUFJLENBQUNDLFNBQVMsWUFBWUEsU0FBUyxVQUFTLEtBQU0sQ0FBQ04sT0FBT08sUUFBUSxDQUFDRixPQUFPO1lBQ3hFZCxXQUFXYztRQUNiO0lBQ0Y7SUFFQSxPQUFPYjtBQUNUO0FBRUEsd0VBQXdFLEdBQ3hFLGdFQUFnRSxHQUNoRSxpQ0FBaUMsR0FFakMsTUFBTWdCO0lBQ0o7O0dBRUMsR0FDREMsWUFBWUMsSUFBSSxDQUFFO1FBQ2hCLHdDQUF3QztRQUN4QyxJQUFJQSxLQUFLQyxJQUFJLEtBQUtDLFdBQVdGLEtBQUtDLElBQUksR0FBRyxDQUFDO1FBRTFDLElBQUksQ0FBQ0EsSUFBSSxHQUFHRCxLQUFLQyxJQUFJO1FBQ3JCLElBQUksQ0FBQ0UsY0FBYyxHQUFHO0lBQ3hCO0lBRUFDLGNBQWM7UUFDWixJQUFJLENBQUNELGNBQWMsR0FBRztJQUN4QjtBQUNGO0FBRUE7OztDQUdDLEdBQ0QsU0FBU0UsV0FBV0Ms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QUVwQ2tKLE9BQU9DLE9BQU8sR0FBRzFIO0FBQ2pCQSxVQUFVMkgsV0FBVyxHQUFHM0g7QUFDeEJBLFVBQVU0SCxPQUFPLEdBQUc1SCIsInNvdXJjZXMiOlsid2VicGFjazovL2hhcmR3YXJlLWRvYy1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL2hpZ2hsaWdodC5qcy9saWIvY29yZS5qcz9kOTU4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLW11bHRpLWFzc2lnbiAqL1xuXG5mdW5jdGlvbiBkZWVwRnJlZXplKG9iaikge1xuICBpZiAob2JqIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgb2JqLmNsZWFyID1cbiAgICAgIG9iai5kZWxldGUgPVxuICAgICAgb2JqLnNldCA9XG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21hcCBpcyByZWFkLW9ubHknKTtcbiAgICAgICAgfTtcbiAgfSBlbHNlIGlmIChvYmogaW5zdGFuY2VvZiBTZXQpIHtcbiAgICBvYmouYWRkID1cbiAgICAgIG9iai5jbGVhciA9XG4gICAgICBvYmouZGVsZXRlID1cbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc2V0IGlzIHJlYWQtb25seScpO1xuICAgICAgICB9O1xuICB9XG5cbiAgLy8gRnJlZXplIHNlbGZcbiAgT2JqZWN0LmZyZWV6ZShvYmopO1xuXG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgIGNvbnN0IHByb3AgPSBvYmpbbmFtZV07XG4gICAgY29uc3QgdHlwZSA9IHR5cGVvZiBwcm9wO1xuXG4gICAgLy8gRnJlZXplIHByb3AgaWYgaXQgaXMgYW4gb2JqZWN0IG9yIGZ1bmN0aW9uIGFuZCBhbHNvIG5vdCBhbHJlYWR5IGZyb3plblxuICAgIGlmICgodHlwZSA9PT0gJ29iamVjdCcgfHwgdHlwZSA9PT0gJ2Z1bmN0aW9uJykgJiYgIU9iamVjdC5pc0Zyb3plbihwcm9wKSkge1xuICAgICAgZGVlcEZyZWV6ZShwcm9wKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBvYmo7XG59XG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCdoaWdobGlnaHQuanMnKS5DYWxsYmFja1Jlc3BvbnNlfSBDYWxsYmFja1Jlc3BvbnNlICovXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnaGlnaGxpZ2h0LmpzJykuQ29tcGlsZWRNb2RlfSBDb21waWxlZE1vZGUgKi9cbi8qKiBAaW1wbGVtZW50cyBDYWxsYmFja1Jlc3BvbnNlICovXG5cbmNsYXNzIFJlc3BvbnNlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7Q29tcGlsZWRNb2RlfSBtb2RlXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihtb2RlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmaW5lZFxuICAgIGlmIChtb2RlLmRhdGEgPT09IHVuZGVmaW5lZCkgbW9kZS5kYXRhID0ge307XG5cbiAgICB0aGlzLmRhdGEgPSBtb2RlLmRhdGE7XG4gICAgdGhpcy5pc01hdGNoSWdub3JlZCA9IGZhbHNlO1xuICB9XG5cbiAgaWdub3JlTWF0Y2goKSB7XG4gICAgdGhpcy5pc01hdGNoSWdub3JlZCA9IHRydWU7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUhUTUwodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlXG4gICAgLnJlcGxhY2UoLyYvZywgJyZhbXA7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JylcbiAgICAucmVwbGFjZSgvJy9nLCAnJiN4Mjc7Jyk7XG59XG5cbi8qKlxuICogcGVyZm9ybXMgYSBzaGFsbG93IG1lcmdlIG9mIG11bHRpcGxlIG9iamVjdHMgaW50byBvbmVcbiAqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtUfSBvcmlnaW5hbFxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLGFueT5bXX0gb2JqZWN0c1xuICogQHJldHVybnMge1R9IGEgc2luZ2xlIG5ldyBvYmplY3RcbiAqL1xuZnVuY3Rpb24gaW5oZXJpdCQxKG9yaWdpbmFsLCAuLi5vYmplY3RzKSB7XG4gIC8qKiBAdHlwZSBSZWNvcmQ8c3RyaW5nLGFueT4gKi9cbiAgY29uc3QgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKGNvbnN0IGtleSBpbiBvcmlnaW5hbCkge1xuICAgIHJlc3VsdFtrZXldID0gb3JpZ2luYWxba2V5XTtcbiAgfVxuICBvYmplY3RzLmZvckVhY2goZnVuY3Rpb24ob2JqKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG9ialtrZXldO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiAvKiogQHR5cGUge1R9ICovIChyZXN1bHQpO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IFJlbmRlcmVyXG4gKiBAcHJvcGVydHkgeyh0ZXh0OiBzdHJpbmcpID0+IHZvaWR9IGFkZFRleHRcbiAqIEBwcm9wZXJ0eSB7KG5vZGU6IE5vZGUpID0+IHZvaWR9IG9wZW5Ob2RlXG4gKiBAcHJvcGVydHkgeyhub2RlOiBOb2RlKSA9PiB2b2lkfSBjbG9zZU5vZGVcbiAqIEBwcm9wZXJ0eSB7KCkgPT4gc3RyaW5nfSB2YWx1ZVxuICovXG5cbi8qKiBAdHlwZWRlZiB7e3Njb3BlPzogc3RyaW5nLCBsYW5ndWFnZT86IHN0cmluZywgc3VibGFuZ3VhZ2U/OiBib29sZWFufX0gTm9kZSAqL1xuLyoqIEB0eXBlZGVmIHt7d2FsazogKHI6IFJlbmRlcmVyKSA9PiB2b2lkfX0gVHJlZSAqL1xuLyoqICovXG5cbmNvbnN0IFNQQU5fQ0xPU0UgPSAnPC9zcGFuPic7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhIG5vZGUgbmVlZHMgdG8gYmUgd3JhcHBlZCBpbiA8c3Bhbj5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgKi9cbmNvbnN0IGVtaXRzV3JhcHBpbmdUYWdzID0gKG5vZGUpID0+IHtcbiAgLy8gcmFyZWx5IHdlIGNhbiBoYXZlIGEgc3VibGFuZ3VhZ2Ugd2hlcmUgbGFuZ3VhZ2UgaXMgdW5kZWZpbmVkXG4gIC8vIFRPRE86IHRyYWNrIGRvd24gd2h5XG4gIHJldHVybiAhIW5vZGUuc2NvcGU7XG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHt7cHJlZml4OnN0cmluZ319IG9wdGlvbnNcbiAqL1xuY29uc3Qgc2NvcGVUb0NTU0NsYXNzID0gKG5hbWUsIHsgcHJlZml4IH0pID0+IHtcbiAgLy8gc3ViLWxhbmd1YWdlXG4gIGlmIChuYW1lLnN0YXJ0c1dpdGgoXCJsYW5ndWFnZTpcIikpIHtcbiAgICByZXR1cm4gbmFtZS5yZXBsYWNlKFwibGFuZ3VhZ2U6XCIsIFwibGFuZ3VhZ2UtXCIpO1xuICB9XG4gIC8vIHRpZXJlZCBzY29wZTogY29tbWVudC5saW5lXG4gIGlmIChuYW1lLmluY2x1ZGVzKFwiLlwiKSkge1xuICAgIGNvbnN0IHBpZWNlcyA9IG5hbWUuc3BsaXQoXCIuXCIpO1xuICAgIHJldHVybiBbXG4gICAgICBgJHtwcmVmaXh9JHtwaWVjZXMuc2hpZnQoKX1gLFxuICAgICAgLi4uKHBpZWNlcy5tYXAoKHgsIGkpID0+IGAke3h9JHtcIl9cIi5yZXBlYXQoaSArIDEpfWApKVxuICAgIF0uam9pbihcIiBcIik7XG4gIH1cbiAgLy8gc2ltcGxlIHNjb3BlXG4gIHJldHVybiBgJHtwcmVmaXh9JHtuYW1lfWA7XG59O1xuXG4vKiogQHR5cGUge1JlbmRlcmVyfSAqL1xuY2xhc3MgSFRNTFJlbmRlcmVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgSFRNTFJlbmRlcmVyXG4gICAqXG4gICAqIEBwYXJhbSB7VHJlZX0gcGFyc2VUcmVlIC0gdGhlIHBhcnNlIHRyZWUgKG11c3Qgc3VwcG9ydCBgd2Fsa2AgQVBJKVxuICAgKiBAcGFyYW0ge3tjbGFzc1ByZWZpeDogc3RyaW5nfX0gb3B0aW9uc1xuICAgKi9cbiAgY29uc3RydWN0b3IocGFyc2VUcmVlLCBvcHRpb25zKSB7XG4gICAgdGhpcy5idWZmZXIgPSBcIlwiO1xuICAgIHRoaXMuY2xhc3NQcmVmaXggPSBvcHRpb25zLmNsYXNzUHJlZml4O1xuICAgIHBhcnNlVHJlZS53YWxrKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgdGV4dHMgdG8gdGhlIG91dHB1dCBzdHJlYW1cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgKi9cbiAgYWRkVGV4dCh0ZXh0KSB7XG4gICAgdGhpcy5idWZmZXIgKz0gZXNjYXBlSFRNTCh0ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgbm9kZSBvcGVuIHRvIHRoZSBvdXRwdXQgc3RyZWFtIChpZiBuZWVkZWQpXG4gICAqXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAqL1xuICBvcGVuTm9kZShub2RlKSB7XG4gICAgaWYgKCFlbWl0c1dyYXBwaW5nVGFncyhub2RlKSkgcmV0dXJuO1xuXG4gICAgY29uc3QgY2xhc3NOYW1lID0gc2NvcGVUb0NTU0NsYXNzKG5vZGUuc2NvcGUsXG4gICAgICB7IHByZWZpeDogdGhpcy5jbGFzc1ByZWZpeCB9KTtcbiAgICB0aGlzLnNwYW4oY2xhc3NOYW1lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgbm9kZSBjbG9zZSB0byB0aGUgb3V0cHV0IHN0cmVhbSAoaWYgbmVlZGVkKVxuICAgKlxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgKi9cbiAgY2xvc2VOb2RlKG5vZGUpIHtcbiAgICBpZiAoIWVtaXRzV3JhcHBpbmdUYWdzKG5vZGUpKSByZXR1cm47XG5cbiAgICB0aGlzLmJ1ZmZlciArPSBTUEFOX0NMT1NFO1xuICB9XG5cbiAgLyoqXG4gICAqIHJldHVybnMgdGhlIGFjY3VtdWxhdGVkIGJ1ZmZlclxuICAqL1xuICB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5idWZmZXI7XG4gIH1cblxuICAvLyBoZWxwZXJzXG5cbiAgLyoqXG4gICAqIEJ1aWxkcyBhIHNwYW4gZWxlbWVudFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lICovXG4gIHNwYW4oY2xhc3NOYW1lKSB7XG4gICAgdGhpcy5idWZmZXIgKz0gYDxzcGFuIGNsYXNzPVwiJHtjbGFzc05hbWV9XCI+YDtcbiAgfVxufVxuXG4vKiogQHR5cGVkZWYge3tzY29wZT86IHN0cmluZywgbGFuZ3VhZ2U/OiBzdHJpbmcsIGNoaWxkcmVuOiBOb2RlW119IHwgc3RyaW5nfSBOb2RlICovXG4vKiogQHR5cGVkZWYge3tzY29wZT86IHN0cmluZywgbGFuZ3VhZ2U/OiBzdHJpbmcsIGNoaWxkcmVuOiBOb2RlW119IH0gRGF0YU5vZGUgKi9cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCdoaWdobGlnaHQuanMnKS5FbWl0dGVyfSBFbWl0dGVyICovXG4vKiogICovXG5cbi8qKiBAcmV0dXJucyB7RGF0YU5vZGV9ICovXG5jb25zdCBuZXdOb2RlID0gKG9wdHMgPSB7fSkgPT4ge1xuICAvKiogQHR5cGUgRGF0YU5vZGUgKi9cbiAgY29uc3QgcmVzdWx0ID0geyBjaGlsZHJlbjogW10gfTtcbiAgT2JqZWN0LmFzc2lnbihyZXN1bHQsIG9wdHMpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuY2xhc3MgVG9rZW5UcmVlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLyoqIEB0eXBlIERhdGFOb2RlICovXG4gICAgdGhpcy5yb290Tm9kZSA9IG5ld05vZGUoKTtcbiAgICB0aGlzLnN0YWNrID0gW3RoaXMucm9vdE5vZGVdO1xuICB9XG5cbiAgZ2V0IHRvcCgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgZ2V0IHJvb3QoKSB7IHJldHVybiB0aGlzLnJvb3ROb2RlOyB9XG5cbiAgLyoqIEBwYXJhbSB7Tm9kZX0gbm9kZSAqL1xuICBhZGQobm9kZSkge1xuICAgIHRoaXMudG9wLmNoaWxkcmVuLnB1c2gobm9kZSk7XG4gIH1cblxuICAvKiogQHBhcmFtIHtzdHJpbmd9IHNjb3BlICovXG4gIG9wZW5Ob2RlKHNjb3BlKSB7XG4gICAgLyoqIEB0eXBlIE5vZGUgKi9cbiAgICBjb25zdCBub2RlID0gbmV3Tm9kZSh7IHNjb3BlIH0pO1xuICAgIHRoaXMuYWRkKG5vZGUpO1xuICAgIHRoaXMuc3RhY2sucHVzaChub2RlKTtcbiAgfVxuXG4gIGNsb3NlTm9kZSgpIHtcbiAgICBpZiAodGhpcy5zdGFjay5sZW5ndGggPiAxKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGFjay5wb3AoKTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmaW5lZFxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBjbG9zZUFsbE5vZGVzKCkge1xuICAgIHdoaWxlICh0aGlzLmNsb3NlTm9kZSgpKTtcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy5yb290Tm9kZSwgbnVsbCwgNCk7XG4gIH1cblxuICAvKipcbiAgICogQHR5cGVkZWYgeyBpbXBvcnQoXCIuL2h0bWxfcmVuZGVyZXJcIikuUmVuZGVyZXIgfSBSZW5kZXJlclxuICAgKiBAcGFyYW0ge1JlbmRlcmVyfSBidWlsZGVyXG4gICAqL1xuICB3YWxrKGJ1aWxkZXIpIHtcbiAgICAvLyB0aGlzIGRvZXMgbm90XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuX3dhbGsoYnVpbGRlciwgdGhpcy5yb290Tm9kZSk7XG4gICAgLy8gdGhpcyB3b3Jrc1xuICAgIC8vIHJldHVybiBUb2tlblRyZWUuX3dhbGsoYnVpbGRlciwgdGhpcy5yb290Tm9kZSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtSZW5kZXJlcn0gYnVpbGRlclxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAgICovXG4gIHN0YXRpYyBfd2FsayhidWlsZGVyLCBub2RlKSB7XG4gICAgaWYgKHR5cGVvZiBub2RlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBidWlsZGVyLmFkZFRleHQobm9kZSk7XG4gICAgfSBlbHNlIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBidWlsZGVyLm9wZW5Ob2RlKG5vZGUpO1xuICAgICAgbm9kZS5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4gdGhpcy5fd2FsayhidWlsZGVyLCBjaGlsZCkpO1xuICAgICAgYnVpbGRlci5jbG9zZU5vZGUobm9kZSk7XG4gICAgfVxuICAgIHJldHVybiBidWlsZGVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICAgKi9cbiAgc3RhdGljIF9jb2xsYXBzZShub2RlKSB7XG4gICAgaWYgKHR5cGVvZiBub2RlID09PSBcInN0cmluZ1wiKSByZXR1cm47XG4gICAgaWYgKCFub2RlLmNoaWxkcmVuKSByZXR1cm47XG5cbiAgICBpZiAobm9kZS5jaGlsZHJlbi5ldmVyeShlbCA9PiB0eXBlb2YgZWwgPT09IFwic3RyaW5nXCIpKSB7XG4gICAgICAvLyBub2RlLnRleHQgPSBub2RlLmNoaWxkcmVuLmpvaW4oXCJcIik7XG4gICAgICAvLyBkZWxldGUgbm9kZS5jaGlsZHJlbjtcbiAgICAgIG5vZGUuY2hpbGRyZW4gPSBbbm9kZS5jaGlsZHJlbi5qb2luKFwiXCIpXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgICBUb2tlblRyZWUuX2NvbGxhcHNlKGNoaWxkKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAgQ3VycmVudGx5IHRoaXMgaXMgYWxsIHByaXZhdGUgQVBJLCBidXQgdGhpcyBpcyB0aGUgbWluaW1hbCBBUEkgbmVjZXNzYXJ5XG4gIHRoYXQgYW4gRW1pdHRlciBtdXN0IGltcGxlbWVudCB0byBmdWxseSBzdXBwb3J0IHRoZSBwYXJzZXIuXG5cbiAgTWluaW1hbCBpbnRlcmZhY2U6XG5cbiAgLSBhZGRUZXh0KHRleHQpXG4gIC0gX19hZGRTdWJsYW5ndWFnZShlbWl0dGVyLCBzdWJMYW5ndWFnZU5hbWUpXG4gIC0gc3RhcnRTY29wZShzY29wZSlcbiAgLSBlbmRTY29wZSgpXG4gIC0gZmluYWxpemUoKVxuICAtIHRvSFRNTCgpXG5cbiovXG5cbi8qKlxuICogQGltcGxlbWVudHMge0VtaXR0ZXJ9XG4gKi9cbmNsYXNzIFRva2VuVHJlZUVtaXR0ZXIgZXh0ZW5kcyBUb2tlblRyZWUge1xuICAvKipcbiAgICogQHBhcmFtIHsqfSBvcHRpb25zXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gICAqL1xuICBhZGRUZXh0KHRleHQpIHtcbiAgICBpZiAodGV4dCA9PT0gXCJcIikgeyByZXR1cm47IH1cblxuICAgIHRoaXMuYWRkKHRleHQpO1xuICB9XG5cbiAgLyoqIEBwYXJhbSB7c3RyaW5nfSBzY29wZSAqL1xuICBzdGFydFNjb3BlKHNjb3BlKSB7XG4gICAgdGhpcy5vcGVuTm9kZShzY29wZSk7XG4gIH1cblxuICBlbmRTY29wZSgpIHtcbiAgICB0aGlzLmNsb3NlTm9kZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RW1pdHRlciAmIHtyb290OiBEYXRhTm9kZX19IGVtaXR0ZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICovXG4gIF9fYWRkU3VibGFuZ3VhZ2UoZW1pdHRlciwgbmFtZSkge1xuICAgIC8qKiBAdHlwZSBEYXRhTm9kZSAqL1xuICAgIGNvbnN0IG5vZGUgPSBlbWl0dGVyLnJvb3Q7XG4gICAgaWYgKG5hbWUpIG5vZGUuc2NvcGUgPSBgbGFuZ3VhZ2U6JHtuYW1lfWA7XG5cbiAgICB0aGlzLmFkZChub2RlKTtcbiAgfVxuXG4gIHRvSFRNTCgpIHtcbiAgICBjb25zdCByZW5kZXJlciA9IG5ldyBIVE1MUmVuZGVyZXIodGhpcywgdGhpcy5vcHRpb25zKTtcbiAgICByZXR1cm4gcmVuZGVyZXIudmFsdWUoKTtcbiAgfVxuXG4gIGZpbmFsaXplKCkge1xuICAgIHRoaXMuY2xvc2VBbGxOb2RlcygpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJucyB7UmVnRXhwfVxuICogKi9cblxuLyoqXG4gKiBAcGFyYW0ge1JlZ0V4cCB8IHN0cmluZyB9IHJlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBzb3VyY2UocmUpIHtcbiAgaWYgKCFyZSkgcmV0dXJuIG51bGw7XG4gIGlmICh0eXBlb2YgcmUgPT09IFwic3RyaW5nXCIpIHJldHVybiByZTtcblxuICByZXR1cm4gcmUuc291cmNlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVnRXhwIHwgc3RyaW5nIH0gcmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGxvb2thaGVhZChyZSkge1xuICByZXR1cm4gY29uY2F0KCcoPz0nLCByZSwgJyknKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlZ0V4cCB8IHN0cmluZyB9IHJlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBhbnlOdW1iZXJPZlRpbWVzKHJlKSB7XG4gIHJldHVybiBjb25jYXQoJyg/OicsIHJlLCAnKSonKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlZ0V4cCB8IHN0cmluZyB9IHJlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBvcHRpb25hbChyZSkge1xuICByZXR1cm4gY29uY2F0KCcoPzonLCByZSwgJyk/Jyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHsuLi4oUmVnRXhwIHwgc3RyaW5nKSB9IGFyZ3NcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGNvbmNhdCguLi5hcmdzKSB7XG4gIGNvbnN0IGpvaW5lZCA9IGFyZ3MubWFwKCh4KSA9PiBzb3VyY2UoeCkpLmpvaW4oXCJcIik7XG4gIHJldHVybiBqb2luZWQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHsgQXJyYXk8c3RyaW5nIHwgUmVnRXhwIHwgT2JqZWN0PiB9IGFyZ3NcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHN0cmlwT3B0aW9uc0Zyb21BcmdzKGFyZ3MpIHtcbiAgY29uc3Qgb3B0cyA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcblxuICBpZiAodHlwZW9mIG9wdHMgPT09ICdvYmplY3QnICYmIG9wdHMuY29uc3RydWN0b3IgPT09IE9iamVjdCkge1xuICAgIGFyZ3Muc3BsaWNlKGFyZ3MubGVuZ3RoIC0gMSwgMSk7XG4gICAgcmV0dXJuIG9wdHM7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59XG5cbi8qKiBAdHlwZWRlZiB7IHtjYXB0dXJlPzogYm9vbGVhbn0gfSBSZWdleEVpdGhlck9wdGlvbnMgKi9cblxuLyoqXG4gKiBBbnkgb2YgdGhlIHBhc3NlZCBleHByZXNzc2lvbnMgbWF5IG1hdGNoXG4gKlxuICogQ3JlYXRlcyBhIGh1Z2UgdGhpcyB8IHRoaXMgfCB0aGF0IHwgdGhhdCBtYXRjaFxuICogQHBhcmFtIHsoUmVnRXhwIHwgc3RyaW5nKVtdIHwgWy4uLihSZWdFeHAgfCBzdHJpbmcpW10sIFJlZ2V4RWl0aGVyT3B0aW9uc119IGFyZ3NcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVpdGhlciguLi5hcmdzKSB7XG4gIC8qKiBAdHlwZSB7IG9iamVjdCAmIHtjYXB0dXJlPzogYm9vbGVhbn0gfSAgKi9cbiAgY29uc3Qgb3B0cyA9IHN0cmlwT3B0aW9uc0Zyb21BcmdzKGFyZ3MpO1xuICBjb25zdCBqb2luZWQgPSAnKCdcbiAgICArIChvcHRzLmNhcHR1cmUgPyBcIlwiIDogXCI/OlwiKVxuICAgICsgYXJncy5tYXAoKHgpID0+IHNvdXJjZSh4KSkuam9pbihcInxcIikgKyBcIilcIjtcbiAgcmV0dXJuIGpvaW5lZDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlZ0V4cCB8IHN0cmluZ30gcmVcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGNvdW50TWF0Y2hHcm91cHMocmUpIHtcbiAgcmV0dXJuIChuZXcgUmVnRXhwKHJlLnRvU3RyaW5nKCkgKyAnfCcpKS5leGVjKCcnKS5sZW5ndGggLSAxO1xufVxuXG4vKipcbiAqIERvZXMgbGV4ZW1lIHN0YXJ0IHdpdGggYSByZWd1bGFyIGV4cHJlc3Npb24gbWF0Y2ggYXQgdGhlIGJlZ2lubmluZ1xuICogQHBhcmFtIHtSZWdFeHB9IHJlXG4gKiBAcGFyYW0ge3N0cmluZ30gbGV4ZW1lXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0c1dpdGgocmUsIGxleGVtZSkge1xuICBjb25zdCBtYXRjaCA9IHJlICYmIHJlLmV4ZWMobGV4ZW1lKTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoLmluZGV4ID09PSAwO1xufVxuXG4vLyBCQUNLUkVGX1JFIG1hdGNoZXMgYW4gb3BlbiBwYXJlbnRoZXNpcyBvciBiYWNrcmVmZXJlbmNlLiBUbyBhdm9pZFxuLy8gYW4gaW5jb3JyZWN0IHBhcnNlLCBpdCBhZGRpdGlvbmFsbHkgbWF0Y2hlcyB0aGUgZm9sbG93aW5nOlxuLy8gLSBbLi4uXSBlbGVtZW50cywgd2hlcmUgdGhlIG1lYW5pbmcgb2YgcGFyZW50aGVzZXMgYW5kIGVzY2FwZXMgY2hhbmdlXG4vLyAtIG90aGVyIGVzY2FwZSBzZXF1ZW5jZXMsIHNvIHdlIGRvIG5vdCBtaXNwYXJzZSBlc2NhcGUgc2VxdWVuY2VzIGFzXG4vLyAgIGludGVyZXN0aW5nIGVsZW1lbnRzXG4vLyAtIG5vbi1tYXRjaGluZyBvciBsb29rYWhlYWQgcGFyZW50aGVzZXMsIHdoaWNoIGRvIG5vdCBjYXB0dXJlLiBUaGVzZVxuLy8gICBmb2xsb3cgdGhlICcoJyB3aXRoIGEgJz8nLlxuY29uc3QgQkFDS1JFRl9SRSA9IC9cXFsoPzpbXlxcXFxcXF1dfFxcXFwuKSpcXF18XFwoXFw/P3xcXFxcKFsxLTldWzAtOV0qKXxcXFxcLi87XG5cbi8vICoqSU5URVJOQUwqKiBOb3QgaW50ZW5kZWQgZm9yIG91dHNpZGUgdXNhZ2Vcbi8vIGpvaW4gbG9naWNhbGx5IGNvbXB1dGVzIHJlZ2V4cHMuam9pbihzZXBhcmF0b3IpLCBidXQgZml4ZXMgdGhlXG4vLyBiYWNrcmVmZXJlbmNlcyBzbyB0aGV5IGNvbnRpbnVlIHRvIG1hdGNoLlxuLy8gaXQgYWxzbyBwbGFjZXMgZWFjaCBpbmRpdmlkdWFsIHJlZ3VsYXIgZXhwcmVzc2lvbiBpbnRvIGl0J3Mgb3duXG4vLyBtYXRjaCBncm91cCwga2VlcGluZyB0cmFjayBvZiB0aGUgc2VxdWVuY2luZyBvZiB0aG9zZSBtYXRjaCBncm91cHNcbi8vIGlzIGN1cnJlbnRseSBhbiBleGVyY2lzZSBmb3IgdGhlIGNhbGxlci4gOi0pXG4vKipcbiAqIEBwYXJhbSB7KHN0cmluZyB8IFJlZ0V4cClbXX0gcmVnZXhwc1xuICogQHBhcmFtIHt7am9pbldpdGg6IHN0cmluZ319IG9wdHNcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIF9yZXdyaXRlQmFja3JlZmVyZW5jZXMocmVnZXhwcywgeyBqb2luV2l0aCB9KSB7XG4gIGxldCBudW1DYXB0dXJlcyA9IDA7XG5cbiAgcmV0dXJuIHJlZ2V4cHMubWFwKChyZWdleCkgPT4ge1xuICAgIG51bUNhcHR1cmVzICs9IDE7XG4gICAgY29uc3Qgb2Zmc2V0ID0gbnVtQ2FwdHVyZXM7XG4gICAgbGV0IHJlID0gc291cmNlKHJlZ2V4KTtcbiAgICBsZXQgb3V0ID0gJyc7XG5cbiAgICB3aGlsZSAocmUubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgbWF0Y2ggPSBCQUNLUkVGX1JFLmV4ZWMocmUpO1xuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICBvdXQgKz0gcmU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgb3V0ICs9IHJlLnN1YnN0cmluZygwLCBtYXRjaC5pbmRleCk7XG4gICAgICByZSA9IHJlLnN1YnN0cmluZyhtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICBpZiAobWF0Y2hbMF1bMF0gPT09ICdcXFxcJyAmJiBtYXRjaFsxXSkge1xuICAgICAgICAvLyBBZGp1c3QgdGhlIGJhY2tyZWZlcmVuY2UuXG4gICAgICAgIG91dCArPSAnXFxcXCcgKyBTdHJpbmcoTnVtYmVyKG1hdGNoWzFdKSArIG9mZnNldCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gbWF0Y2hbMF07XG4gICAgICAgIGlmIChtYXRjaFswXSA9PT0gJygnKSB7XG4gICAgICAgICAgbnVtQ2FwdHVyZXMrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9KS5tYXAocmUgPT4gYCgke3JlfSlgKS5qb2luKGpvaW5XaXRoKTtcbn1cblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJ2hpZ2hsaWdodC5qcycpLk1vZGV9IE1vZGUgKi9cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCdoaWdobGlnaHQuanMnKS5Nb2RlQ2FsbGJhY2t9IE1vZGVDYWxsYmFjayAqL1xuXG4vLyBDb21tb24gcmVnZXhwc1xuY29uc3QgTUFUQ0hfTk9USElOR19SRSA9IC9cXGJcXEIvO1xuY29uc3QgSURFTlRfUkUgPSAnW2EtekEtWl1cXFxcdyonO1xuY29uc3QgVU5ERVJTQ09SRV9JREVOVF9SRSA9ICdbYS16QS1aX11cXFxcdyonO1xuY29uc3QgTlVNQkVSX1JFID0gJ1xcXFxiXFxcXGQrKFxcXFwuXFxcXGQrKT8nO1xuY29uc3QgQ19OVU1CRVJfUkUgPSAnKC0/KShcXFxcYjBbeFhdW2EtZkEtRjAtOV0rfChcXFxcYlxcXFxkKyhcXFxcLlxcXFxkKik/fFxcXFwuXFxcXGQrKShbZUVdWy0rXT9cXFxcZCspPyknOyAvLyAweC4uLiwgMC4uLiwgZGVjaW1hbCwgZmxvYXRcbmNvbnN0IEJJTkFSWV9OVU1CRVJfUkUgPSAnXFxcXGIoMGJbMDFdKyknOyAvLyAwYi4uLlxuY29uc3QgUkVfU1RBUlRFUlNfUkUgPSAnIXwhPXwhPT18JXwlPXwmfCYmfCY9fFxcXFwqfFxcXFwqPXxcXFxcK3xcXFxcKz18LHwtfC09fC89fC98Onw7fDw8fDw8PXw8PXw8fD09PXw9PXw9fD4+Pj18Pj49fD49fD4+Pnw+Pnw+fFxcXFw/fFxcXFxbfFxcXFx7fFxcXFwofFxcXFxefFxcXFxePXxcXFxcfHxcXFxcfD18XFxcXHxcXFxcfHx+JztcblxuLyoqXG4qIEBwYXJhbSB7IFBhcnRpYWw8TW9kZT4gJiB7YmluYXJ5Pzogc3RyaW5nIHwgUmVnRXhwfSB9IG9wdHNcbiovXG5jb25zdCBTSEVCQU5HID0gKG9wdHMgPSB7fSkgPT4ge1xuICBjb25zdCBiZWdpblNoZWJhbmcgPSAvXiMhWyBdKlxcLy87XG4gIGlmIChvcHRzLmJpbmFyeSkge1xuICAgIG9wdHMuYmVnaW4gPSBjb25jYXQoXG4gICAgICBiZWdpblNoZWJhbmcsXG4gICAgICAvLipcXGIvLFxuICAgICAgb3B0cy5iaW5hcnksXG4gICAgICAvXFxiLiovKTtcbiAgfVxuICByZXR1cm4gaW5oZXJpdCQxKHtcbiAgICBzY29wZTogJ21ldGEnLFxuICAgIGJlZ2luOiBiZWdpblNoZWJhbmcsXG4gICAgZW5kOiAvJC8sXG4gICAgcmVsZXZhbmNlOiAwLFxuICAgIC8qKiBAdHlwZSB7TW9kZUNhbGxiYWNrfSAqL1xuICAgIFwib246YmVnaW5cIjogKG0sIHJlc3ApID0+IHtcbiAgICAgIGlmIChtLmluZGV4ICE9PSAwKSByZXNwLmlnbm9yZU1hdGNoKCk7XG4gICAgfVxuICB9LCBvcHRzKTtcbn07XG5cbi8vIENvbW1vbiBtb2Rlc1xuY29uc3QgQkFDS1NMQVNIX0VTQ0FQRSA9IHtcbiAgYmVnaW46ICdcXFxcXFxcXFtcXFxcc1xcXFxTXScsIHJlbGV2YW5jZTogMFxufTtcbmNvbnN0IEFQT1NfU1RSSU5HX01PREUgPSB7XG4gIHNjb3BlOiAnc3RyaW5nJyxcbiAgYmVnaW46ICdcXCcnLFxuICBlbmQ6ICdcXCcnLFxuICBpbGxlZ2FsOiAnXFxcXG4nLFxuICBjb250YWluczogW0JBQ0tTTEFTSF9FU0NBUEVdXG59O1xuY29uc3QgUVVPVEVfU1RSSU5HX01PREUgPSB7XG4gIHNjb3BlOiAnc3RyaW5nJyxcbiAgYmVnaW46ICdcIicsXG4gIGVuZDogJ1wiJyxcbiAgaWxsZWdhbDogJ1xcXFxuJyxcbiAgY29udGFpbnM6IFtCQUNLU0xBU0hfRVNDQVBFXVxufTtcbmNvbnN0IFBIUkFTQUxfV09SRFNfTU9ERSA9IHtcbiAgYmVnaW46IC9cXGIoYXxhbnx0aGV8YXJlfEknbXxpc24ndHxkb24ndHxkb2Vzbid0fHdvbid0fGJ1dHxqdXN0fHNob3VsZHxwcmV0dHl8c2ltcGx5fGVub3VnaHxnb25uYXxnb2luZ3x3dGZ8c298c3VjaHx3aWxsfHlvdXx5b3VyfHRoZXl8bGlrZXxtb3JlKVxcYi9cbn07XG4vKipcbiAqIENyZWF0ZXMgYSBjb21tZW50IG1vZGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZyB8IFJlZ0V4cH0gYmVnaW5cbiAqIEBwYXJhbSB7c3RyaW5nIHwgUmVnRXhwfSBlbmRcbiAqIEBwYXJhbSB7TW9kZSB8IHt9fSBbbW9kZU9wdGlvbnNdXG4gKiBAcmV0dXJucyB7UGFydGlhbDxNb2RlPn1cbiAqL1xuY29uc3QgQ09NTUVOVCA9IGZ1bmN0aW9uKGJlZ2luLCBlbmQsIG1vZGVPcHRpb25zID0ge30pIHtcbiAgY29uc3QgbW9kZSA9IGluaGVyaXQkMShcbiAgICB7XG4gICAgICBzY29wZTogJ2NvbW1lbnQnLFxuICAgICAgYmVnaW4sXG4gICAgICBlbmQsXG4gICAgICBjb250YWluczogW11cbiAgICB9LFxuICAgIG1vZGVPcHRpb25zXG4gICk7XG4gIG1vZGUuY29udGFpbnMucHVzaCh7XG4gICAgc2NvcGU6ICdkb2N0YWcnLFxuICAgIC8vIGhhY2sgdG8gYXZvaWQgdGhlIHNwYWNlIGZyb20gYmVpbmcgaW5jbHVkZWQuIHRoZSBzcGFjZSBpcyBuZWNlc3NhcnkgdG9cbiAgICAvLyBtYXRjaCBoZXJlIHRvIHByZXZlbnQgdGhlIHBsYWluIHRleHQgcnVsZSBiZWxvdyBmcm9tIGdvYmJsaW5nIHVwIGRvY3RhZ3NcbiAgICBiZWdpbjogJ1sgXSooPz0oVE9ET3xGSVhNRXxOT1RFfEJVR3xPUFRJTUlaRXxIQUNLfFhYWCk6KScsXG4gICAgZW5kOiAvKFRPRE98RklYTUV8Tk9URXxCVUd8T1BUSU1JWkV8SEFDS3xYWFgpOi8sXG4gICAgZXhjbHVkZUJlZ2luOiB0cnVlLFxuICAgIHJlbGV2YW5jZTogMFxuICB9KTtcbiAgY29uc3QgRU5HTElTSF9XT1JEID0gZWl0aGVyKFxuICAgIC8vIGxpc3Qgb2YgY29tbW9uIDEgYW5kIDIgbGV0dGVyIHdvcmRzIGluIEVuZ2xpc2hcbiAgICBcIklcIixcbiAgICBcImFcIixcbiAgICBcImlzXCIsXG4gICAgXCJzb1wiLFxuICAgIFwidXNcIixcbiAgICBcInRvXCIsXG4gICAgXCJhdFwiLFxuICAgIFwiaWZcIixcbiAgICBcImluXCIsXG4gICAgXCJpdFwiLFxuICAgIFwib25cIixcbiAgICAvLyBub3RlOiB0aGlzIGlzIG5vdCBhbiBleGhhdXN0aXZlIGxpc3Qgb2YgY29udHJhY3Rpb25zLCBqdXN0IHBvcHVsYXIgb25lc1xuICAgIC9bQS1aYS16XStbJ10oZHx2ZXxyZXxsbHx0fHN8bikvLCAvLyBjb250cmFjdGlvbnMgLSBjYW4ndCB3ZSdkIHRoZXkncmUgbGV0J3MsIGV0Y1xuICAgIC9bQS1aYS16XStbLV1bYS16XSsvLCAvLyBgbm8td2F5YCwgZXRjLlxuICAgIC9bQS1aYS16XVthLXpdezIsfS8gLy8gYWxsb3cgY2FwaXRhbGl6ZWQgd29yZHMgYXQgYmVnaW5uaW5nIG9mIHNlbnRlbmNlc1xuICApO1xuICAvLyBsb29raW5nIGxpa2UgcGxhaW4gdGV4dCwgbW9yZSBsaWtlbHkgdG8gYmUgYSBjb21tZW50XG4gIG1vZGUuY29udGFpbnMucHVzaChcbiAgICB7XG4gICAgICAvLyBUT0RPOiBob3cgdG8gaW5jbHVkZSBcIiwgKCwgKSB3aXRob3V0IGJyZWFraW5nIGdyYW1tYXJzIHRoYXQgdXNlIHRoZXNlIGZvclxuICAgICAgLy8gY29tbWVudCBkZWxpbWl0ZXJzP1xuICAgICAgLy8gYmVnaW46IC9bIF0rKFsoKVwiXT8oW0EtWmEteictXXszLH18aXN8YXxJfHNvfHVzfFt0VF1bb09dfGF0fGlmfGlufGl0fG9uKVsuXT9bKClcIjpdPyhbLl1bIF18WyBdfFxcKSkpezN9L1xuICAgICAgLy8gLS0tXG5cbiAgICAgIC8vIHRoaXMgdHJpZXMgdG8gZmluZCBzZXF1ZW5jZXMgb2YgMyBlbmdsaXNoIHdvcmRzIGluIGEgcm93ICh3aXRob3V0IGFueVxuICAgICAgLy8gXCJwcm9ncmFtbWluZ1wiIHR5cGUgc3ludGF4KSB0aGlzIGdpdmVzIHVzIGEgc3Ryb25nIHNpZ25hbCB0aGF0IHdlJ3ZlXG4gICAgICAvLyBUUlVMWSBmb3VuZCBhIGNvbW1lbnQgLSB2cyBwZXJoYXBzIHNjYW5uaW5nIHdpdGggdGhlIHdyb25nIGxhbmd1YWdlLlxuICAgICAgLy8gSXQncyBwb3NzaWJsZSB0byBmaW5kIHNvbWV0aGluZyB0aGF0IExPT0tTIGxpa2UgdGhlIHN0YXJ0IG9mIHRoZVxuICAgICAgLy8gY29tbWVudCAtIGJ1dCB0aGVuIGlmIHRoZXJlIGlzIG5vIHJlYWRhYmxlIHRleHQgLSBnb29kIGNoYW5jZSBpdCBpcyBhXG4gICAgICAvLyBmYWxzZSBtYXRjaCBhbmQgbm90IGEgY29tbWVudC5cbiAgICAgIC8vXG4gICAgICAvLyBmb3IgYSB2aXN1YWwgZXhhbXBsZSBwbGVhc2Ugc2VlOlxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2hpZ2hsaWdodGpzL2hpZ2hsaWdodC5qcy9pc3N1ZXMvMjgyN1xuXG4gICAgICBiZWdpbjogY29uY2F0KFxuICAgICAgICAvWyBdKy8sIC8vIG5lY2Vzc2FyeSB0byBwcmV2ZW50IHVzIGdvYmJsaW5nIHVwIGRvY3RhZ3MgbGlrZSAvKiBAYXV0aG9yIEJvYiBNY2dpbGwgKi9cbiAgICAgICAgJygnLFxuICAgICAgICBFTkdMSVNIX1dPUkQsXG4gICAgICAgIC9bLl0/WzpdPyhbLl1bIF18WyBdKS8sXG4gICAgICAgICcpezN9JykgLy8gbG9vayBmb3IgMyB3b3JkcyBpbiBhIHJvd1xuICAgIH1cbiAgKTtcbiAgcmV0dXJuIG1vZGU7XG59O1xuY29uc3QgQ19MSU5FX0NPTU1FTlRfTU9ERSA9IENPTU1FTlQoJy8vJywgJyQnKTtcbmNvbnN0IENfQkxPQ0tfQ09NTUVOVF9NT0RFID0gQ09NTUVOVCgnL1xcXFwqJywgJ1xcXFwqLycpO1xuY29uc3QgSEFTSF9DT01NRU5UX01PREUgPSBDT01NRU5UKCcjJywgJyQnKTtcbmNvbnN0IE5VTUJFUl9NT0RFID0ge1xuICBzY29wZTogJ251bWJlcicsXG4gIGJlZ2luOiBOVU1CRVJfUkUsXG4gIHJlbGV2YW5jZTogMFxufTtcbmNvbnN0IENfTlVNQkVSX01PREUgPSB7XG4gIHNjb3BlOiAnbnVtYmVyJyxcbiAgYmVnaW46IENfTlVNQkVSX1JFLFxuICByZWxldmFuY2U6IDBcbn07XG5jb25zdCBCSU5BUllfTlVNQkVSX01PREUgPSB7XG4gIHNjb3BlOiAnbnVtYmVyJyxcbiAgYmVnaW46IEJJTkFSWV9OVU1CRVJfUkUsXG4gIHJlbGV2YW5jZTogMFxufTtcbmNvbnN0IFJFR0VYUF9NT0RFID0ge1xuICBzY29wZTogXCJyZWdleHBcIixcbiAgYmVnaW46IC9cXC8oPz1bXi9cXG5dKlxcLykvLFxuICBlbmQ6IC9cXC9bZ2ltdXldKi8sXG4gIGNvbnRhaW5zOiBbXG4gICAgQkFDS1NMQVNIX0VTQ0FQRSxcbiAgICB7XG4gICAgICBiZWdpbjogL1xcWy8sXG4gICAgICBlbmQ6IC9cXF0vLFxuICAgICAgcmVsZXZhbmNlOiAwLFxuICAgICAgY29udGFpbnM6IFtCQUNLU0xBU0hfRVNDQVBFXVxuICAgIH1cbiAgXVxufTtcbmNvbnN0IFRJVExFX01PREUgPSB7XG4gIHNjb3BlOiAndGl0bGUnLFxuICBiZWdpbjogSURFTlRfUkUsXG4gIHJlbGV2YW5jZTogMFxufTtcbmNvbnN0IFVOREVSU0NPUkVfVElUTEVfTU9ERSA9IHtcbiAgc2NvcGU6ICd0aXRsZScsXG4gIGJlZ2luOiBVTkRFUlNDT1JFX0lERU5UX1JFLFxuICByZWxldmFuY2U6IDBcbn07XG5jb25zdCBNRVRIT0RfR1VBUkQgPSB7XG4gIC8vIGV4Y2x1ZGVzIG1ldGhvZCBuYW1lcyBmcm9tIGtleXdvcmQgcHJvY2Vzc2luZ1xuICBiZWdpbjogJ1xcXFwuXFxcXHMqJyArIFVOREVSU0NPUkVfSURFTlRfUkUsXG4gIHJlbGV2YW5jZTogMFxufTtcblxuLyoqXG4gKiBBZGRzIGVuZCBzYW1lIGFzIGJlZ2luIG1lY2hhbmljcyB0byBhIG1vZGVcbiAqXG4gKiBZb3VyIG1vZGUgbXVzdCBpbmNsdWRlIGF0IGxlYXN0IGEgc2luZ2xlICgpIG1hdGNoIGdyb3VwIGFzIHRoYXQgZmlyc3QgbWF0Y2hcbiAqIGdyb3VwIGlzIHdoYXQgaXMgdXNlZCBmb3IgY29tcGFyaXNvblxuICogQHBhcmFtIHtQYXJ0aWFsPE1vZGU+fSBtb2RlXG4gKi9cbmNvbnN0IEVORF9TQU1FX0FTX0JFR0lOID0gZnVuY3Rpb24obW9kZSkge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihtb2RlLFxuICAgIHtcbiAgICAgIC8qKiBAdHlwZSB7TW9kZUNhbGxiYWNrfSAqL1xuICAgICAgJ29uOmJlZ2luJzogKG0sIHJlc3ApID0+IHsgcmVzcC5kYXRhLl9iZWdpbk1hdGNoID0gbVsxXTsgfSxcbiAgICAgIC8qKiBAdHlwZSB7TW9kZUNhbGxiYWNrfSAqL1xuICAgICAgJ29uOmVuZCc6IChtLCByZXNwKSA9PiB7IGlmIChyZXNwLmRhdGEuX2JlZ2luTWF0Y2ggIT09IG1bMV0pIHJlc3AuaWdub3JlTWF0Y2goKTsgfVxuICAgIH0pO1xufTtcblxudmFyIE1PREVTID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIEFQT1NfU1RSSU5HX01PREU6IEFQT1NfU1RSSU5HX01PREUsXG4gIEJBQ0tTTEFTSF9FU0NBUEU6IEJBQ0tTTEFTSF9FU0NBUEUsXG4gIEJJTkFSWV9OVU1CRVJfTU9ERTogQklOQVJZX05VTUJFUl9NT0RFLFxuICBCSU5BUllfTlVNQkVSX1JFOiBCSU5BUllfTlVNQkVSX1JFLFxuICBDT01NRU5UOiBDT01NRU5ULFxuICBDX0JMT0NLX0NPTU1FTlRfTU9ERTogQ19CTE9DS19DT01NRU5UX01PREUsXG4gIENfTElORV9DT01NRU5UX01PREU6IENfTElORV9DT01NRU5UX01PREUsXG4gIENfTlVNQkVSX01PREU6IENfTlVNQkVSX01PREUsXG4gIENfTlVNQkVSX1JFOiBDX05VTUJFUl9SRSxcbiAgRU5EX1NBTUVfQVNfQkVHSU46IEVORF9TQU1FX0FTX0JFR0lOLFxuICBIQVNIX0NPTU1FTlRfTU9ERTogSEFTSF9DT01NRU5UX01PREUsXG4gIElERU5UX1JFOiBJREVOVF9SRSxcbiAgTUFUQ0hfTk9USElOR19SRTogTUFUQ0hfTk9USElOR19SRSxcbiAgTUVUSE9EX0dVQVJEOiBNRVRIT0RfR1VBUkQsXG4gIE5VTUJFUl9NT0RFOiBOVU1CRVJfTU9ERSxcbiAgTlVNQkVSX1JFOiBOVU1CRVJfUkUsXG4gIFBIUkFTQUxfV09SRFNfTU9ERTogUEhSQVNBTF9XT1JEU19NT0RFLFxuICBRVU9URV9TVFJJTkdfTU9ERTogUVVPVEVfU1RSSU5HX01PREUsXG4gIFJFR0VYUF9NT0RFOiBSRUdFWFBfTU9ERSxcbiAgUkVfU1RBUlRFUlNfUkU6IFJFX1NUQVJURVJTX1JFLFxuICBTSEVCQU5HOiBTSEVCQU5HLFxuICBUSVRMRV9NT0RFOiBUSVRMRV9NT0RFLFxuICBVTkRFUlNDT1JFX0lERU5UX1JFOiBVTkRFUlNDT1JFX0lERU5UX1JFLFxuICBVTkRFUlNDT1JFX1RJVExFX01PREU6IFVOREVSU0NPUkVfVElUTEVfTU9ERVxufSk7XG5cbi8qKlxuQHR5cGVkZWYge2ltcG9ydCgnaGlnaGxpZ2h0LmpzJykuQ2FsbGJhY2tSZXNwb25zZX0gQ2FsbGJhY2tSZXNwb25zZVxuQHR5cGVkZWYge2ltcG9ydCgnaGlnaGxpZ2h0LmpzJykuQ29tcGlsZXJFeHR9IENvbXBpbGVyRXh0XG4qL1xuXG4vLyBHcmFtbWFyIGV4dGVuc2lvbnMgLyBwbHVnaW5zXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9oaWdobGlnaHRqcy9oaWdobGlnaHQuanMvaXNzdWVzLzI4MzNcblxuLy8gR3JhbW1hciBleHRlbnNpb25zIGFsbG93IFwic3ludGFjdGljIHN1Z2FyXCIgdG8gYmUgYWRkZWQgdG8gdGhlIGdyYW1tYXIgbW9kZXNcbi8vIHdpdGhvdXQgcmVxdWlyaW5nIGFueSB1bmRlcmx5aW5nIGNoYW5nZXMgdG8gdGhlIGNvbXBpbGVyIGludGVybmFscy5cblxuLy8gYGNvbXBpbGVNYXRjaGAgYmVpbmcgdGhlIHBlcmZlY3Qgc21hbGwgZXhhbXBsZSBvZiBub3cgYWxsb3dpbmcgYSBncmFtbWFyXG4vLyBhdXRob3IgdG8gd3JpdGUgYG1hdGNoYCB3aGVuIHRoZXkgZGVzaXJlIHRvIG1hdGNoIGEgc2luZ2xlIGV4cHJlc3Npb24gcmF0aGVyXG4vLyB0aGFuIGJlaW5nIGZvcmNlZCB0byB1c2UgYGJlZ2luYC4gIFRoZSBleHRlbnNpb24gdGhlbiBqdXN0IG1vdmVzIGBtYXRjaGAgaW50b1xuLy8gYGJlZ2luYCB3aGVuIGl0IHJ1bnMuICBJZSwgbm8gZmVhdHVyZXMgaGF2ZSBiZWVuIGFkZGVkLCBidXQgd2UndmUganVzdCBtYWRlXG4vLyB0aGUgZXhwZXJpZW5jZSBvZiB3cml0aW5nIChhbmQgcmVhZGluZyBncmFtbWFycykgYSBsaXR0bGUgYml0IG5pY2VyLlxuXG4vLyAtLS0tLS1cblxuLy8gVE9ETzogV2UgbmVlZCBuZWdhdGl2ZSBsb29rLWJlaGluZCBzdXBwb3J0IHRvIGRvIHRoaXMgcHJvcGVybHlcbi8qKlxuICogU2tpcCBhIG1hdGNoIGlmIGl0IGhhcyBhIHByZWNlZGluZyBkb3RcbiAqXG4gKiBUaGlzIGlzIHVzZWQgZm9yIGBiZWdpbktleXdvcmRzYCB0byBwcmV2ZW50IG1hdGNoaW5nIGV4cHJlc3Npb25zIHN1Y2ggYXNcbiAqIGBib2Iua2V5d29yZC5kbygpYC4gVGhlIG1vZGUgY29tcGlsZXIgYXV0b21hdGljYWxseSB3aXJlcyB0aGlzIHVwIGFzIGFcbiAqIHNwZWNpYWwgX2ludGVybmFsXyAnb246YmVnaW4nIGNhbGxiYWNrIGZvciBtb2RlcyB3aXRoIGBiZWdpbktleXdvcmRzYFxuICogQHBhcmFtIHtSZWdFeHBNYXRjaEFycmF5fSBtYXRjaFxuICogQHBhcmFtIHtDYWxsYmFja1Jlc3BvbnNlfSByZXNwb25zZVxuICovXG5mdW5jdGlvbiBza2lwSWZIYXNQcmVjZWRpbmdEb3QobWF0Y2gsIHJlc3BvbnNlKSB7XG4gIGNvbnN0IGJlZm9yZSA9IG1hdGNoLmlucHV0W21hdGNoLmluZGV4IC0gMV07XG4gIGlmIChiZWZvcmUgPT09IFwiLlwiKSB7XG4gICAgcmVzcG9uc2UuaWdub3JlTWF0Y2goKTtcbiAgfVxufVxuXG4vKipcbiAqXG4gKiBAdHlwZSB7Q29tcGlsZXJFeHR9XG4gKi9cbmZ1bmN0aW9uIHNjb3BlQ2xhc3NOYW1lKG1vZGUsIF9wYXJlbnQpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmaW5lZFxuICBpZiAobW9kZS5jbGFzc05hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgIG1vZGUuc2NvcGUgPSBtb2RlLmNsYXNzTmFtZTtcbiAgICBkZWxldGUgbW9kZS5jbGFzc05hbWU7XG4gIH1cbn1cblxuLyoqXG4gKiBgYmVnaW5LZXl3b3Jkc2Agc3ludGFjdGljIHN1Z2FyXG4gKiBAdHlwZSB7Q29tcGlsZXJFeHR9XG4gKi9cbmZ1bmN0aW9uIGJlZ2luS2V5d29yZHMobW9kZSwgcGFyZW50KSB7XG4gIGlmICghcGFyZW50KSByZXR1cm47XG4gIGlmICghbW9kZS5iZWdpbktleXdvcmRzKSByZXR1cm47XG5cbiAgLy8gZm9yIGxhbmd1YWdlcyB3aXRoIGtleXdvcmRzIHRoYXQgaW5jbHVkZSBub24td29yZCBjaGFyYWN0ZXJzIGNoZWNraW5nIGZvclxuICAvLyBhIHdvcmQgYm91bmRhcnkgaXMgbm90IHN1ZmZpY2llbnQsIHNvIGluc3RlYWQgd2UgY2hlY2sgZm9yIGEgd29yZCBib3VuZGFyeVxuICAvLyBvciB3aGl0ZXNwYWNlIC0gdGhpcyBkb2VzIG5vIGhhcm0gaW4gYW55IGNhc2Ugc2luY2Ugb3VyIGtleXdvcmQgZW5naW5lXG4gIC8vIGRvZXNuJ3QgYWxsb3cgc3BhY2VzIGluIGtleXdvcmRzIGFueXdheXMgYW5kIHdlIHN0aWxsIGNoZWNrIGZvciB0aGUgYm91bmRhcnlcbiAgLy8gZmlyc3RcbiAgbW9kZS5iZWdpbiA9ICdcXFxcYignICsgbW9kZS5iZWdpbktleXdvcmRzLnNwbGl0KCcgJykuam9pbignfCcpICsgJykoPyFcXFxcLikoPz1cXFxcYnxcXFxccyknO1xuICBtb2RlLl9fYmVmb3JlQmVnaW4gPSBza2lwSWZIYXNQcmVjZWRpbmdEb3Q7XG4gIG1vZGUua2V5d29yZHMgPSBtb2RlLmtleXdvcmRzIHx8IG1vZGUuYmVnaW5LZXl3b3JkcztcbiAgZGVsZXRlIG1vZGUuYmVnaW5LZXl3b3JkcztcblxuICAvLyBwcmV2ZW50cyBkb3VibGUgcmVsZXZhbmNlLCB0aGUga2V5d29yZHMgdGhlbXNlbHZlcyBwcm92aWRlXG4gIC8vIHJlbGV2YW5jZSwgdGhlIG1vZGUgZG9lc24ndCBuZWVkIHRvIGRvdWJsZSBpdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZpbmVkXG4gIGlmIChtb2RlLnJlbGV2YW5jZSA9PT0gdW5kZWZpbmVkKSBtb2RlLnJlbGV2YW5jZSA9IDA7XG59XG5cbi8qKlxuICogQWxsb3cgYGlsbGVnYWxgIHRvIGNvbnRhaW4gYW4gYXJyYXkgb2YgaWxsZWdhbCB2YWx1ZXNcbiAqIEB0eXBlIHtDb21waWxlckV4dH1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZUlsbGVnYWwobW9kZSwgX3BhcmVudCkge1xuICBpZiAoIUFycmF5LmlzQXJyYXkobW9kZS5pbGxlZ2FsKSkgcmV0dXJuO1xuXG4gIG1vZGUuaWxsZWdhbCA9IGVpdGhlciguLi5tb2RlLmlsbGVnYWwpO1xufVxuXG4vKipcbiAqIGBtYXRjaGAgdG8gbWF0Y2ggYSBzaW5nbGUgZXhwcmVzc2lvbiBmb3IgcmVhZGFiaWxpdHlcbiAqIEB0eXBlIHtDb21waWxlckV4dH1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZU1hdGNoKG1vZGUsIF9wYXJlbnQpIHtcbiAgaWYgKCFtb2RlLm1hdGNoKSByZXR1cm47XG4gIGlmIChtb2RlLmJlZ2luIHx8IG1vZGUuZW5kKSB0aHJvdyBuZXcgRXJyb3IoXCJiZWdpbiAmIGVuZCBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIG1hdGNoXCIpO1xuXG4gIG1vZGUuYmVnaW4gPSBtb2RlLm1hdGNoO1xuICBkZWxldGUgbW9kZS5tYXRjaDtcbn1cblxuLyoqXG4gKiBwcm92aWRlcyB0aGUgZGVmYXVsdCAxIHJlbGV2YW5jZSB0byBhbGwgbW9kZXNcbiAqIEB0eXBlIHtDb21waWxlckV4dH1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZVJlbGV2YW5jZShtb2RlLCBfcGFyZW50KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZmluZWRcbiAgaWYgKG1vZGUucmVsZXZhbmNlID09PSB1bmRlZmluZWQpIG1vZGUucmVsZXZhbmNlID0gMTtcbn1cblxuLy8gYWxsb3cgYmVmb3JlTWF0Y2ggdG8gYWN0IGFzIGEgXCJxdWFsaWZpZXJcIiBmb3IgdGhlIG1hdGNoXG4vLyB0aGUgZnVsbCBtYXRjaCBiZWdpbiBtdXN0IGJlIFtiZWZvcmVNYXRjaF1bYmVnaW5dXG5jb25zdCBiZWZvcmVNYXRjaEV4dCA9IChtb2RlLCBwYXJlbnQpID0+IHtcbiAgaWYgKCFtb2RlLmJlZm9yZU1hdGNoKSByZXR1cm47XG4gIC8vIHN0YXJ0cyBjb25mbGljdHMgd2l0aCBlbmRzUGFyZW50IHdoaWNoIHdlIG5lZWQgdG8gbWFrZSBzdXJlIHRoZSBjaGlsZFxuICAvLyBydWxlIGlzIG5vdCBtYXRjaGVkIG11bHRpcGxlIHRpbWVzXG4gIGlmIChtb2RlLnN0YXJ0cykgdGhyb3cgbmV3IEVycm9yKFwiYmVmb3JlTWF0Y2ggY2Fubm90IGJlIHVzZWQgd2l0aCBzdGFydHNcIik7XG5cbiAgY29uc3Qgb3JpZ2luYWxNb2RlID0gT2JqZWN0LmFzc2lnbih7fSwgbW9kZSk7XG4gIE9iamVjdC5rZXlzKG1vZGUpLmZvckVhY2goKGtleSkgPT4geyBkZWxldGUgbW9kZVtrZXldOyB9KTtcblxuICBtb2RlLmtleXdvcmRzID0gb3JpZ2luYWxNb2RlLmtleXdvcmRzO1xuICBtb2RlLmJlZ2luID0gY29uY2F0KG9yaWdpbmFsTW9kZS5iZWZvcmVNYXRjaCwgbG9va2FoZWFkKG9yaWdpbmFsTW9kZS5iZWdpbikpO1xuICBtb2RlLnN0YXJ0cyA9IHtcbiAgICByZWxldmFuY2U6IDAsXG4gICAgY29udGFpbnM6IFtcbiAgICAgIE9iamVjdC5hc3NpZ24ob3JpZ2luYWxNb2RlLCB7IGVuZHNQYXJlbnQ6IHRydWUgfSlcbiAgICBdXG4gIH07XG4gIG1vZGUucmVsZXZhbmNlID0gMDtcblxuICBkZWxldGUgb3JpZ2luYWxNb2RlLmJlZm9yZU1hdGNoO1xufTtcblxuLy8ga2V5d29yZHMgdGhhdCBzaG91bGQgaGF2ZSBubyBkZWZhdWx0IHJlbGV2YW5jZSB2YWx1ZVxuY29uc3QgQ09NTU9OX0tFWVdPUkRTID0gW1xuICAnb2YnLFxuICAnYW5kJyxcbiAgJ2ZvcicsXG4gICdpbicsXG4gICdub3QnLFxuICAnb3InLFxuICAnaWYnLFxuICAndGhlbicsXG4gICdwYXJlbnQnLCAvLyBjb21tb24gdmFyaWFibGUgbmFtZVxuICAnbGlzdCcsIC8vIGNvbW1vbiB2YXJpYWJsZSBuYW1lXG4gICd2YWx1ZScgLy8gY29tbW9uIHZhcmlhYmxlIG5hbWVcbl07XG5cbmNvbnN0IERFRkFVTFRfS0VZV09SRF9TQ09QRSA9IFwia2V5d29yZFwiO1xuXG4vKipcbiAqIEdpdmVuIHJhdyBrZXl3b3JkcyBmcm9tIGEgbGFuZ3VhZ2UgZGVmaW5pdGlvbiwgY29tcGlsZSB0aGVtLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nIHwgUmVjb3JkPHN0cmluZyxzdHJpbmd8c3RyaW5nW10+IHwgQXJyYXk8c3RyaW5nPn0gcmF3S2V5d29yZHNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY2FzZUluc2Vuc2l0aXZlXG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGVLZXl3b3JkcyhyYXdLZXl3b3JkcywgY2FzZUluc2Vuc2l0aXZlLCBzY29wZU5hbWUgPSBERUZBVUxUX0tFWVdPUkRfU0NPUEUpIHtcbiAgLyoqIEB0eXBlIHtpbXBvcnQoXCJoaWdobGlnaHQuanMvcHJpdmF0ZVwiKS5LZXl3b3JkRGljdH0gKi9cbiAgY29uc3QgY29tcGlsZWRLZXl3b3JkcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgLy8gaW5wdXQgY2FuIGJlIGEgc3RyaW5nIG9mIGtleXdvcmRzLCBhbiBhcnJheSBvZiBrZXl3b3Jkcywgb3IgYSBvYmplY3Qgd2l0aFxuICAvLyBuYW1lZCBrZXlzIHJlcHJlc2VudGluZyBzY29wZU5hbWUgKHdoaWNoIGNhbiB0aGVuIHBvaW50IHRvIGEgc3RyaW5nIG9yIGFycmF5KVxuICBpZiAodHlwZW9mIHJhd0tleXdvcmRzID09PSAnc3RyaW5nJykge1xuICAgIGNvbXBpbGVMaXN0KHNjb3BlTmFtZSwgcmF3S2V5d29yZHMuc3BsaXQoXCIgXCIpKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJhd0tleXdvcmRzKSkge1xuICAgIGNvbXBpbGVMaXN0KHNjb3BlTmFtZSwgcmF3S2V5d29yZHMpO1xuICB9IGVsc2Uge1xuICAgIE9iamVjdC5rZXlzKHJhd0tleXdvcmRzKS5mb3JFYWNoKGZ1bmN0aW9uKHNjb3BlTmFtZSkge1xuICAgICAgLy8gY29sbGFwc2UgYWxsIG91ciBvYmplY3RzIGJhY2sgaW50byB0aGUgcGFyZW50IG9iamVjdFxuICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgY29tcGlsZWRLZXl3b3JkcyxcbiAgICAgICAgY29tcGlsZUtleXdvcmRzKHJhd0tleXdvcmRzW3Njb3BlTmFtZV0sIGNhc2VJbnNlbnNpdGl2ZSwgc2NvcGVOYW1lKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gY29tcGlsZWRLZXl3b3JkcztcblxuICAvLyAtLS1cblxuICAvKipcbiAgICogQ29tcGlsZXMgYW4gaW5kaXZpZHVhbCBsaXN0IG9mIGtleXdvcmRzXG4gICAqXG4gICAqIEV4OiBcImZvciBpZiB3aGVuIHdoaWxlfDVcIlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2NvcGVOYW1lXG4gICAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0ga2V5d29yZExpc3RcbiAgICovXG4gIGZ1bmN0aW9uIGNvbXBpbGVMaXN0KHNjb3BlTmFtZSwga2V5d29yZExpc3QpIHtcbiAgICBpZiAoY2FzZUluc2Vuc2l0aXZlKSB7XG4gICAgICBrZXl3b3JkTGlzdCA9IGtleXdvcmRMaXN0Lm1hcCh4ID0+IHgudG9Mb3dlckNhc2UoKSk7XG4gICAgfVxuICAgIGtleXdvcmRMaXN0LmZvckVhY2goZnVuY3Rpb24oa2V5d29yZCkge1xuICAgICAgY29uc3QgcGFpciA9IGtleXdvcmQuc3BsaXQoJ3wnKTtcbiAgICAgIGNvbXBpbGVkS2V5d29yZHNbcGFpclswXV0gPSBbc2NvcGVOYW1lLCBzY29yZUZvcktleXdvcmQocGFpclswXSwgcGFpclsxXSldO1xuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcHJvcGVyIHNjb3JlIGZvciBhIGdpdmVuIGtleXdvcmRcbiAqXG4gKiBBbHNvIHRha2VzIGludG8gYWNjb3VudCBjb21tZW50IGtleXdvcmRzLCB3aGljaCB3aWxsIGJlIHNjb3JlZCAwIFVOTEVTU1xuICogYW5vdGhlciBzY29yZSBoYXMgYmVlbiBtYW51YWxseSBhc3NpZ25lZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXl3b3JkXG4gKiBAcGFyYW0ge3N0cmluZ30gW3Byb3ZpZGVkU2NvcmVdXG4gKi9cbmZ1bmN0aW9uIHNjb3JlRm9yS2V5d29yZChrZXl3b3JkLCBwcm92aWRlZFNjb3JlKSB7XG4gIC8vIG1hbnVhbCBzY29yZXMgYWx3YXlzIHdpbiBvdmVyIGNvbW1vbiBrZXl3b3Jkc1xuICAvLyBzbyB5b3UgY2FuIGZvcmNlIGEgc2NvcmUgb2YgMSBpZiB5b3UgcmVhbGx5IGluc2lzdFxuICBpZiAocHJvdmlkZWRTY29yZSkge1xuICAgIHJldHVybiBOdW1iZXIocHJvdmlkZWRTY29yZSk7XG4gIH1cblxuICByZXR1cm4gY29tbW9uS2V5d29yZChrZXl3b3JkKSA/IDAgOiAxO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgaWYgYSBnaXZlbiBrZXl3b3JkIGlzIGNvbW1vbiBvciBub3RcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5d29yZCAqL1xuZnVuY3Rpb24gY29tbW9uS2V5d29yZChrZXl3b3JkKSB7XG4gIHJldHVybiBDT01NT05fS0VZV09SRFMuaW5jbHVkZXMoa2V5d29yZC50b0xvd2VyQ2FzZSgpKTtcbn1cblxuLypcblxuRm9yIHRoZSByZWFzb25pbmcgYmVoaW5kIHRoaXMgcGxlYXNlIHNlZTpcbmh0dHBzOi8vZ2l0aHViLmNvbS9oaWdobGlnaHRqcy9oaWdobGlnaHQuanMvaXNzdWVzLzI4ODAjaXNzdWVjb21tZW50LTc0NzI3NTQxOVxuXG4qL1xuXG4vKipcbiAqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCBib29sZWFuPn1cbiAqL1xuY29uc3Qgc2VlbkRlcHJlY2F0aW9ucyA9IHt9O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlXG4gKi9cbmNvbnN0IGVycm9yID0gKG1lc3NhZ2UpID0+IHtcbiAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7YW55fSBhcmdzXG4gKi9cbmNvbnN0IHdhcm4gPSAobWVzc2FnZSwgLi4uYXJncykgPT4ge1xuICBjb25zb2xlLmxvZyhgV0FSTjogJHttZXNzYWdlfWAsIC4uLmFyZ3MpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcbiAqL1xuY29uc3QgZGVwcmVjYXRlZCA9ICh2ZXJzaW9uLCBtZXNzYWdlKSA9PiB7XG4gIGlmIChzZWVuRGVwcmVjYXRpb25zW2Ake3ZlcnNpb259LyR7bWVzc2FnZX1gXSkgcmV0dXJuO1xuXG4gIGNvbnNvbGUubG9nKGBEZXByZWNhdGVkIGFzIG9mICR7dmVyc2lvbn0uICR7bWVzc2FnZX1gKTtcbiAgc2VlbkRlcHJlY2F0aW9uc1tgJHt2ZXJzaW9ufS8ke21lc3NhZ2V9YF0gPSB0cnVlO1xufTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tdGhyb3ctbGl0ZXJhbCAqL1xuXG4vKipcbkB0eXBlZGVmIHtpbXBvcnQoJ2hpZ2hsaWdodC5qcycpLkNvbXBpbGVkTW9kZX0gQ29tcGlsZWRNb2RlXG4qL1xuXG5jb25zdCBNdWx0aUNsYXNzRXJyb3IgPSBuZXcgRXJyb3IoKTtcblxuLyoqXG4gKiBSZW51bWJlcnMgbGFiZWxlZCBzY29wZSBuYW1lcyB0byBhY2NvdW50IGZvciBhZGRpdGlvbmFsIGlubmVyIG1hdGNoXG4gKiBncm91cHMgdGhhdCBvdGhlcndpc2Ugd291bGQgYnJlYWsgZXZlcnl0aGluZy5cbiAqXG4gKiBMZXRzIHNheSB3ZSAzIG1hdGNoIHNjb3BlczpcbiAqXG4gKiAgIHsgMSA9PiAuLi4sIDIgPT4gLi4uLCAzID0+IC4uLiB9XG4gKlxuICogU28gd2hhdCB3ZSBuZWVkIGlzIGEgY2xlYW4gbWF0Y2ggbGlrZSB0aGlzOlxuICpcbiAqICAgKGEpKGIpKGMpID0+IFsgXCJhXCIsIFwiYlwiLCBcImNcIiBdXG4gKlxuICogQnV0IHRoaXMgZmFsbHMgYXBhcnQgd2l0aCBpbm5lciBtYXRjaCBncm91cHM6XG4gKlxuICogKGEpKCgoYikpKShjKSA9PiBbXCJhXCIsIFwiYlwiLCBcImJcIiwgXCJiXCIsIFwiY1wiIF1cbiAqXG4gKiBPdXIgc2NvcGVzIGFyZSBub3cgXCJvdXQgb2YgYWxpZ25tZW50XCIgYW5kIHdlJ3JlIHJlcGVhdGluZyBgYmAgMyB0aW1lcy5cbiAqIFdoYXQgbmVlZHMgdG8gaGFwcGVuIGlzIHRoZSBudW1iZXJzIGFyZSByZW1hcHBlZDpcbiAqXG4gKiAgIHsgMSA9PiAuLi4sIDIgPT4gLi4uLCA1ID0+IC4uLiB9XG4gKlxuICogV2UgYWxzbyBuZWVkIHRvIGtub3cgdGhhdCB0aGUgT05MWSBncm91cHMgdGhhdCBzaG91bGQgYmUgb3V0cHV0XG4gKiBhcmUgMSwgMiwgYW5kIDUuICBUaGlzIGZ1bmN0aW9uIGhhbmRsZXMgdGhpcyBiZWhhdmlvci5cbiAqXG4gKiBAcGFyYW0ge0NvbXBpbGVkTW9kZX0gbW9kZVxuICogQHBhcmFtIHtBcnJheTxSZWdFeHAgfCBzdHJpbmc+fSByZWdleGVzXG4gKiBAcGFyYW0ge3trZXk6IFwiYmVnaW5TY29wZVwifFwiZW5kU2NvcGVcIn19IG9wdHNcbiAqL1xuZnVuY3Rpb24gcmVtYXBTY29wZU5hbWVzKG1vZGUsIHJlZ2V4ZXMsIHsga2V5IH0pIHtcbiAgbGV0IG9mZnNldCA9IDA7XG4gIGNvbnN0IHNjb3BlTmFtZXMgPSBtb2RlW2tleV07XG4gIC8qKiBAdHlwZSBSZWNvcmQ8bnVtYmVyLGJvb2xlYW4+ICovXG4gIGNvbnN0IGVtaXQgPSB7fTtcbiAgLyoqIEB0eXBlIFJlY29yZDxudW1iZXIsc3RyaW5nPiAqL1xuICBjb25zdCBwb3NpdGlvbnMgPSB7fTtcblxuICBmb3IgKGxldCBpID0gMTsgaSA8PSByZWdleGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgcG9zaXRpb25zW2kgKyBvZmZzZXRdID0gc2NvcGVOYW1lc1tpXTtcbiAgICBlbWl0W2kgKyBvZmZzZXRdID0gdHJ1ZTtcbiAgICBvZmZzZXQgKz0gY291bnRNYXRjaEdyb3VwcyhyZWdleGVzW2kgLSAxXSk7XG4gIH1cbiAgLy8gd2UgdXNlIF9lbWl0IHRvIGtlZXAgdHJhY2sgb2Ygd2hpY2ggbWF0Y2ggZ3JvdXBzIGFyZSBcInRvcC1sZXZlbFwiIHRvIGF2b2lkIGRvdWJsZVxuICAvLyBvdXRwdXQgZnJvbSBpbnNpZGUgbWF0Y2ggZ3JvdXBzXG4gIG1vZGVba2V5XSA9IHBvc2l0aW9ucztcbiAgbW9kZVtrZXldLl9lbWl0ID0gZW1pdDtcbiAgbW9kZVtrZXldLl9tdWx0aSA9IHRydWU7XG59XG5cbi8qKlxuICogQHBhcmFtIHtDb21waWxlZE1vZGV9IG1vZGVcbiAqL1xuZnVuY3Rpb24gYmVnaW5NdWx0aUNsYXNzKG1vZGUpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KG1vZGUuYmVnaW4pKSByZXR1cm47XG5cbiAgaWYgKG1vZGUuc2tpcCB8fCBtb2RlLmV4Y2x1ZGVCZWdpbiB8fCBtb2RlLnJldHVybkJlZ2luKSB7XG4gICAgZXJyb3IoXCJza2lwLCBleGNsdWRlQmVnaW4sIHJldHVybkJlZ2luIG5vdCBjb21wYXRpYmxlIHdpdGggYmVnaW5TY29wZToge31cIik7XG4gICAgdGhyb3cgTXVsdGlDbGFzc0Vycm9yO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBtb2RlLmJlZ2luU2NvcGUgIT09IFwib2JqZWN0XCIgfHwgbW9kZS5iZWdpblNjb3BlID09PSBudWxsKSB7XG4gICAgZXJyb3IoXCJiZWdpblNjb3BlIG11c3QgYmUgb2JqZWN0XCIpO1xuICAgIHRocm93IE11bHRpQ2xhc3NFcnJvcjtcbiAgfVxuXG4gIHJlbWFwU2NvcGVOYW1lcyhtb2RlLCBtb2RlLmJlZ2luLCB7IGtleTogXCJiZWdpblNjb3BlXCIgfSk7XG4gIG1vZGUuYmVnaW4gPSBfcmV3cml0ZUJhY2tyZWZlcmVuY2VzKG1vZGUuYmVnaW4sIHsgam9pbldpdGg6IFwiXCIgfSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtDb21waWxlZE1vZGV9IG1vZGVcbiAqL1xuZnVuY3Rpb24gZW5kTXVsdGlDbGFzcyhtb2RlKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShtb2RlLmVuZCkpIHJldHVybjtcblxuICBpZiAobW9kZS5za2lwIHx8IG1vZGUuZXhjbHVkZUVuZCB8fCBtb2RlLnJldHVybkVuZCkge1xuICAgIGVycm9yKFwic2tpcCwgZXhjbHVkZUVuZCwgcmV0dXJuRW5kIG5vdCBjb21wYXRpYmxlIHdpdGggZW5kU2NvcGU6IHt9XCIpO1xuICAgIHRocm93IE11bHRpQ2xhc3NFcnJvcjtcbiAgfVxuXG4gIGlmICh0eXBlb2YgbW9kZS5lbmRTY29wZSAhPT0gXCJvYmplY3RcIiB8fCBtb2RlLmVuZFNjb3BlID09PSBudWxsKSB7XG4gICAgZXJyb3IoXCJlbmRTY29wZSBtdXN0IGJlIG9iamVjdFwiKTtcbiAgICB0aHJvdyBNdWx0aUNsYXNzRXJyb3I7XG4gIH1cblxuICByZW1hcFNjb3BlTmFtZXMobW9kZSwgbW9kZS5lbmQsIHsga2V5OiBcImVuZFNjb3BlXCIgfSk7XG4gIG1vZGUuZW5kID0gX3Jld3JpdGVCYWNrcmVmZXJlbmNlcyhtb2RlLmVuZCwgeyBqb2luV2l0aDogXCJcIiB9KTtcbn1cblxuLyoqXG4gKiB0aGlzIGV4aXN0cyBvbmx5IHRvIGFsbG93IGBzY29wZToge31gIHRvIGJlIHVzZWQgYmVzaWRlIGBtYXRjaDpgXG4gKiBPdGhlcndpc2UgYGJlZ2luU2NvcGVgIHdvdWxkIG5lY2Vzc2FyeSBhbmQgdGhhdCB3b3VsZCBsb29rIHdlaXJkXG5cbiAge1xuICAgIG1hdGNoOiBbIC9kZWYvLCAvXFx3Ky8gXVxuICAgIHNjb3BlOiB7IDE6IFwia2V5d29yZFwiICwgMjogXCJ0aXRsZVwiIH1cbiAgfVxuXG4gKiBAcGFyYW0ge0NvbXBpbGVkTW9kZX0gbW9kZVxuICovXG5mdW5jdGlvbiBzY29wZVN1Z2FyKG1vZGUpIHtcbiAgaWYgKG1vZGUuc2NvcGUgJiYgdHlwZW9mIG1vZGUuc2NvcGUgPT09IFwib2JqZWN0XCIgJiYgbW9kZS5zY29wZSAhPT0gbnVsbCkge1xuICAgIG1vZGUuYmVnaW5TY29wZSA9IG1vZGUuc2NvcGU7XG4gICAgZGVsZXRlIG1vZGUuc2NvcGU7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NvbXBpbGVkTW9kZX0gbW9kZVxuICovXG5mdW5jdGlvbiBNdWx0aUNsYXNzKG1vZGUpIHtcbiAgc2NvcGVTdWdhcihtb2RlKTtcblxuICBpZiAodHlwZW9mIG1vZGUuYmVnaW5TY29wZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIG1vZGUuYmVnaW5TY29wZSA9IHsgX3dyYXA6IG1vZGUuYmVnaW5TY29wZSB9O1xuICB9XG4gIGlmICh0eXBlb2YgbW9kZS5lbmRTY29wZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIG1vZGUuZW5kU2NvcGUgPSB7IF93cmFwOiBtb2RlLmVuZFNjb3BlIH07XG4gIH1cblxuICBiZWdpbk11bHRpQ2xhc3MobW9kZSk7XG4gIGVuZE11bHRpQ2xhc3MobW9kZSk7XG59XG5cbi8qKlxuQHR5cGVkZWYge2ltcG9ydCgnaGlnaGxpZ2h0LmpzJykuTW9kZX0gTW9kZVxuQHR5cGVkZWYge2ltcG9ydCgnaGlnaGxpZ2h0LmpzJykuQ29tcGlsZWRNb2RlfSBDb21waWxlZE1vZGVcbkB0eXBlZGVmIHtpbXBvcnQoJ2hpZ2hsaWdodC5qcycpLkxhbmd1YWdlfSBMYW5ndWFnZVxuQHR5cGVkZWYge2ltcG9ydCgnaGlnaGxpZ2h0LmpzJykuSExKU1BsdWdpbn0gSExKU1BsdWdpblxuQHR5cGVkZWYge2ltcG9ydCgnaGlnaGxpZ2h0LmpzJykuQ29tcGlsZWRMYW5ndWFnZX0gQ29tcGlsZWRMYW5ndWFnZVxuKi9cblxuLy8gY29tcGlsYXRpb25cblxuLyoqXG4gKiBDb21waWxlcyBhIGxhbmd1YWdlIGRlZmluaXRpb24gcmVzdWx0XG4gKlxuICogR2l2ZW4gdGhlIHJhdyByZXN1bHQgb2YgYSBsYW5ndWFnZSBkZWZpbml0aW9uIChMYW5ndWFnZSksIGNvbXBpbGVzIHRoaXMgc29cbiAqIHRoYXQgaXQgaXMgcmVhZHkgZm9yIGhpZ2hsaWdodGluZyBjb2RlLlxuICogQHBhcmFtIHtMYW5ndWFnZX0gbGFuZ3VhZ2VcbiAqIEByZXR1cm5zIHtDb21waWxlZExhbmd1YWdlfVxuICovXG5mdW5jdGlvbiBjb21waWxlTGFuZ3VhZ2UobGFuZ3VhZ2UpIHtcbiAgLyoqXG4gICAqIEJ1aWxkcyBhIHJlZ2V4IHdpdGggdGhlIGNhc2Ugc2Vuc2l0aXZpdHkgb2YgdGhlIGN1cnJlbnQgbGFuZ3VhZ2VcbiAgICpcbiAgICogQHBhcmFtIHtSZWdFeHAgfCBzdHJpbmd9IHZhbHVlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2dsb2JhbF1cbiAgICovXG4gIGZ1bmN0aW9uIGxhbmdSZSh2YWx1ZSwgZ2xvYmFsKSB7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoXG4gICAgICBzb3VyY2UodmFsdWUpLFxuICAgICAgJ20nXG4gICAgICArIChsYW5ndWFnZS5jYXNlX2luc2Vuc2l0aXZlID8gJ2knIDogJycpXG4gICAgICArIChsYW5ndWFnZS51bmljb2RlUmVnZXggPyAndScgOiAnJylcbiAgICAgICsgKGdsb2JhbCA/ICdnJyA6ICcnKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICBTdG9yZXMgbXVsdGlwbGUgcmVndWxhciBleHByZXNzaW9ucyBhbmQgYWxsb3dzIHlvdSB0byBxdWlja2x5IHNlYXJjaCBmb3JcbiAgICB0aGVtIGFsbCBpbiBhIHN0cmluZyBzaW11bHRhbmVvdXNseSAtIHJldHVybmluZyB0aGUgZmlyc3QgbWF0Y2guICBJdCBkb2VzXG4gICAgdGhpcyBieSBjcmVhdGluZyBhIGh1Z2UgKGF8YnxjKSByZWdleCAtIGVhY2ggaW5kaXZpZHVhbCBpdGVtIHdyYXBwZWQgd2l0aCAoKVxuICAgIGFuZCBqb2luZWQgYnkgYHxgIC0gdXNpbmcgbWF0Y2ggZ3JvdXBzIHRvIHRyYWNrIHBvc2l0aW9uLiAgV2hlbiBhIG1hdGNoIGlzXG4gICAgZm91bmQgY2hlY2tpbmcgd2hpY2ggcG9zaXRpb24gaW4gdGhlIGFycmF5IGhhcyBjb250ZW50IGFsbG93cyB1cyB0byBmaWd1cmVcbiAgICBvdXQgd2hpY2ggb2YgdGhlIG9yaWdpbmFsIHJlZ2V4ZXMgLyBtYXRjaCBncm91cHMgdHJpZ2dlcmVkIHRoZSBtYXRjaC5cblxuICAgIFRoZSBtYXRjaCBvYmplY3QgaXRzZWxmICh0aGUgcmVzdWx0IG9mIGBSZWdleC5leGVjYCkgaXMgcmV0dXJuZWQgYnV0IGFsc29cbiAgICBlbmhhbmNlZCBieSBtZXJnaW5nIGluIGFueSBtZXRhLWRhdGEgdGhhdCB3YXMgcmVnaXN0ZXJlZCB3aXRoIHRoZSByZWdleC5cbiAgICBUaGlzIGlzIGhvdyB3ZSBrZWVwIHRyYWNrIG9mIHdoaWNoIG1vZGUgbWF0Y2hlZCwgYW5kIHdoYXQgdHlwZSBvZiBydWxlXG4gICAgKGBpbGxlZ2FsYCwgYGJlZ2luYCwgZW5kLCBldGMpLlxuICAqL1xuICBjbGFzcyBNdWx0aVJlZ2V4IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMubWF0Y2hJbmRleGVzID0ge307XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzLnJlZ2V4ZXMgPSBbXTtcbiAgICAgIHRoaXMubWF0Y2hBdCA9IDE7XG4gICAgICB0aGlzLnBvc2l0aW9uID0gMDtcbiAgICB9XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgYWRkUnVsZShyZSwgb3B0cykge1xuICAgICAgb3B0cy5wb3NpdGlvbiA9IHRoaXMucG9zaXRpb24rKztcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHRoaXMubWF0Y2hJbmRleGVzW3RoaXMubWF0Y2hBdF0gPSBvcHRzO1xuICAgICAgdGhpcy5yZWdleGVzLnB1c2goW29wdHMsIHJlXSk7XG4gICAgICB0aGlzLm1hdGNoQXQgKz0gY291bnRNYXRjaEdyb3VwcyhyZSkgKyAxO1xuICAgIH1cblxuICAgIGNvbXBpbGUoKSB7XG4gICAgICBpZiAodGhpcy5yZWdleGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAvLyBhdm9pZHMgdGhlIG5lZWQgdG8gY2hlY2sgbGVuZ3RoIGV2ZXJ5IHRpbWUgZXhlYyBpcyBjYWxsZWRcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLmV4ZWMgPSAoKSA9PiBudWxsO1xuICAgICAgfVxuICAgICAgY29uc3QgdGVybWluYXRvcnMgPSB0aGlzLnJlZ2V4ZXMubWFwKGVsID0+IGVsWzFdKTtcbiAgICAgIHRoaXMubWF0Y2hlclJlID0gbGFuZ1JlKF9yZXdyaXRlQmFja3JlZmVyZW5jZXModGVybWluYXRvcnMsIHsgam9pbldpdGg6ICd8JyB9KSwgdHJ1ZSk7XG4gICAgICB0aGlzLmxhc3RJbmRleCA9IDA7XG4gICAgfVxuXG4gICAgLyoqIEBwYXJhbSB7c3RyaW5nfSBzICovXG4gICAgZXhlYyhzKSB7XG4gICAgICB0aGlzLm1hdGNoZXJSZS5sYXN0SW5kZXggPSB0aGlzLmxhc3RJbmRleDtcbiAgICAgIGNvbnN0IG1hdGNoID0gdGhpcy5tYXRjaGVyUmUuZXhlYyhzKTtcbiAgICAgIGlmICghbWF0Y2gpIHsgcmV0dXJuIG51bGw7IH1cblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmaW5lZFxuICAgICAgY29uc3QgaSA9IG1hdGNoLmZpbmRJbmRleCgoZWwsIGkpID0+IGkgPiAwICYmIGVsICE9PSB1bmRlZmluZWQpO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgY29uc3QgbWF0Y2hEYXRhID0gdGhpcy5tYXRjaEluZGV4ZXNbaV07XG4gICAgICAvLyB0cmltIG9mZiBhbnkgZWFybGllciBub24tcmVsZXZhbnQgbWF0Y2ggZ3JvdXBzIChpZSwgdGhlIG90aGVyIHJlZ2V4XG4gICAgICAvLyBtYXRjaCBncm91cHMgdGhhdCBtYWtlIHVwIHRoZSBtdWx0aS1tYXRjaGVyKVxuICAgICAgbWF0Y2guc3BsaWNlKDAsIGkpO1xuXG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihtYXRjaCwgbWF0Y2hEYXRhKTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgIENyZWF0ZWQgdG8gc29sdmUgdGhlIGtleSBkZWZpY2llbnRseSB3aXRoIE11bHRpUmVnZXggLSB0aGVyZSBpcyBubyB3YXkgdG9cbiAgICB0ZXN0IGZvciBtdWx0aXBsZSBtYXRjaGVzIGF0IGEgc2luZ2xlIGxvY2F0aW9uLiAgV2h5IHdvdWxkIHdlIG5lZWQgdG8gZG9cbiAgICB0aGF0PyAgSW4gdGhlIGZ1dHVyZSBhIG1vcmUgZHluYW1pYyBlbmdpbmUgd2lsbCBhbGxvdyBjZXJ0YWluIG1hdGNoZXMgdG8gYmVcbiAgICBpZ25vcmVkLiAgQW4gZXhhbXBsZTogaWYgd2UgbWF0Y2hlZCBzYXkgdGhlIDNyZCByZWdleCBpbiBhIGxhcmdlIGdyb3VwIGJ1dFxuICAgIGRlY2lkZWQgdG8gaWdub3JlIGl0IC0gd2UnZCBuZWVkIHRvIHN0YXJ0ZWQgdGVzdGluZyBhZ2FpbiBhdCB0aGUgNHRoXG4gICAgcmVnZXguLi4gYnV0IE11bHRpUmVnZXggaXRzZWxmIGdpdmVzIHVzIG5vIHJlYWwgd2F5IHRvIGRvIHRoYXQuXG5cbiAgICBTbyB3aGF0IHRoaXMgY2xhc3MgY3JlYXRlcyBNdWx0aVJlZ2V4cyBvbiB0aGUgZmx5IGZvciB3aGF0ZXZlciBzZWFyY2hcbiAgICBwb3NpdGlvbiB0aGV5IGFyZSBuZWVkZWQuXG5cbiAgICBOT1RFOiBUaGVzZSBhZGRpdGlvbmFsIE11bHRpUmVnZXggb2JqZWN0cyBhcmUgY3JlYXRlZCBkeW5hbWljYWxseS4gIEZvciBtb3N0XG4gICAgZ3JhbW1hcnMgbW9zdCBvZiB0aGUgdGltZSB3ZSB3aWxsIG5ldmVyIGFjdHVhbGx5IG5lZWQgYW55dGhpbmcgbW9yZSB0aGFuIHRoZVxuICAgIGZpcnN0IE11bHRpUmVnZXggLSBzbyB0aGlzIHNob3VsZG4ndCBoYXZlIHRvbyBtdWNoIG92ZXJoZWFkLlxuXG4gICAgU2F5IHRoaXMgaXMgb3VyIHNlYXJjaCBncm91cCwgYW5kIHdlIG1hdGNoIHJlZ2V4MywgYnV0IHdpc2ggdG8gaWdub3JlIGl0LlxuXG4gICAgICByZWdleDEgfCByZWdleDIgfCByZWdleDMgfCByZWdleDQgfCByZWdleDUgICAgJyBpZSwgc3RhcnRBdCA9IDBcblxuICAgIFdoYXQgd2UgbmVlZCBpcyBhIG5ldyBNdWx0aVJlZ2V4IHRoYXQgb25seSBpbmNsdWRlcyB0aGUgcmVtYWluaW5nXG4gICAgcG9zc2liaWxpdGllczpcblxuICAgICAgcmVnZXg0IHwgcmVnZXg1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgaWUsIHN0YXJ0QXQgPSAzXG5cbiAgICBUaGlzIGNsYXNzIHdyYXBzIGFsbCB0aGF0IGNvbXBsZXhpdHkgdXAgaW4gYSBzaW1wbGUgQVBJLi4uIGBzdGFydEF0YCBkZWNpZGVzXG4gICAgd2hlcmUgaW4gdGhlIGFycmF5IG9mIGV4cHJlc3Npb25zIHRvIHN0YXJ0IGRvaW5nIHRoZSBtYXRjaGluZy4gSXRcbiAgICBhdXRvLWluY3JlbWVudHMsIHNvIGlmIGEgbWF0Y2ggaXMgZm91bmQgYXQgcG9zaXRpb24gMiwgdGhlbiBzdGFydEF0IHdpbGwgYmVcbiAgICBzZXQgdG8gMy4gIElmIHRoZSBlbmQgaXMgcmVhY2hlZCBzdGFydEF0IHdpbGwgcmV0dXJuIHRvIDAuXG5cbiAgICBNT1NUIG9mIHRoZSB0aW1lIHRoZSBwYXJzZXIgd2lsbCBiZSBzZXR0aW5nIHN0YXJ0QXQgbWFudWFsbHkgdG8gMC5cbiAgKi9cbiAgY2xhc3MgUmVzdW1hYmxlTXVsdGlSZWdleCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzLnJ1bGVzID0gW107XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzLm11bHRpUmVnZXhlcyA9IFtdO1xuICAgICAgdGhpcy5jb3VudCA9IDA7XG5cbiAgICAgIHRoaXMubGFzdEluZGV4ID0gMDtcbiAgICAgIHRoaXMucmVnZXhJbmRleCA9IDA7XG4gICAgfVxuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGdldE1hdGNoZXIoaW5kZXgpIHtcbiAgICAgIGlmICh0aGlzLm11bHRpUmVnZXhlc1tpbmRleF0pIHJldHVybiB0aGlzLm11bHRpUmVnZXhlc1tpbmRleF07XG5cbiAgICAgIGNvbnN0IG1hdGNoZXIgPSBuZXcgTXVsdGlSZWdleCgpO1xuICAgICAgdGhpcy5ydWxlcy5zbGljZShpbmRleCkuZm9yRWFjaCgoW3JlLCBvcHRzXSkgPT4gbWF0Y2hlci5hZGRSdWxlKHJlLCBvcHRzKSk7XG4gICAgICBtYXRjaGVyLmNvbXBpbGUoKTtcbiAgICAgIHRoaXMubXVsdGlSZWdleGVzW2luZGV4XSA9IG1hdGNoZXI7XG4gICAgICByZXR1cm4gbWF0Y2hlcjtcbiAgICB9XG5cbiAgICByZXN1bWluZ1NjYW5BdFNhbWVQb3NpdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlZ2V4SW5kZXggIT09IDA7XG4gICAgfVxuXG4gICAgY29uc2lkZXJBbGwoKSB7XG4gICAgICB0aGlzLnJlZ2V4SW5kZXggPSAwO1xuICAgIH1cblxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBhZGRSdWxlKHJlLCBvcHRzKSB7XG4gICAgICB0aGlzLnJ1bGVzLnB1c2goW3JlLCBvcHRzXSk7XG4gICAgICBpZiAob3B0cy50eXBlID09PSBcImJlZ2luXCIpIHRoaXMuY291bnQrKztcbiAgICB9XG5cbiAgICAvKiogQHBhcmFtIHtzdHJpbmd9IHMgKi9cbiAgICBleGVjKHMpIHtcbiAgICAgIGNvbnN0IG0gPSB0aGlzLmdldE1hdGNoZXIodGhpcy5yZWdleEluZGV4KTtcbiAgICAgIG0ubGFzdEluZGV4ID0gdGhpcy5sYXN0SW5kZXg7XG4gICAgICBsZXQgcmVzdWx0ID0gbS5leGVjKHMpO1xuXG4gICAgICAvLyBUaGUgZm9sbG93aW5nIGlzIGJlY2F1c2Ugd2UgaGF2ZSBubyBlYXN5IHdheSB0byBzYXkgXCJyZXN1bWUgc2Nhbm5pbmcgYXQgdGhlXG4gICAgICAvLyBleGlzdGluZyBwb3NpdGlvbiBidXQgYWxzbyBza2lwIHRoZSBjdXJyZW50IHJ1bGUgT05MWVwiLiBXaGF0IGhhcHBlbnMgaXNcbiAgICAgIC8vIGFsbCBwcmlvciBydWxlcyBhcmUgYWxzbyBza2lwcGVkIHdoaWNoIGNhbiByZXN1bHQgaW4gbWF0Y2hpbmcgdGhlIHdyb25nXG4gICAgICAvLyB0aGluZy4gRXhhbXBsZSBvZiBtYXRjaGluZyBcImJvb2dlclwiOlxuXG4gICAgICAvLyBvdXIgbWF0Y2hlciBpcyBbc3RyaW5nLCBcImJvb2dlclwiLCBudW1iZXJdXG4gICAgICAvL1xuICAgICAgLy8gLi4uLmJvb2dlci4uLi5cblxuICAgICAgLy8gaWYgXCJib29nZXJcIiBpcyBpZ25vcmVkIHRoZW4gd2UnZCByZWFsbHkgbmVlZCBhIHJlZ2V4IHRvIHNjYW4gZnJvbSB0aGVcbiAgICAgIC8vIFNBTUUgcG9zaXRpb24gZm9yIG9ubHk6IFtzdHJpbmcsIG51bWJlcl0gYnV0IGlnbm9yaW5nIFwiYm9vZ2VyXCIgKGlmIGl0XG4gICAgICAvLyB3YXMgdGhlIGZpcnN0IG1hdGNoKSwgYSBzaW1wbGUgcmVzdW1lIHdvdWxkIHNjYW4gYWhlYWQgd2hvIGtub3dzIGhvd1xuICAgICAgLy8gZmFyIGxvb2tpbmcgb25seSBmb3IgXCJudW1iZXJcIiwgaWdub3JpbmcgcG90ZW50aWFsIHN0cmluZyBtYXRjaGVzIChvclxuICAgICAgLy8gZnV0dXJlIFwiYm9vZ2VyXCIgbWF0Y2hlcyB0aGF0IG1pZ2h0IGJlIHZhbGlkLilcblxuICAgICAgLy8gU28gd2hhdCB3ZSBkbzogV2UgZXhlY3V0ZSB0d28gbWF0Y2hlcnMsIG9uZSByZXN1bWluZyBhdCB0aGUgc2FtZVxuICAgICAgLy8gcG9zaXRpb24sIGJ1dCB0aGUgc2Vjb25kIGZ1bGwgbWF0Y2hlciBzdGFydGluZyBhdCB0aGUgcG9zaXRpb24gYWZ0ZXI6XG5cbiAgICAgIC8vICAgICAvLS0tIHJlc3VtZSBmaXJzdCByZWdleCBtYXRjaCBoZXJlIChmb3IgW251bWJlcl0pXG4gICAgICAvLyAgICAgfC8tLS0tIGZ1bGwgbWF0Y2ggaGVyZSBmb3IgW3N0cmluZywgXCJib29nZXJcIiwgbnVtYmVyXVxuICAgICAgLy8gICAgIHZ2XG4gICAgICAvLyAuLi4uYm9vZ2VyLi4uLlxuXG4gICAgICAvLyBXaGljaCBldmVyIHJlc3VsdHMgaW4gYSBtYXRjaCBmaXJzdCBpcyB0aGVuIHVzZWQuIFNvIHRoaXMgMy00IHN0ZXBcbiAgICAgIC8vIHByb2Nlc3MgZXNzZW50aWFsbHkgYWxsb3dzIHVzIHRvIHNheSBcIm1hdGNoIGF0IHRoaXMgcG9zaXRpb24sIGV4Y2x1ZGluZ1xuICAgICAgLy8gYSBwcmlvciBydWxlIHRoYXQgd2FzIGlnbm9yZWRcIi5cbiAgICAgIC8vXG4gICAgICAvLyAxLiBNYXRjaCBcImJvb2dlclwiIGZpcnN0LCBpZ25vcmUuIEFsc28gcHJvdmVzIHRoYXQgW3N0cmluZ10gZG9lcyBub24gbWF0Y2guXG4gICAgICAvLyAyLiBSZXN1bWUgbWF0Y2hpbmcgZm9yIFtudW1iZXJdXG4gICAgICAvLyAzLiBNYXRjaCBhdCBpbmRleCArIDEgZm9yIFtzdHJpbmcsIFwiYm9vZ2VyXCIsIG51bWJlcl1cbiAgICAgIC8vIDQuIElmICMyIGFuZCAjMyByZXN1bHQgaW4gbWF0Y2hlcywgd2hpY2ggY2FtZSBmaXJzdD9cbiAgICAgIGlmICh0aGlzLnJlc3VtaW5nU2NhbkF0U2FtZVBvc2l0aW9uKCkpIHtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQuaW5kZXggPT09IHRoaXMubGFzdEluZGV4KSA7IGVsc2UgeyAvLyB1c2UgdGhlIHNlY29uZCBtYXRjaGVyIHJlc3VsdFxuICAgICAgICAgIGNvbnN0IG0yID0gdGhpcy5nZXRNYXRjaGVyKDApO1xuICAgICAgICAgIG0yLmxhc3RJbmRleCA9IHRoaXMubGFzdEluZGV4ICsgMTtcbiAgICAgICAgICByZXN1bHQgPSBtMi5leGVjKHMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgdGhpcy5yZWdleEluZGV4ICs9IHJlc3VsdC5wb3NpdGlvbiArIDE7XG4gICAgICAgIGlmICh0aGlzLnJlZ2V4SW5kZXggPT09IHRoaXMuY291bnQpIHtcbiAgICAgICAgICAvLyB3cmFwLWFyb3VuZCB0byBjb25zaWRlcmluZyBhbGwgbWF0Y2hlcyBhZ2FpblxuICAgICAgICAgIHRoaXMuY29uc2lkZXJBbGwoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHaXZlbiBhIG1vZGUsIGJ1aWxkcyBhIGh1Z2UgUmVzdW1hYmxlTXVsdGlSZWdleCB0aGF0IGNhbiBiZSB1c2VkIHRvIHdhbGtcbiAgICogdGhlIGNvbnRlbnQgYW5kIGZpbmQgbWF0Y2hlcy5cbiAgICpcbiAgICogQHBhcmFtIHtDb21waWxlZE1vZGV9IG1vZGVcbiAgICogQHJldHVybnMge1Jlc3VtYWJsZU11bHRpUmVnZXh9XG4gICAqL1xuICBmdW5jdGlvbiBidWlsZE1vZGVSZWdleChtb2RlKSB7XG4gICAgY29uc3QgbW0gPSBuZXcgUmVzdW1hYmxlTXVsdGlSZWdleCgpO1xuXG4gICAgbW9kZS5jb250YWlucy5mb3JFYWNoKHRlcm0gPT4gbW0uYWRkUnVsZSh0ZXJtLmJlZ2luLCB7IHJ1bGU6IHRlcm0sIHR5cGU6IFwiYmVnaW5cIiB9KSk7XG5cbiAgICBpZiAobW9kZS50ZXJtaW5hdG9yRW5kKSB7XG4gICAgICBtbS5hZGRSdWxlKG1vZGUudGVybWluYXRvckVuZCwgeyB0eXBlOiBcImVuZFwiIH0pO1xuICAgIH1cbiAgICBpZiAobW9kZS5pbGxlZ2FsKSB7XG4gICAgICBtbS5hZGRSdWxlKG1vZGUuaWxsZWdhbCwgeyB0eXBlOiBcImlsbGVnYWxcIiB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbW07XG4gIH1cblxuICAvKiogc2tpcCB2cyBhYm9ydCB2cyBpZ25vcmVcbiAgICpcbiAgICogQHNraXAgICAtIFRoZSBtb2RlIGlzIHN0aWxsIGVudGVyZWQgYW5kIGV4aXRlZCBub3JtYWxseSAoYW5kIGNvbnRhaW5zIHJ1bGVzIGFwcGx5KSxcbiAgICogICAgICAgICAgIGJ1dCBhbGwgY29udGVudCBpcyBoZWxkIGFuZCBhZGRlZCB0byB0aGUgcGFyZW50IGJ1ZmZlciByYXRoZXIgdGhhbiBiZWluZ1xuICAgKiAgICAgICAgICAgb3V0cHV0IHdoZW4gdGhlIG1vZGUgZW5kcy4gIE1vc3RseSB1c2VkIHdpdGggYHN1Ymxhbmd1YWdlYCB0byBidWlsZCB1cFxuICAgKiAgICAgICAgICAgYSBzaW5nbGUgbGFyZ2UgYnVmZmVyIHRoYW4gY2FuIGJlIHBhcnNlZCBieSBzdWJsYW5ndWFnZS5cbiAgICpcbiAgICogICAgICAgICAgICAgLSBUaGUgbW9kZSBiZWdpbiBhbmRzIGVuZHMgbm9ybWFsbHkuXG4gICAqICAgICAgICAgICAgIC0gQ29udGVudCBtYXRjaGVkIGlzIGFkZGVkIHRvIHRoZSBwYXJlbnQgbW9kZSBidWZmZXIuXG4gICAqICAgICAgICAgICAgIC0gVGhlIHBhcnNlciBjdXJzb3IgaXMgbW92ZWQgZm9yd2FyZCBub3JtYWxseS5cbiAgICpcbiAgICogQGFib3J0ICAtIEEgaGFjayBwbGFjZWhvbGRlciB1bnRpbCB3ZSBoYXZlIGlnbm9yZS4gIEFib3J0cyB0aGUgbW9kZSAoYXMgaWYgaXRcbiAgICogICAgICAgICAgIG5ldmVyIG1hdGNoZWQpIGJ1dCBET0VTIE5PVCBjb250aW51ZSB0byBtYXRjaCBzdWJzZXF1ZW50IGBjb250YWluc2BcbiAgICogICAgICAgICAgIG1vZGVzLiAgQWJvcnQgaXMgYmFkL3N1Ym9wdGltYWwgYmVjYXVzZSBpdCBjYW4gcmVzdWx0IGluIG1vZGVzXG4gICAqICAgICAgICAgICBmYXJ0aGVyIGRvd24gbm90IGdldHRpbmcgYXBwbGllZCBiZWNhdXNlIGFuIGVhcmxpZXIgcnVsZSBlYXRzIHRoZVxuICAgKiAgICAgICAgICAgY29udGVudCBidXQgdGhlbiBhYm9ydHMuXG4gICAqXG4gICAqICAgICAgICAgICAgIC0gVGhlIG1vZGUgZG9lcyBub3QgYmVnaW4uXG4gICAqICAgICAgICAgICAgIC0gQ29udGVudCBtYXRjaGVkIGJ5IGBiZWdpbmAgaXMgYWRkZWQgdG8gdGhlIG1vZGUgYnVmZmVyLlxuICAgKiAgICAgICAgICAgICAtIFRoZSBwYXJzZXIgY3Vyc29yIGlzIG1vdmVkIGZvcndhcmQgYWNjb3JkaW5nbHkuXG4gICAqXG4gICAqIEBpZ25vcmUgLSBJZ25vcmVzIHRoZSBtb2RlIChhcyBpZiBpdCBuZXZlciBtYXRjaGVkKSBhbmQgY29udGludWVzIHRvIG1hdGNoIGFueVxuICAgKiAgICAgICAgICAgc3Vic2VxdWVudCBgY29udGFpbnNgIG1vZGVzLiAgSWdub3JlIGlzbid0IHRlY2huaWNhbGx5IHBvc3NpYmxlIHdpdGhcbiAgICogICAgICAgICAgIHRoZSBjdXJyZW50IHBhcnNlciBpbXBsZW1lbnRhdGlvbi5cbiAgICpcbiAgICogICAgICAgICAgICAgLSBUaGUgbW9kZSBkb2VzIG5vdCBiZWdpbi5cbiAgICogICAgICAgICAgICAgLSBDb250ZW50IG1hdGNoZWQgYnkgYGJlZ2luYCBpcyBpZ25vcmVkLlxuICAgKiAgICAgICAgICAgICAtIFRoZSBwYXJzZXIgY3Vyc29yIGlzIG5vdCBtb3ZlZCBmb3J3YXJkLlxuICAgKi9cblxuICAvKipcbiAgICogQ29tcGlsZXMgYW4gaW5kaXZpZHVhbCBtb2RlXG4gICAqXG4gICAqIFRoaXMgY2FuIHJhaXNlIGFuIGVycm9yIGlmIHRoZSBtb2RlIGNvbnRhaW5zIGNlcnRhaW4gZGV0ZWN0YWJsZSBrbm93biBsb2dpY1xuICAgKiBpc3N1ZXMuXG4gICAqIEBwYXJhbSB7TW9kZX0gbW9kZVxuICAgKiBAcGFyYW0ge0NvbXBpbGVkTW9kZSB8IG51bGx9IFtwYXJlbnRdXG4gICAqIEByZXR1cm5zIHtDb21waWxlZE1vZGUgfCBuZXZlcn1cbiAgICovXG4gIGZ1bmN0aW9uIGNvbXBpbGVNb2RlKG1vZGUsIHBhcmVudCkge1xuICAgIGNvbnN0IGNtb2RlID0gLyoqIEB0eXBlIENvbXBpbGVkTW9kZSAqLyAobW9kZSk7XG4gICAgaWYgKG1vZGUuaXNDb21waWxlZCkgcmV0dXJuIGNtb2RlO1xuXG4gICAgW1xuICAgICAgc2NvcGVDbGFzc05hbWUsXG4gICAgICAvLyBkbyB0aGlzIGVhcmx5IHNvIGNvbXBpbGVyIGV4dGVuc2lvbnMgZ2VuZXJhbGx5IGRvbid0IGhhdmUgdG8gd29ycnkgYWJvdXRcbiAgICAgIC8vIHRoZSBkaXN0aW5jdGlvbiBiZXR3ZWVuIG1hdGNoL2JlZ2luXG4gICAgICBjb21waWxlTWF0Y2gsXG4gICAgICBNdWx0aUNsYXNzLFxuICAgICAgYmVmb3JlTWF0Y2hFeHRcbiAgICBdLmZvckVhY2goZXh0ID0+IGV4dChtb2RlLCBwYXJlbnQpKTtcblxuICAgIGxhbmd1YWdlLmNvbXBpbGVyRXh0ZW5zaW9ucy5mb3JFYWNoKGV4dCA9PiBleHQobW9kZSwgcGFyZW50KSk7XG5cbiAgICAvLyBfX2JlZm9yZUJlZ2luIGlzIGNvbnNpZGVyZWQgcHJpdmF0ZSBBUEksIGludGVybmFsIHVzZSBvbmx5XG4gICAgbW9kZS5fX2JlZm9yZUJlZ2luID0gbnVsbDtcblxuICAgIFtcbiAgICAgIGJlZ2luS2V5d29yZHMsXG4gICAgICAvLyBkbyB0aGlzIGxhdGVyIHNvIGNvbXBpbGVyIGV4dGVuc2lvbnMgdGhhdCBjb21lIGVhcmxpZXIgaGF2ZSBhY2Nlc3MgdG8gdGhlXG4gICAgICAvLyByYXcgYXJyYXkgaWYgdGhleSB3YW50ZWQgdG8gcGVyaGFwcyBtYW5pcHVsYXRlIGl0LCBldGMuXG4gICAgICBjb21waWxlSWxsZWdhbCxcbiAgICAgIC8vIGRlZmF1bHQgdG8gMSByZWxldmFuY2UgaWYgbm90IHNwZWNpZmllZFxuICAgICAgY29tcGlsZVJlbGV2YW5jZVxuICAgIF0uZm9yRWFjaChleHQgPT4gZXh0KG1vZGUsIHBhcmVudCkpO1xuXG4gICAgbW9kZS5pc0NvbXBpbGVkID0gdHJ1ZTtcblxuICAgIGxldCBrZXl3b3JkUGF0dGVybiA9IG51bGw7XG4gICAgaWYgKHR5cGVvZiBtb2RlLmtleXdvcmRzID09PSBcIm9iamVjdFwiICYmIG1vZGUua2V5d29yZHMuJHBhdHRlcm4pIHtcbiAgICAgIC8vIHdlIG5lZWQgYSBjb3B5IGJlY2F1c2Uga2V5d29yZHMgbWlnaHQgYmUgY29tcGlsZWQgbXVsdGlwbGUgdGltZXNcbiAgICAgIC8vIHNvIHdlIGNhbid0IGdvIGRlbGV0aW5nICRwYXR0ZXJuIGZyb20gdGhlIG9yaWdpbmFsIG9uIHRoZSBmaXJzdFxuICAgICAgLy8gcGFzc1xuICAgICAgbW9kZS5rZXl3b3JkcyA9IE9iamVjdC5hc3NpZ24oe30sIG1vZGUua2V5d29yZHMpO1xuICAgICAga2V5d29yZFBhdHRlcm4gPSBtb2RlLmtleXdvcmRzLiRwYXR0ZXJuO1xuICAgICAgZGVsZXRlIG1vZGUua2V5d29yZHMuJHBhdHRlcm47XG4gICAgfVxuICAgIGtleXdvcmRQYXR0ZXJuID0ga2V5d29yZFBhdHRlcm4gfHwgL1xcdysvO1xuXG4gICAgaWYgKG1vZGUua2V5d29yZHMpIHtcbiAgICAgIG1vZGUua2V5d29yZHMgPSBjb21waWxlS2V5d29yZHMobW9kZS5rZXl3b3JkcywgbGFuZ3VhZ2UuY2FzZV9pbnNlbnNpdGl2ZSk7XG4gICAgfVxuXG4gICAgY21vZGUua2V5d29yZFBhdHRlcm5SZSA9IGxhbmdSZShrZXl3b3JkUGF0dGVybiwgdHJ1ZSk7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAoIW1vZGUuYmVnaW4pIG1vZGUuYmVnaW4gPSAvXFxCfFxcYi87XG4gICAgICBjbW9kZS5iZWdpblJlID0gbGFuZ1JlKGNtb2RlLmJlZ2luKTtcbiAgICAgIGlmICghbW9kZS5lbmQgJiYgIW1vZGUuZW5kc1dpdGhQYXJlbnQpIG1vZGUuZW5kID0gL1xcQnxcXGIvO1xuICAgICAgaWYgKG1vZGUuZW5kKSBjbW9kZS5lbmRSZSA9IGxhbmdSZShjbW9kZS5lbmQpO1xuICAgICAgY21vZGUudGVybWluYXRvckVuZCA9IHNvdXJjZShjbW9kZS5lbmQpIHx8ICcnO1xuICAgICAgaWYgKG1vZGUuZW5kc1dpdGhQYXJlbnQgJiYgcGFyZW50LnRlcm1pbmF0b3JFbmQpIHtcbiAgICAgICAgY21vZGUudGVybWluYXRvckVuZCArPSAobW9kZS5lbmQgPyAnfCcgOiAnJykgKyBwYXJlbnQudGVybWluYXRvckVuZDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG1vZGUuaWxsZWdhbCkgY21vZGUuaWxsZWdhbFJlID0gbGFuZ1JlKC8qKiBAdHlwZSB7UmVnRXhwIHwgc3RyaW5nfSAqLyAobW9kZS5pbGxlZ2FsKSk7XG4gICAgaWYgKCFtb2RlLmNvbnRhaW5zKSBtb2RlLmNvbnRhaW5zID0gW107XG5cbiAgICBtb2RlLmNvbnRhaW5zID0gW10uY29uY2F0KC4uLm1vZGUuY29udGFpbnMubWFwKGZ1bmN0aW9uKGMpIHtcbiAgICAgIHJldHVybiBleHBhbmRPckNsb25lTW9kZShjID09PSAnc2VsZicgPyBtb2RlIDogYyk7XG4gICAgfSkpO1xuICAgIG1vZGUuY29udGFpbnMuZm9yRWFjaChmdW5jdGlvbihjKSB7IGNvbXBpbGVNb2RlKC8qKiBAdHlwZSBNb2RlICovIChjKSwgY21vZGUpOyB9KTtcblxuICAgIGlmIChtb2RlLnN0YXJ0cykge1xuICAgICAgY29tcGlsZU1vZGUobW9kZS5zdGFydHMsIHBhcmVudCk7XG4gICAgfVxuXG4gICAgY21vZGUubWF0Y2hlciA9IGJ1aWxkTW9kZVJlZ2V4KGNtb2RlKTtcbiAgICByZXR1cm4gY21vZGU7XG4gIH1cblxuICBpZiAoIWxhbmd1YWdlLmNvbXBpbGVyRXh0ZW5zaW9ucykgbGFuZ3VhZ2UuY29tcGlsZXJFeHRlbnNpb25zID0gW107XG5cbiAgLy8gc2VsZiBpcyBub3QgdmFsaWQgYXQgdGhlIHRvcC1sZXZlbFxuICBpZiAobGFuZ3VhZ2UuY29udGFpbnMgJiYgbGFuZ3VhZ2UuY29udGFpbnMuaW5jbHVkZXMoJ3NlbGYnKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkVSUjogY29udGFpbnMgYHNlbGZgIGlzIG5vdCBzdXBwb3J0ZWQgYXQgdGhlIHRvcC1sZXZlbCBvZiBhIGxhbmd1YWdlLiAgU2VlIGRvY3VtZW50YXRpb24uXCIpO1xuICB9XG5cbiAgLy8gd2UgbmVlZCBhIG51bGwgb2JqZWN0LCB3aGljaCBpbmhlcml0IHdpbGwgZ3VhcmFudGVlXG4gIGxhbmd1YWdlLmNsYXNzTmFtZUFsaWFzZXMgPSBpbmhlcml0JDEobGFuZ3VhZ2UuY2xhc3NOYW1lQWxpYXNlcyB8fCB7fSk7XG5cbiAgcmV0dXJuIGNvbXBpbGVNb2RlKC8qKiBAdHlwZSBNb2RlICovIChsYW5ndWFnZSkpO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgaWYgYSBtb2RlIGhhcyBhIGRlcGVuZGVuY3kgb24gaXQncyBwYXJlbnQgb3Igbm90XG4gKlxuICogSWYgYSBtb2RlIGRvZXMgaGF2ZSBhIHBhcmVudCBkZXBlbmRlbmN5IHRoZW4gb2Z0ZW4gd2UgbmVlZCB0byBjbG9uZSBpdCBpZlxuICogaXQncyB1c2VkIGluIG11bHRpcGxlIHBsYWNlcyBzbyB0aGF0IGVhY2ggY29weSBwb2ludHMgdG8gdGhlIGNvcnJlY3QgcGFyZW50LFxuICogd2hlcmUtYXMgbW9kZXMgd2l0aG91dCBhIHBhcmVudCBjYW4gb2Z0ZW4gc2FmZWx5IGJlIHJlLXVzZWQgYXQgdGhlIGJvdHRvbSBvZlxuICogYSBtb2RlIGNoYWluLlxuICpcbiAqIEBwYXJhbSB7TW9kZSB8IG51bGx9IG1vZGVcbiAqIEByZXR1cm5zIHtib29sZWFufSAtIGlzIHRoZXJlIGEgZGVwZW5kZW5jeSBvbiB0aGUgcGFyZW50P1xuICogKi9cbmZ1bmN0aW9uIGRlcGVuZGVuY3lPblBhcmVudChtb2RlKSB7XG4gIGlmICghbW9kZSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiBtb2RlLmVuZHNXaXRoUGFyZW50IHx8IGRlcGVuZGVuY3lPblBhcmVudChtb2RlLnN0YXJ0cyk7XG59XG5cbi8qKlxuICogRXhwYW5kcyBhIG1vZGUgb3IgY2xvbmVzIGl0IGlmIG5lY2Vzc2FyeVxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGZvciBtb2RlcyB3aXRoIHBhcmVudGFsIGRlcGVuZGVuY2VpcyAoc2VlIG5vdGVzIG9uXG4gKiBgZGVwZW5kZW5jeU9uUGFyZW50YCkgYW5kIGZvciBub2RlcyB0aGF0IGhhdmUgYHZhcmlhbnRzYCAtIHdoaWNoIG11c3QgdGhlbiBiZVxuICogZXhwbG9kZWQgaW50byB0aGVpciBvd24gaW5kaXZpZHVhbCBtb2RlcyBhdCBjb21waWxlIHRpbWUuXG4gKlxuICogQHBhcmFtIHtNb2RlfSBtb2RlXG4gKiBAcmV0dXJucyB7TW9kZSB8IE1vZGVbXX1cbiAqICovXG5mdW5jdGlvbiBleHBhbmRPckNsb25lTW9kZShtb2RlKSB7XG4gIGlmIChtb2RlLnZhcmlhbnRzICYmICFtb2RlLmNhY2hlZFZhcmlhbnRzKSB7XG4gICAgbW9kZS5jYWNoZWRWYXJpYW50cyA9IG1vZGUudmFyaWFudHMubWFwKGZ1bmN0aW9uKHZhcmlhbnQpIHtcbiAgICAgIHJldHVybiBpbmhlcml0JDEobW9kZSwgeyB2YXJpYW50czogbnVsbCB9LCB2YXJpYW50KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIEVYUEFORFxuICAvLyBpZiB3ZSBoYXZlIHZhcmlhbnRzIHRoZW4gZXNzZW50aWFsbHkgXCJyZXBsYWNlXCIgdGhlIG1vZGUgd2l0aCB0aGUgdmFyaWFudHNcbiAgLy8gdGhpcyBoYXBwZW5zIGluIGNvbXBpbGVNb2RlLCB3aGVyZSB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBmcm9tXG4gIGlmIChtb2RlLmNhY2hlZFZhcmlhbnRzKSB7XG4gICAgcmV0dXJuIG1vZGUuY2FjaGVkVmFyaWFudHM7XG4gIH1cblxuICAvLyBDTE9ORVxuICAvLyBpZiB3ZSBoYXZlIGRlcGVuZGVuY2llcyBvbiBwYXJlbnRzIHRoZW4gd2UgbmVlZCBhIHVuaXF1ZVxuICAvLyBpbnN0YW5jZSBvZiBvdXJzZWx2ZXMsIHNvIHdlIGNhbiBiZSByZXVzZWQgd2l0aCBtYW55XG4gIC8vIGRpZmZlcmVudCBwYXJlbnRzIHdpdGhvdXQgaXNzdWVcbiAgaWYgKGRlcGVuZGVuY3lPblBhcmVudChtb2RlKSkge1xuICAgIHJldHVybiBpbmhlcml0JDEobW9kZSwgeyBzdGFydHM6IG1vZGUuc3RhcnRzID8gaW5oZXJpdCQxKG1vZGUuc3RhcnRzKSA6IG51bGwgfSk7XG4gIH1cblxuICBpZiAoT2JqZWN0LmlzRnJvemVuKG1vZGUpKSB7XG4gICAgcmV0dXJuIGluaGVyaXQkMShtb2RlKTtcbiAgfVxuXG4gIC8vIG5vIHNwZWNpYWwgZGVwZW5kZW5jeSBpc3N1ZXMsIGp1c3QgcmV0dXJuIG91cnNlbHZlc1xuICByZXR1cm4gbW9kZTtcbn1cblxudmFyIHZlcnNpb24gPSBcIjExLjExLjFcIjtcblxuY2xhc3MgSFRNTEluamVjdGlvbkVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihyZWFzb24sIGh0bWwpIHtcbiAgICBzdXBlcihyZWFzb24pO1xuICAgIHRoaXMubmFtZSA9IFwiSFRNTEluamVjdGlvbkVycm9yXCI7XG4gICAgdGhpcy5odG1sID0gaHRtbDtcbiAgfVxufVxuXG4vKlxuU3ludGF4IGhpZ2hsaWdodGluZyB3aXRoIGxhbmd1YWdlIGF1dG9kZXRlY3Rpb24uXG5odHRwczovL2hpZ2hsaWdodGpzLm9yZy9cbiovXG5cblxuXG4vKipcbkB0eXBlZGVmIHtpbXBvcnQoJ2hpZ2hsaWdodC5qcycpLk1vZGV9IE1vZGVcbkB0eXBlZGVmIHtpbXBvcnQoJ2hpZ2hsaWdodC5qcycpLkNvbXBpbGVkTW9kZX0gQ29tcGlsZWRNb2RlXG5AdHlwZWRlZiB7aW1wb3J0KCdoaWdobGlnaHQuanMnKS5Db21waWxlZFNjb3BlfSBDb21waWxlZFNjb3BlXG5AdHlwZWRlZiB7aW1wb3J0KCdoaWdobGlnaHQuanMnKS5MYW5ndWFnZX0gTGFuZ3VhZ2VcbkB0eXBlZGVmIHtpbXBvcnQoJ2hpZ2hsaWdodC5qcycpLkhMSlNBcGl9IEhMSlNBcGlcbkB0eXBlZGVmIHtpbXBvcnQoJ2hpZ2hsaWdodC5qcycpLkhMSlNQbHVnaW59IEhMSlNQbHVnaW5cbkB0eXBlZGVmIHtpbXBvcnQoJ2hpZ2hsaWdodC5qcycpLlBsdWdpbkV2ZW50fSBQbHVnaW5FdmVudFxuQHR5cGVkZWYge2ltcG9ydCgnaGlnaGxpZ2h0LmpzJykuSExKU09wdGlvbnN9IEhMSlNPcHRpb25zXG5AdHlwZWRlZiB7aW1wb3J0KCdoaWdobGlnaHQuanMnKS5MYW5ndWFnZUZufSBMYW5ndWFnZUZuXG5AdHlwZWRlZiB7aW1wb3J0KCdoaWdobGlnaHQuanMnKS5IaWdobGlnaHRlZEhUTUxFbGVtZW50fSBIaWdobGlnaHRlZEhUTUxFbGVtZW50XG5AdHlwZWRlZiB7aW1wb3J0KCdoaWdobGlnaHQuanMnKS5CZWZvcmVIaWdobGlnaHRDb250ZXh0fSBCZWZvcmVIaWdobGlnaHRDb250ZXh0XG5AdHlwZWRlZiB7aW1wb3J0KCdoaWdobGlnaHQuanMvcHJpdmF0ZScpLk1hdGNoVHlwZX0gTWF0Y2hUeXBlXG5AdHlwZWRlZiB7aW1wb3J0KCdoaWdobGlnaHQuanMvcHJpdmF0ZScpLktleXdvcmREYXRhfSBLZXl3b3JkRGF0YVxuQHR5cGVkZWYge2ltcG9ydCgnaGlnaGxpZ2h0LmpzL3ByaXZhdGUnKS5FbmhhbmNlZE1hdGNofSBFbmhhbmNlZE1hdGNoXG5AdHlwZWRlZiB7aW1wb3J0KCdoaWdobGlnaHQuanMvcHJpdmF0ZScpLkFubm90YXRlZEVycm9yfSBBbm5vdGF0ZWRFcnJvclxuQHR5cGVkZWYge2ltcG9ydCgnaGlnaGxpZ2h0LmpzJykuQXV0b0hpZ2hsaWdodFJlc3VsdH0gQXV0b0hpZ2hsaWdodFJlc3VsdFxuQHR5cGVkZWYge2ltcG9ydCgnaGlnaGxpZ2h0LmpzJykuSGlnaGxpZ2h0T3B0aW9uc30gSGlnaGxpZ2h0T3B0aW9uc1xuQHR5cGVkZWYge2ltcG9ydCgnaGlnaGxpZ2h0LmpzJykuSGlnaGxpZ2h0UmVzdWx0fSBIaWdobGlnaHRSZXN1bHRcbiovXG5cblxuY29uc3QgZXNjYXBlID0gZXNjYXBlSFRNTDtcbmNvbnN0IGluaGVyaXQgPSBpbmhlcml0JDE7XG5jb25zdCBOT19NQVRDSCA9IFN5bWJvbChcIm5vbWF0Y2hcIik7XG5jb25zdCBNQVhfS0VZV09SRF9ISVRTID0gNztcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gaGxqcyAtIG9iamVjdCB0aGF0IGlzIGV4dGVuZGVkIChsZWdhY3kpXG4gKiBAcmV0dXJucyB7SExKU0FwaX1cbiAqL1xuY29uc3QgSExKUyA9IGZ1bmN0aW9uKGhsanMpIHtcbiAgLy8gR2xvYmFsIGludGVybmFsIHZhcmlhYmxlcyB1c2VkIHdpdGhpbiB0aGUgaGlnaGxpZ2h0LmpzIGxpYnJhcnkuXG4gIC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgTGFuZ3VhZ2U+fSAqL1xuICBjb25zdCBsYW5ndWFnZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIHN0cmluZz59ICovXG4gIGNvbnN0IGFsaWFzZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvKiogQHR5cGUge0hMSlNQbHVnaW5bXX0gKi9cbiAgY29uc3QgcGx1Z2lucyA9IFtdO1xuXG4gIC8vIHNhZmUvcHJvZHVjdGlvbiBtb2RlIC0gc3dhbGxvd3MgbW9yZSBlcnJvcnMsIHRyaWVzIHRvIGtlZXAgcnVubmluZ1xuICAvLyBldmVuIGlmIGEgc2luZ2xlIHN5bnRheCBvciBwYXJzZSBoaXRzIGEgZmF0YWwgZXJyb3JcbiAgbGV0IFNBRkVfTU9ERSA9IHRydWU7XG4gIGNvbnN0IExBTkdVQUdFX05PVF9GT1VORCA9IFwiQ291bGQgbm90IGZpbmQgdGhlIGxhbmd1YWdlICd7fScsIGRpZCB5b3UgZm9yZ2V0IHRvIGxvYWQvaW5jbHVkZSBhIGxhbmd1YWdlIG1vZHVsZT9cIjtcbiAgLyoqIEB0eXBlIHtMYW5ndWFnZX0gKi9cbiAgY29uc3QgUExBSU5URVhUX0xBTkdVQUdFID0geyBkaXNhYmxlQXV0b2RldGVjdDogdHJ1ZSwgbmFtZTogJ1BsYWluIHRleHQnLCBjb250YWluczogW10gfTtcblxuICAvLyBHbG9iYWwgb3B0aW9ucyB1c2VkIHdoZW4gd2l0aGluIGV4dGVybmFsIEFQSXMuIFRoaXMgaXMgbW9kaWZpZWQgd2hlblxuICAvLyBjYWxsaW5nIHRoZSBgaGxqcy5jb25maWd1cmVgIGZ1bmN0aW9uLlxuICAvKiogQHR5cGUgSExKU09wdGlvbnMgKi9cbiAgbGV0IG9wdGlvbnMgPSB7XG4gICAgaWdub3JlVW5lc2NhcGVkSFRNTDogZmFsc2UsXG4gICAgdGhyb3dVbmVzY2FwZWRIVE1MOiBmYWxzZSxcbiAgICBub0hpZ2hsaWdodFJlOiAvXihuby0/aGlnaGxpZ2h0KSQvaSxcbiAgICBsYW5ndWFnZURldGVjdFJlOiAvXFxibGFuZyg/OnVhZ2UpPy0oW1xcdy1dKylcXGIvaSxcbiAgICBjbGFzc1ByZWZpeDogJ2hsanMtJyxcbiAgICBjc3NTZWxlY3RvcjogJ3ByZSBjb2RlJyxcbiAgICBsYW5ndWFnZXM6IG51bGwsXG4gICAgLy8gYmV0YSBjb25maWd1cmF0aW9uIG9wdGlvbnMsIHN1YmplY3QgdG8gY2hhbmdlLCB3ZWxjb21lIHRvIGRpc2N1c3NcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vaGlnaGxpZ2h0anMvaGlnaGxpZ2h0LmpzL2lzc3Vlcy8xMDg2XG4gICAgX19lbWl0dGVyOiBUb2tlblRyZWVFbWl0dGVyXG4gIH07XG5cbiAgLyogVXRpbGl0eSBmdW5jdGlvbnMgKi9cblxuICAvKipcbiAgICogVGVzdHMgYSBsYW5ndWFnZSBuYW1lIHRvIHNlZSBpZiBoaWdobGlnaHRpbmcgc2hvdWxkIGJlIHNraXBwZWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxhbmd1YWdlTmFtZVxuICAgKi9cbiAgZnVuY3Rpb24gc2hvdWxkTm90SGlnaGxpZ2h0KGxhbmd1YWdlTmFtZSkge1xuICAgIHJldHVybiBvcHRpb25zLm5vSGlnaGxpZ2h0UmUudGVzdChsYW5ndWFnZU5hbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SGlnaGxpZ2h0ZWRIVE1MRWxlbWVudH0gYmxvY2sgLSB0aGUgSFRNTCBlbGVtZW50IHRvIGRldGVybWluZSBsYW5ndWFnZSBmb3JcbiAgICovXG4gIGZ1bmN0aW9uIGJsb2NrTGFuZ3VhZ2UoYmxvY2spIHtcbiAgICBsZXQgY2xhc3NlcyA9IGJsb2NrLmNsYXNzTmFtZSArICcgJztcblxuICAgIGNsYXNzZXMgKz0gYmxvY2sucGFyZW50Tm9kZSA/IGJsb2NrLnBhcmVudE5vZGUuY2xhc3NOYW1lIDogJyc7XG5cbiAgICAvLyBsYW5ndWFnZS0qIHRha2VzIHByZWNlZGVuY2Ugb3ZlciBub24tcHJlZml4ZWQgY2xhc3MgbmFtZXMuXG4gICAgY29uc3QgbWF0Y2ggPSBvcHRpb25zLmxhbmd1YWdlRGV0ZWN0UmUuZXhlYyhjbGFzc2VzKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIGNvbnN0IGxhbmd1YWdlID0gZ2V0TGFuZ3VhZ2UobWF0Y2hbMV0pO1xuICAgICAgaWYgKCFsYW5ndWFnZSkge1xuICAgICAgICB3YXJuKExBTkdVQUdFX05PVF9GT1VORC5yZXBsYWNlKFwie31cIiwgbWF0Y2hbMV0pKTtcbiAgICAgICAgd2FybihcIkZhbGxpbmcgYmFjayB0byBuby1oaWdobGlnaHQgbW9kZSBmb3IgdGhpcyBibG9jay5cIiwgYmxvY2spO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxhbmd1YWdlID8gbWF0Y2hbMV0gOiAnbm8taGlnaGxpZ2h0JztcbiAgICB9XG5cbiAgICByZXR1cm4gY2xhc3Nlc1xuICAgICAgLnNwbGl0KC9cXHMrLylcbiAgICAgIC5maW5kKChfY2xhc3MpID0+IHNob3VsZE5vdEhpZ2hsaWdodChfY2xhc3MpIHx8IGdldExhbmd1YWdlKF9jbGFzcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvcmUgaGlnaGxpZ2h0aW5nIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBPTEQgQVBJXG4gICAqIGhpZ2hsaWdodChsYW5nLCBjb2RlLCBpZ25vcmVJbGxlZ2FscywgY29udGludWF0aW9uKVxuICAgKlxuICAgKiBORVcgQVBJXG4gICAqIGhpZ2hsaWdodChjb2RlLCB7bGFuZywgaWdub3JlSWxsZWdhbHN9KVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29kZU9yTGFuZ3VhZ2VOYW1lIC0gdGhlIGxhbmd1YWdlIHRvIHVzZSBmb3IgaGlnaGxpZ2h0aW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgSGlnaGxpZ2h0T3B0aW9uc30gb3B0aW9uc09yQ29kZSAtIHRoZSBjb2RlIHRvIGhpZ2hsaWdodFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpZ25vcmVJbGxlZ2Fsc10gLSB3aGV0aGVyIHRvIGlnbm9yZSBpbGxlZ2FsIG1hdGNoZXMsIGRlZmF1bHQgaXMgdG8gYmFpbFxuICAgKlxuICAgKiBAcmV0dXJucyB7SGlnaGxpZ2h0UmVzdWx0fSBSZXN1bHQgLSBhbiBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSByZXN1bHRcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IGxhbmd1YWdlIC0gdGhlIGxhbmd1YWdlIG5hbWVcbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IHJlbGV2YW5jZSAtIHRoZSByZWxldmFuY2Ugc2NvcmVcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IHZhbHVlIC0gdGhlIGhpZ2hsaWdodGVkIEhUTUwgY29kZVxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gY29kZSAtIHRoZSBvcmlnaW5hbCByYXcgY29kZVxuICAgKiBAcHJvcGVydHkge0NvbXBpbGVkTW9kZX0gdG9wIC0gdG9wIG9mIHRoZSBjdXJyZW50IG1vZGUgc3RhY2tcbiAgICogQHByb3BlcnR5IHtib29sZWFufSBpbGxlZ2FsIC0gaW5kaWNhdGVzIHdoZXRoZXIgYW55IGlsbGVnYWwgbWF0Y2hlcyB3ZXJlIGZvdW5kXG4gICovXG4gIGZ1bmN0aW9uIGhpZ2hsaWdodChjb2RlT3JMYW5ndWFnZU5hbWUsIG9wdGlvbnNPckNvZGUsIGlnbm9yZUlsbGVnYWxzKSB7XG4gICAgbGV0IGNvZGUgPSBcIlwiO1xuICAgIGxldCBsYW5ndWFnZU5hbWUgPSBcIlwiO1xuICAgIGlmICh0eXBlb2Ygb3B0aW9uc09yQ29kZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgY29kZSA9IGNvZGVPckxhbmd1YWdlTmFtZTtcbiAgICAgIGlnbm9yZUlsbGVnYWxzID0gb3B0aW9uc09yQ29kZS5pZ25vcmVJbGxlZ2FscztcbiAgICAgIGxhbmd1YWdlTmFtZSA9IG9wdGlvbnNPckNvZGUubGFuZ3VhZ2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG9sZCBBUElcbiAgICAgIGRlcHJlY2F0ZWQoXCIxMC43LjBcIiwgXCJoaWdobGlnaHQobGFuZywgY29kZSwgLi4uYXJncykgaGFzIGJlZW4gZGVwcmVjYXRlZC5cIik7XG4gICAgICBkZXByZWNhdGVkKFwiMTAuNy4wXCIsIFwiUGxlYXNlIHVzZSBoaWdobGlnaHQoY29kZSwgb3B0aW9ucykgaW5zdGVhZC5cXG5odHRwczovL2dpdGh1Yi5jb20vaGlnaGxpZ2h0anMvaGlnaGxpZ2h0LmpzL2lzc3Vlcy8yMjc3XCIpO1xuICAgICAgbGFuZ3VhZ2VOYW1lID0gY29kZU9yTGFuZ3VhZ2VOYW1lO1xuICAgICAgY29kZSA9IG9wdGlvbnNPckNvZGU7XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2hpZ2hsaWdodGpzL2hpZ2hsaWdodC5qcy9pc3N1ZXMvMzE0OVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZmluZWRcbiAgICBpZiAoaWdub3JlSWxsZWdhbHMgPT09IHVuZGVmaW5lZCkgeyBpZ25vcmVJbGxlZ2FscyA9IHRydWU7IH1cblxuICAgIC8qKiBAdHlwZSB7QmVmb3JlSGlnaGxpZ2h0Q29udGV4dH0gKi9cbiAgICBjb25zdCBjb250ZXh0ID0ge1xuICAgICAgY29kZSxcbiAgICAgIGxhbmd1YWdlOiBsYW5ndWFnZU5hbWVcbiAgICB9O1xuICAgIC8vIHRoZSBwbHVnaW4gY2FuIGNoYW5nZSB0aGUgZGVzaXJlZCBsYW5ndWFnZSBvciB0aGUgY29kZSB0byBiZSBoaWdobGlnaHRlZFxuICAgIC8vIGp1c3QgYmUgY2hhbmdpbmcgdGhlIG9iamVjdCBpdCB3YXMgcGFzc2VkXG4gICAgZmlyZShcImJlZm9yZTpoaWdobGlnaHRcIiwgY29udGV4dCk7XG5cbiAgICAvLyBhIGJlZm9yZSBwbHVnaW4gY2FuIHVzdXJwIHRoZSByZXN1bHQgY29tcGxldGVseSBieSBwcm92aWRpbmcgaXQncyBvd25cbiAgICAvLyBpbiB3aGljaCBjYXNlIHdlIGRvbid0IGV2ZW4gbmVlZCB0byBjYWxsIGhpZ2hsaWdodFxuICAgIGNvbnN0IHJlc3VsdCA9IGNvbnRleHQucmVzdWx0XG4gICAgICA/IGNvbnRleHQucmVzdWx0XG4gICAgICA6IF9oaWdobGlnaHQoY29udGV4dC5sYW5ndWFnZSwgY29udGV4dC5jb2RlLCBpZ25vcmVJbGxlZ2Fscyk7XG5cbiAgICByZXN1bHQuY29kZSA9IGNvbnRleHQuY29kZTtcbiAgICAvLyB0aGUgcGx1Z2luIGNhbiBjaGFuZ2UgYW55dGhpbmcgaW4gcmVzdWx0IHRvIHN1aXRlIGl0XG4gICAgZmlyZShcImFmdGVyOmhpZ2hsaWdodFwiLCByZXN1bHQpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBwcml2YXRlIGhpZ2hsaWdodCB0aGF0J3MgdXNlZCBpbnRlcm5hbGx5IGFuZCBkb2VzIG5vdCBmaXJlIGNhbGxiYWNrc1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGFuZ3VhZ2VOYW1lIC0gdGhlIGxhbmd1YWdlIHRvIHVzZSBmb3IgaGlnaGxpZ2h0aW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb2RlVG9IaWdobGlnaHQgLSB0aGUgY29kZSB0byBoaWdobGlnaHRcbiAgICogQHBhcmFtIHtib29sZWFuP30gW2lnbm9yZUlsbGVnYWxzXSAtIHdoZXRoZXIgdG8gaWdub3JlIGlsbGVnYWwgbWF0Y2hlcywgZGVmYXVsdCBpcyB0byBiYWlsXG4gICAqIEBwYXJhbSB7Q29tcGlsZWRNb2RlP30gW2NvbnRpbnVhdGlvbl0gLSBjdXJyZW50IGNvbnRpbnVhdGlvbiBtb2RlLCBpZiBhbnlcbiAgICogQHJldHVybnMge0hpZ2hsaWdodFJlc3VsdH0gLSByZXN1bHQgb2YgdGhlIGhpZ2hsaWdodCBvcGVyYXRpb25cbiAgKi9cbiAgZnVuY3Rpb24gX2hpZ2hsaWdodChsYW5ndWFnZU5hbWUsIGNvZGVUb0hpZ2hsaWdodCwgaWdub3JlSWxsZWdhbHMsIGNvbnRpbnVhdGlvbikge1xuICAgIGNvbnN0IGtleXdvcmRIaXRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBrZXl3b3JkIGRhdGEgaWYgYSBtYXRjaCBpcyBhIGtleXdvcmRcbiAgICAgKiBAcGFyYW0ge0NvbXBpbGVkTW9kZX0gbW9kZSAtIGN1cnJlbnQgbW9kZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtYXRjaFRleHQgLSB0aGUgdGV4dHVhbCBtYXRjaFxuICAgICAqIEByZXR1cm5zIHtLZXl3b3JkRGF0YSB8IGZhbHNlfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXdvcmREYXRhKG1vZGUsIG1hdGNoVGV4dCkge1xuICAgICAgcmV0dXJuIG1vZGUua2V5d29yZHNbbWF0Y2hUZXh0XTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzS2V5d29yZHMoKSB7XG4gICAgICBpZiAoIXRvcC5rZXl3b3Jkcykge1xuICAgICAgICBlbWl0dGVyLmFkZFRleHQobW9kZUJ1ZmZlcik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbGV0IGxhc3RJbmRleCA9IDA7XG4gICAgICB0b3Aua2V5d29yZFBhdHRlcm5SZS5sYXN0SW5kZXggPSAwO1xuICAgICAgbGV0IG1hdGNoID0gdG9wLmtleXdvcmRQYXR0ZXJuUmUuZXhlYyhtb2RlQnVmZmVyKTtcbiAgICAgIGxldCBidWYgPSBcIlwiO1xuXG4gICAgICB3aGlsZSAobWF0Y2gpIHtcbiAgICAgICAgYnVmICs9IG1vZGVCdWZmZXIuc3Vic3RyaW5nKGxhc3RJbmRleCwgbWF0Y2guaW5kZXgpO1xuICAgICAgICBjb25zdCB3b3JkID0gbGFuZ3VhZ2UuY2FzZV9pbnNlbnNpdGl2ZSA/IG1hdGNoWzBdLnRvTG93ZXJDYXNlKCkgOiBtYXRjaFswXTtcbiAgICAgICAgY29uc3QgZGF0YSA9IGtleXdvcmREYXRhKHRvcCwgd29yZCk7XG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgY29uc3QgW2tpbmQsIGtleXdvcmRSZWxldmFuY2VdID0gZGF0YTtcbiAgICAgICAgICBlbWl0dGVyLmFkZFRleHQoYnVmKTtcbiAgICAgICAgICBidWYgPSBcIlwiO1xuXG4gICAgICAgICAga2V5d29yZEhpdHNbd29yZF0gPSAoa2V5d29yZEhpdHNbd29yZF0gfHwgMCkgKyAxO1xuICAgICAgICAgIGlmIChrZXl3b3JkSGl0c1t3b3JkXSA8PSBNQVhfS0VZV09SRF9ISVRTKSByZWxldmFuY2UgKz0ga2V5d29yZFJlbGV2YW5jZTtcbiAgICAgICAgICBpZiAoa2luZC5zdGFydHNXaXRoKFwiX1wiKSkge1xuICAgICAgICAgICAgLy8gXyBpbXBsaWVkIGZvciByZWxldmFuY2Ugb25seSwgZG8gbm90IGhpZ2hsaWdodFxuICAgICAgICAgICAgLy8gYnkgYXBwbHlpbmcgYSBjbGFzcyBuYW1lXG4gICAgICAgICAgICBidWYgKz0gbWF0Y2hbMF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNzc0NsYXNzID0gbGFuZ3VhZ2UuY2xhc3NOYW1lQWxpYXNlc1traW5kXSB8fCBraW5kO1xuICAgICAgICAgICAgZW1pdEtleXdvcmQobWF0Y2hbMF0sIGNzc0NsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnVmICs9IG1hdGNoWzBdO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RJbmRleCA9IHRvcC5rZXl3b3JkUGF0dGVyblJlLmxhc3RJbmRleDtcbiAgICAgICAgbWF0Y2ggPSB0b3Aua2V5d29yZFBhdHRlcm5SZS5leGVjKG1vZGVCdWZmZXIpO1xuICAgICAgfVxuICAgICAgYnVmICs9IG1vZGVCdWZmZXIuc3Vic3RyaW5nKGxhc3RJbmRleCk7XG4gICAgICBlbWl0dGVyLmFkZFRleHQoYnVmKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzU3ViTGFuZ3VhZ2UoKSB7XG4gICAgICBpZiAobW9kZUJ1ZmZlciA9PT0gXCJcIikgcmV0dXJuO1xuICAgICAgLyoqIEB0eXBlIEhpZ2hsaWdodFJlc3VsdCAqL1xuICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG5cbiAgICAgIGlmICh0eXBlb2YgdG9wLnN1Ykxhbmd1YWdlID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoIWxhbmd1YWdlc1t0b3Auc3ViTGFuZ3VhZ2VdKSB7XG4gICAgICAgICAgZW1pdHRlci5hZGRUZXh0KG1vZGVCdWZmZXIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSBfaGlnaGxpZ2h0KHRvcC5zdWJMYW5ndWFnZSwgbW9kZUJ1ZmZlciwgdHJ1ZSwgY29udGludWF0aW9uc1t0b3Auc3ViTGFuZ3VhZ2VdKTtcbiAgICAgICAgY29udGludWF0aW9uc1t0b3Auc3ViTGFuZ3VhZ2VdID0gLyoqIEB0eXBlIHtDb21waWxlZE1vZGV9ICovIChyZXN1bHQuX3RvcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBoaWdobGlnaHRBdXRvKG1vZGVCdWZmZXIsIHRvcC5zdWJMYW5ndWFnZS5sZW5ndGggPyB0b3Auc3ViTGFuZ3VhZ2UgOiBudWxsKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ291bnRpbmcgZW1iZWRkZWQgbGFuZ3VhZ2Ugc2NvcmUgdG93YXJkcyB0aGUgaG9zdCBsYW5ndWFnZSBtYXkgYmUgZGlzYWJsZWRcbiAgICAgIC8vIHdpdGggemVyb2luZyB0aGUgY29udGFpbmluZyBtb2RlIHJlbGV2YW5jZS4gVXNlIGNhc2UgaW4gcG9pbnQgaXMgTWFya2Rvd24gdGhhdFxuICAgICAgLy8gYWxsb3dzIFhNTCBldmVyeXdoZXJlIGFuZCBtYWtlcyBldmVyeSBYTUwgc25pcHBldCB0byBoYXZlIGEgbXVjaCBsYXJnZXIgTWFya2Rvd25cbiAgICAgIC8vIHNjb3JlLlxuICAgICAgaWYgKHRvcC5yZWxldmFuY2UgPiAwKSB7XG4gICAgICAgIHJlbGV2YW5jZSArPSByZXN1bHQucmVsZXZhbmNlO1xuICAgICAgfVxuICAgICAgZW1pdHRlci5fX2FkZFN1Ymxhbmd1YWdlKHJlc3VsdC5fZW1pdHRlciwgcmVzdWx0Lmxhbmd1YWdlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzQnVmZmVyKCkge1xuICAgICAgaWYgKHRvcC5zdWJMYW5ndWFnZSAhPSBudWxsKSB7XG4gICAgICAgIHByb2Nlc3NTdWJMYW5ndWFnZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzc0tleXdvcmRzKCk7XG4gICAgICB9XG4gICAgICBtb2RlQnVmZmVyID0gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2NvcGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlbWl0S2V5d29yZChrZXl3b3JkLCBzY29wZSkge1xuICAgICAgaWYgKGtleXdvcmQgPT09IFwiXCIpIHJldHVybjtcblxuICAgICAgZW1pdHRlci5zdGFydFNjb3BlKHNjb3BlKTtcbiAgICAgIGVtaXR0ZXIuYWRkVGV4dChrZXl3b3JkKTtcbiAgICAgIGVtaXR0ZXIuZW5kU2NvcGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0NvbXBpbGVkU2NvcGV9IHNjb3BlXG4gICAgICogQHBhcmFtIHtSZWdFeHBNYXRjaEFycmF5fSBtYXRjaFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVtaXRNdWx0aUNsYXNzKHNjb3BlLCBtYXRjaCkge1xuICAgICAgbGV0IGkgPSAxO1xuICAgICAgY29uc3QgbWF4ID0gbWF0Y2gubGVuZ3RoIC0gMTtcbiAgICAgIHdoaWxlIChpIDw9IG1heCkge1xuICAgICAgICBpZiAoIXNjb3BlLl9lbWl0W2ldKSB7IGkrKzsgY29udGludWU7IH1cbiAgICAgICAgY29uc3Qga2xhc3MgPSBsYW5ndWFnZS5jbGFzc05hbWVBbGlhc2VzW3Njb3BlW2ldXSB8fCBzY29wZVtpXTtcbiAgICAgICAgY29uc3QgdGV4dCA9IG1hdGNoW2ldO1xuICAgICAgICBpZiAoa2xhc3MpIHtcbiAgICAgICAgICBlbWl0S2V5d29yZCh0ZXh0LCBrbGFzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbW9kZUJ1ZmZlciA9IHRleHQ7XG4gICAgICAgICAgcHJvY2Vzc0tleXdvcmRzKCk7XG4gICAgICAgICAgbW9kZUJ1ZmZlciA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Q29tcGlsZWRNb2RlfSBtb2RlIC0gbmV3IG1vZGUgdG8gc3RhcnRcbiAgICAgKiBAcGFyYW0ge1JlZ0V4cE1hdGNoQXJyYXl9IG1hdGNoXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhcnROZXdNb2RlKG1vZGUsIG1hdGNoKSB7XG4gICAgICBpZiAobW9kZS5zY29wZSAmJiB0eXBlb2YgbW9kZS5zY29wZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBlbWl0dGVyLm9wZW5Ob2RlKGxhbmd1YWdlLmNsYXNzTmFtZUFsaWFzZXNbbW9kZS5zY29wZV0gfHwgbW9kZS5zY29wZSk7XG4gICAgICB9XG4gICAgICBpZiAobW9kZS5iZWdpblNjb3BlKSB7XG4gICAgICAgIC8vIGJlZ2luU2NvcGUganVzdCB3cmFwcyB0aGUgYmVnaW4gbWF0Y2ggaXRzZWxmIGluIGEgc2NvcGVcbiAgICAgICAgaWYgKG1vZGUuYmVnaW5TY29wZS5fd3JhcCkge1xuICAgICAgICAgIGVtaXRLZXl3b3JkKG1vZGVCdWZmZXIsIGxhbmd1YWdlLmNsYXNzTmFtZUFsaWFzZXNbbW9kZS5iZWdpblNjb3BlLl93cmFwXSB8fCBtb2RlLmJlZ2luU2NvcGUuX3dyYXApO1xuICAgICAgICAgIG1vZGVCdWZmZXIgPSBcIlwiO1xuICAgICAgICB9IGVsc2UgaWYgKG1vZGUuYmVnaW5TY29wZS5fbXVsdGkpIHtcbiAgICAgICAgICAvLyBhdCB0aGlzIHBvaW50IG1vZGVCdWZmZXIgc2hvdWxkIGp1c3QgYmUgdGhlIG1hdGNoXG4gICAgICAgICAgZW1pdE11bHRpQ2xhc3MobW9kZS5iZWdpblNjb3BlLCBtYXRjaCk7XG4gICAgICAgICAgbW9kZUJ1ZmZlciA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdG9wID0gT2JqZWN0LmNyZWF0ZShtb2RlLCB7IHBhcmVudDogeyB2YWx1ZTogdG9wIH0gfSk7XG4gICAgICByZXR1cm4gdG9wO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Q29tcGlsZWRNb2RlIH0gbW9kZSAtIHRoZSBtb2RlIHRvIHBvdGVudGlhbGx5IGVuZFxuICAgICAqIEBwYXJhbSB7UmVnRXhwTWF0Y2hBcnJheX0gbWF0Y2ggLSB0aGUgbGF0ZXN0IG1hdGNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1hdGNoUGx1c1JlbWFpbmRlciAtIG1hdGNoIHBsdXMgcmVtYWluZGVyIG9mIGNvbnRlbnRcbiAgICAgKiBAcmV0dXJucyB7Q29tcGlsZWRNb2RlIHwgdm9pZH0gLSB0aGUgbmV4dCBtb2RlLCBvciBpZiB2b2lkIGNvbnRpbnVlIG9uIGluIGN1cnJlbnQgbW9kZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVuZE9mTW9kZShtb2RlLCBtYXRjaCwgbWF0Y2hQbHVzUmVtYWluZGVyKSB7XG4gICAgICBsZXQgbWF0Y2hlZCA9IHN0YXJ0c1dpdGgobW9kZS5lbmRSZSwgbWF0Y2hQbHVzUmVtYWluZGVyKTtcblxuICAgICAgaWYgKG1hdGNoZWQpIHtcbiAgICAgICAgaWYgKG1vZGVbXCJvbjplbmRcIl0pIHtcbiAgICAgICAgICBjb25zdCByZXNwID0gbmV3IFJlc3BvbnNlKG1vZGUpO1xuICAgICAgICAgIG1vZGVbXCJvbjplbmRcIl0obWF0Y2gsIHJlc3ApO1xuICAgICAgICAgIGlmIChyZXNwLmlzTWF0Y2hJZ25vcmVkKSBtYXRjaGVkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWF0Y2hlZCkge1xuICAgICAgICAgIHdoaWxlIChtb2RlLmVuZHNQYXJlbnQgJiYgbW9kZS5wYXJlbnQpIHtcbiAgICAgICAgICAgIG1vZGUgPSBtb2RlLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGV2ZW4gaWYgb246ZW5kIGZpcmVzIGFuIGBpZ25vcmVgIGl0J3Mgc3RpbGwgcG9zc2libGVcbiAgICAgIC8vIHRoYXQgd2UgbWlnaHQgdHJpZ2dlciB0aGUgZW5kIG5vZGUgYmVjYXVzZSBvZiBhIHBhcmVudCBtb2RlXG4gICAgICBpZiAobW9kZS5lbmRzV2l0aFBhcmVudCkge1xuICAgICAgICByZXR1cm4gZW5kT2ZNb2RlKG1vZGUucGFyZW50LCBtYXRjaCwgbWF0Y2hQbHVzUmVtYWluZGVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgbWF0Y2hpbmcgYnV0IHRoZW4gaWdub3JpbmcgYSBzZXF1ZW5jZSBvZiB0ZXh0XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGV4ZW1lIC0gc3RyaW5nIGNvbnRhaW5pbmcgZnVsbCBtYXRjaCB0ZXh0XG4gICAgICovXG4gICAgZnVuY3Rpb24gZG9JZ25vcmUobGV4ZW1lKSB7XG4gICAgICBpZiAodG9wLm1hdGNoZXIucmVnZXhJbmRleCA9PT0gMCkge1xuICAgICAgICAvLyBubyBtb3JlIHJlZ2V4ZXMgdG8gcG90ZW50aWFsbHkgbWF0Y2ggaGVyZSwgc28gd2UgbW92ZSB0aGUgY3Vyc29yIGZvcndhcmQgb25lXG4gICAgICAgIC8vIHNwYWNlXG4gICAgICAgIG1vZGVCdWZmZXIgKz0gbGV4ZW1lWzBdO1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG5vIG5lZWQgdG8gbW92ZSB0aGUgY3Vyc29yLCB3ZSBzdGlsbCBoYXZlIGFkZGl0aW9uYWwgcmVnZXhlcyB0byB0cnkgYW5kXG4gICAgICAgIC8vIG1hdGNoIGF0IHRoaXMgdmVyeSBzcG90XG4gICAgICAgIHJlc3VtZVNjYW5BdFNhbWVQb3NpdGlvbiA9IHRydWU7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSB0aGUgc3RhcnQgb2YgYSBuZXcgcG90ZW50aWFsIG1vZGUgbWF0Y2hcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RW5oYW5jZWRNYXRjaH0gbWF0Y2ggLSB0aGUgY3VycmVudCBtYXRjaFxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IGhvdyBmYXIgdG8gYWR2YW5jZSB0aGUgcGFyc2UgY3Vyc29yXG4gICAgICovXG4gICAgZnVuY3Rpb24gZG9CZWdpbk1hdGNoKG1hdGNoKSB7XG4gICAgICBjb25zdCBsZXhlbWUgPSBtYXRjaFswXTtcbiAgICAgIGNvbnN0IG5ld01vZGUgPSBtYXRjaC5ydWxlO1xuXG4gICAgICBjb25zdCByZXNwID0gbmV3IFJlc3BvbnNlKG5ld01vZGUpO1xuICAgICAgLy8gZmlyc3QgaW50ZXJuYWwgYmVmb3JlIGNhbGxiYWNrcywgdGhlbiB0aGUgcHVibGljIG9uZXNcbiAgICAgIGNvbnN0IGJlZm9yZUNhbGxiYWNrcyA9IFtuZXdNb2RlLl9fYmVmb3JlQmVnaW4sIG5ld01vZGVbXCJvbjpiZWdpblwiXV07XG4gICAgICBmb3IgKGNvbnN0IGNiIG9mIGJlZm9yZUNhbGxiYWNrcykge1xuICAgICAgICBpZiAoIWNiKSBjb250aW51ZTtcbiAgICAgICAgY2IobWF0Y2gsIHJlc3ApO1xuICAgICAgICBpZiAocmVzcC5pc01hdGNoSWdub3JlZCkgcmV0dXJuIGRvSWdub3JlKGxleGVtZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXdNb2RlLnNraXApIHtcbiAgICAgICAgbW9kZUJ1ZmZlciArPSBsZXhlbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobmV3TW9kZS5leGNsdWRlQmVnaW4pIHtcbiAgICAgICAgICBtb2RlQnVmZmVyICs9IGxleGVtZTtcbiAgICAgICAgfVxuICAgICAgICBwcm9jZXNzQnVmZmVyKCk7XG4gICAgICAgIGlmICghbmV3TW9kZS5yZXR1cm5CZWdpbiAmJiAhbmV3TW9kZS5leGNsdWRlQmVnaW4pIHtcbiAgICAgICAgICBtb2RlQnVmZmVyID0gbGV4ZW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFydE5ld01vZGUobmV3TW9kZSwgbWF0Y2gpO1xuICAgICAgcmV0dXJuIG5ld01vZGUucmV0dXJuQmVnaW4gPyAwIDogbGV4ZW1lLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgdGhlIHBvdGVudGlhbCBlbmQgb2YgbW9kZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWdFeHBNYXRjaEFycmF5fSBtYXRjaCAtIHRoZSBjdXJyZW50IG1hdGNoXG4gICAgICovXG4gICAgZnVuY3Rpb24gZG9FbmRNYXRjaChtYXRjaCkge1xuICAgICAgY29uc3QgbGV4ZW1lID0gbWF0Y2hbMF07XG4gICAgICBjb25zdCBtYXRjaFBsdXNSZW1haW5kZXIgPSBjb2RlVG9IaWdobGlnaHQuc3Vic3RyaW5nKG1hdGNoLmluZGV4KTtcblxuICAgICAgY29uc3QgZW5kTW9kZSA9IGVuZE9mTW9kZSh0b3AsIG1hdGNoLCBtYXRjaFBsdXNSZW1haW5kZXIpO1xuICAgICAgaWYgKCFlbmRNb2RlKSB7IHJldHVybiBOT19NQVRDSDsgfVxuXG4gICAgICBjb25zdCBvcmlnaW4gPSB0b3A7XG4gICAgICBpZiAodG9wLmVuZFNjb3BlICYmIHRvcC5lbmRTY29wZS5fd3JhcCkge1xuICAgICAgICBwcm9jZXNzQnVmZmVyKCk7XG4gICAgICAgIGVtaXRLZXl3b3JkKGxleGVtZSwgdG9wLmVuZFNjb3BlLl93cmFwKTtcbiAgICAgIH0gZWxzZSBpZiAodG9wLmVuZFNjb3BlICYmIHRvcC5lbmRTY29wZS5fbXVsdGkpIHtcbiAgICAgICAgcHJvY2Vzc0J1ZmZlcigpO1xuICAgICAgICBlbWl0TXVsdGlDbGFzcyh0b3AuZW5kU2NvcGUsIG1hdGNoKTtcbiAgICAgIH0gZWxzZSBpZiAob3JpZ2luLnNraXApIHtcbiAgICAgICAgbW9kZUJ1ZmZlciArPSBsZXhlbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIShvcmlnaW4ucmV0dXJuRW5kIHx8IG9yaWdpbi5leGNsdWRlRW5kKSkge1xuICAgICAgICAgIG1vZGVCdWZmZXIgKz0gbGV4ZW1lO1xuICAgICAgICB9XG4gICAgICAgIHByb2Nlc3NCdWZmZXIoKTtcbiAgICAgICAgaWYgKG9yaWdpbi5leGNsdWRlRW5kKSB7XG4gICAgICAgICAgbW9kZUJ1ZmZlciA9IGxleGVtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZG8ge1xuICAgICAgICBpZiAodG9wLnNjb3BlKSB7XG4gICAgICAgICAgZW1pdHRlci5jbG9zZU5vZGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRvcC5za2lwICYmICF0b3Auc3ViTGFuZ3VhZ2UpIHtcbiAgICAgICAgICByZWxldmFuY2UgKz0gdG9wLnJlbGV2YW5jZTtcbiAgICAgICAgfVxuICAgICAgICB0b3AgPSB0b3AucGFyZW50O1xuICAgICAgfSB3aGlsZSAodG9wICE9PSBlbmRNb2RlLnBhcmVudCk7XG4gICAgICBpZiAoZW5kTW9kZS5zdGFydHMpIHtcbiAgICAgICAgc3RhcnROZXdNb2RlKGVuZE1vZGUuc3RhcnRzLCBtYXRjaCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3JpZ2luLnJldHVybkVuZCA/IDAgOiBsZXhlbWUubGVuZ3RoO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NDb250aW51YXRpb25zKCkge1xuICAgICAgY29uc3QgbGlzdCA9IFtdO1xuICAgICAgZm9yIChsZXQgY3VycmVudCA9IHRvcDsgY3VycmVudCAhPT0gbGFuZ3VhZ2U7IGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudCkge1xuICAgICAgICBpZiAoY3VycmVudC5zY29wZSkge1xuICAgICAgICAgIGxpc3QudW5zaGlmdChjdXJyZW50LnNjb3BlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5mb3JFYWNoKGl0ZW0gPT4gZW1pdHRlci5vcGVuTm9kZShpdGVtKSk7XG4gICAgfVxuXG4gICAgLyoqIEB0eXBlIHt7dHlwZT86IE1hdGNoVHlwZSwgaW5kZXg/OiBudW1iZXIsIHJ1bGU/OiBNb2RlfX19ICovXG4gICAgbGV0IGxhc3RNYXRjaCA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogIFByb2Nlc3MgYW4gaW5kaXZpZHVhbCBtYXRjaFxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRCZWZvcmVNYXRjaCAtIHRleHQgcHJlY2VkaW5nIHRoZSBtYXRjaCAoc2luY2UgdGhlIGxhc3QgbWF0Y2gpXG4gICAgICogQHBhcmFtIHtFbmhhbmNlZE1hdGNofSBbbWF0Y2hdIC0gdGhlIG1hdGNoIGl0c2VsZlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb2Nlc3NMZXhlbWUodGV4dEJlZm9yZU1hdGNoLCBtYXRjaCkge1xuICAgICAgY29uc3QgbGV4ZW1lID0gbWF0Y2ggJiYgbWF0Y2hbMF07XG5cbiAgICAgIC8vIGFkZCBub24tbWF0Y2hlZCB0ZXh0IHRvIHRoZSBjdXJyZW50IG1vZGUgYnVmZmVyXG4gICAgICBtb2RlQnVmZmVyICs9IHRleHRCZWZvcmVNYXRjaDtcblxuICAgICAgaWYgKGxleGVtZSA9PSBudWxsKSB7XG4gICAgICAgIHByb2Nlc3NCdWZmZXIoKTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIC8vIHdlJ3ZlIGZvdW5kIGEgMCB3aWR0aCBtYXRjaCBhbmQgd2UncmUgc3R1Y2ssIHNvIHdlIG5lZWQgdG8gYWR2YW5jZVxuICAgICAgLy8gdGhpcyBoYXBwZW5zIHdoZW4gd2UgaGF2ZSBiYWRseSBiZWhhdmVkIHJ1bGVzIHRoYXQgaGF2ZSBvcHRpb25hbCBtYXRjaGVycyB0byB0aGUgZGVncmVlIHRoYXRcbiAgICAgIC8vIHNvbWV0aW1lcyB0aGV5IGNhbiBlbmQgdXAgbWF0Y2hpbmcgbm90aGluZyBhdCBhbGxcbiAgICAgIC8vIFJlZjogaHR0cHM6Ly9naXRodWIuY29tL2hpZ2hsaWdodGpzL2hpZ2hsaWdodC5qcy9pc3N1ZXMvMjE0MFxuICAgICAgaWYgKGxhc3RNYXRjaC50eXBlID09PSBcImJlZ2luXCIgJiYgbWF0Y2gudHlwZSA9PT0gXCJlbmRcIiAmJiBsYXN0TWF0Y2guaW5kZXggPT09IG1hdGNoLmluZGV4ICYmIGxleGVtZSA9PT0gXCJcIikge1xuICAgICAgICAvLyBzcGl0IHRoZSBcInNraXBwZWRcIiBjaGFyYWN0ZXIgdGhhdCBvdXIgcmVnZXggY2hva2VkIG9uIGJhY2sgaW50byB0aGUgb3V0cHV0IHNlcXVlbmNlXG4gICAgICAgIG1vZGVCdWZmZXIgKz0gY29kZVRvSGlnaGxpZ2h0LnNsaWNlKG1hdGNoLmluZGV4LCBtYXRjaC5pbmRleCArIDEpO1xuICAgICAgICBpZiAoIVNBRkVfTU9ERSkge1xuICAgICAgICAgIC8qKiBAdHlwZSB7QW5ub3RhdGVkRXJyb3J9ICovXG4gICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKGAwIHdpZHRoIG1hdGNoIHJlZ2V4ICgke2xhbmd1YWdlTmFtZX0pYCk7XG4gICAgICAgICAgZXJyLmxhbmd1YWdlTmFtZSA9IGxhbmd1YWdlTmFtZTtcbiAgICAgICAgICBlcnIuYmFkUnVsZSA9IGxhc3RNYXRjaC5ydWxlO1xuICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICAgIGxhc3RNYXRjaCA9IG1hdGNoO1xuXG4gICAgICBpZiAobWF0Y2gudHlwZSA9PT0gXCJiZWdpblwiKSB7XG4gICAgICAgIHJldHVybiBkb0JlZ2luTWF0Y2gobWF0Y2gpO1xuICAgICAgfSBlbHNlIGlmIChtYXRjaC50eXBlID09PSBcImlsbGVnYWxcIiAmJiAhaWdub3JlSWxsZWdhbHMpIHtcbiAgICAgICAgLy8gaWxsZWdhbCBtYXRjaCwgd2UgZG8gbm90IGNvbnRpbnVlIHByb2Nlc3NpbmdcbiAgICAgICAgLyoqIEB0eXBlIHtBbm5vdGF0ZWRFcnJvcn0gKi9cbiAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKCdJbGxlZ2FsIGxleGVtZSBcIicgKyBsZXhlbWUgKyAnXCIgZm9yIG1vZGUgXCInICsgKHRvcC5zY29wZSB8fCAnPHVubmFtZWQ+JykgKyAnXCInKTtcbiAgICAgICAgZXJyLm1vZGUgPSB0b3A7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH0gZWxzZSBpZiAobWF0Y2gudHlwZSA9PT0gXCJlbmRcIikge1xuICAgICAgICBjb25zdCBwcm9jZXNzZWQgPSBkb0VuZE1hdGNoKG1hdGNoKTtcbiAgICAgICAgaWYgKHByb2Nlc3NlZCAhPT0gTk9fTUFUQ0gpIHtcbiAgICAgICAgICByZXR1cm4gcHJvY2Vzc2VkO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGVkZ2UgY2FzZSBmb3Igd2hlbiBpbGxlZ2FsIG1hdGNoZXMgJCAoZW5kIG9mIGxpbmUpIHdoaWNoIGlzIHRlY2huaWNhbGx5XG4gICAgICAvLyBhIDAgd2lkdGggbWF0Y2ggYnV0IG5vdCBhIGJlZ2luL2VuZCBtYXRjaCBzbyBpdCdzIG5vdCBjYXVnaHQgYnkgdGhlXG4gICAgICAvLyBmaXJzdCBoYW5kbGVyICh3aGVuIGlnbm9yZUlsbGVnYWxzIGlzIHRydWUpXG4gICAgICBpZiAobWF0Y2gudHlwZSA9PT0gXCJpbGxlZ2FsXCIgJiYgbGV4ZW1lID09PSBcIlwiKSB7XG4gICAgICAgIC8vIGFkdmFuY2Ugc28gd2UgYXJlbid0IHN0dWNrIGluIGFuIGluZmluaXRlIGxvb3BcbiAgICAgICAgbW9kZUJ1ZmZlciArPSBcIlxcblwiO1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cblxuICAgICAgLy8gaW5maW5pdGUgbG9vcHMgYXJlIEJBRCwgdGhpcyBpcyBhIGxhc3QgZGl0Y2ggY2F0Y2ggYWxsLiBpZiB3ZSBoYXZlIGFcbiAgICAgIC8vIGRlY2VudCBudW1iZXIgb2YgaXRlcmF0aW9ucyB5ZXQgb3VyIGluZGV4IChjdXJzb3IgcG9zaXRpb24gaW4gb3VyXG4gICAgICAvLyBwYXJzaW5nKSBzdGlsbCAzeCBiZWhpbmQgb3VyIGluZGV4IHRoZW4gc29tZXRoaW5nIGlzIHZlcnkgd3JvbmdcbiAgICAgIC8vIHNvIHdlIGJhaWxcbiAgICAgIGlmIChpdGVyYXRpb25zID4gMTAwMDAwICYmIGl0ZXJhdGlvbnMgPiBtYXRjaC5pbmRleCAqIDMpIHtcbiAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKCdwb3RlbnRpYWwgaW5maW5pdGUgbG9vcCwgd2F5IG1vcmUgaXRlcmF0aW9ucyB0aGFuIG1hdGNoZXMnKTtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuXG4gICAgICAvKlxuICAgICAgV2h5IG1pZ2h0IGJlIGZpbmQgb3Vyc2VsdmVzIGhlcmU/ICBBbiBwb3RlbnRpYWwgZW5kIG1hdGNoIHRoYXQgd2FzXG4gICAgICB0cmlnZ2VyZWQgYnV0IGNvdWxkIG5vdCBiZSBjb21wbGV0ZWQuICBJRSwgYGRvRW5kTWF0Y2hgIHJldHVybmVkIE5PX01BVENILlxuICAgICAgKHRoaXMgY291bGQgYmUgYmVjYXVzZSBhIGNhbGxiYWNrIHJlcXVlc3RzIHRoZSBtYXRjaCBiZSBpZ25vcmVkLCBldGMpXG5cbiAgICAgIFRoaXMgY2F1c2VzIG5vIHJlYWwgaGFybSBvdGhlciB0aGFuIHN0b3BwaW5nIGEgZmV3IHRpbWVzIHRvbyBtYW55LlxuICAgICAgKi9cblxuICAgICAgbW9kZUJ1ZmZlciArPSBsZXhlbWU7XG4gICAgICByZXR1cm4gbGV4ZW1lLmxlbmd0aDtcbiAgICB9XG5cbiAgICBjb25zdCBsYW5ndWFnZSA9IGdldExhbmd1YWdlKGxhbmd1YWdlTmFtZSk7XG4gICAgaWYgKCFsYW5ndWFnZSkge1xuICAgICAgZXJyb3IoTEFOR1VBR0VfTk9UX0ZPVU5ELnJlcGxhY2UoXCJ7fVwiLCBsYW5ndWFnZU5hbWUpKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBsYW5ndWFnZTogXCInICsgbGFuZ3VhZ2VOYW1lICsgJ1wiJyk7XG4gICAgfVxuXG4gICAgY29uc3QgbWQgPSBjb21waWxlTGFuZ3VhZ2UobGFuZ3VhZ2UpO1xuICAgIGxldCByZXN1bHQgPSAnJztcbiAgICAvKiogQHR5cGUge0NvbXBpbGVkTW9kZX0gKi9cbiAgICBsZXQgdG9wID0gY29udGludWF0aW9uIHx8IG1kO1xuICAgIC8qKiBAdHlwZSBSZWNvcmQ8c3RyaW5nLENvbXBpbGVkTW9kZT4gKi9cbiAgICBjb25zdCBjb250aW51YXRpb25zID0ge307IC8vIGtlZXAgY29udGludWF0aW9ucyBmb3Igc3ViLWxhbmd1YWdlc1xuICAgIGNvbnN0IGVtaXR0ZXIgPSBuZXcgb3B0aW9ucy5fX2VtaXR0ZXIob3B0aW9ucyk7XG4gICAgcHJvY2Vzc0NvbnRpbnVhdGlvbnMoKTtcbiAgICBsZXQgbW9kZUJ1ZmZlciA9ICcnO1xuICAgIGxldCByZWxldmFuY2UgPSAwO1xuICAgIGxldCBpbmRleCA9IDA7XG4gICAgbGV0IGl0ZXJhdGlvbnMgPSAwO1xuICAgIGxldCByZXN1bWVTY2FuQXRTYW1lUG9zaXRpb24gPSBmYWxzZTtcblxuICAgIHRyeSB7XG4gICAgICBpZiAoIWxhbmd1YWdlLl9fZW1pdFRva2Vucykge1xuICAgICAgICB0b3AubWF0Y2hlci5jb25zaWRlckFsbCgpO1xuXG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICBpdGVyYXRpb25zKys7XG4gICAgICAgICAgaWYgKHJlc3VtZVNjYW5BdFNhbWVQb3NpdGlvbikge1xuICAgICAgICAgICAgLy8gb25seSByZWdleGVzIG5vdCBtYXRjaGVkIHByZXZpb3VzbHkgd2lsbCBub3cgYmVcbiAgICAgICAgICAgIC8vIGNvbnNpZGVyZWQgZm9yIGEgcG90ZW50aWFsIG1hdGNoXG4gICAgICAgICAgICByZXN1bWVTY2FuQXRTYW1lUG9zaXRpb24gPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9wLm1hdGNoZXIuY29uc2lkZXJBbGwoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdG9wLm1hdGNoZXIubGFzdEluZGV4ID0gaW5kZXg7XG5cbiAgICAgICAgICBjb25zdCBtYXRjaCA9IHRvcC5tYXRjaGVyLmV4ZWMoY29kZVRvSGlnaGxpZ2h0KTtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIm1hdGNoXCIsIG1hdGNoWzBdLCBtYXRjaC5ydWxlICYmIG1hdGNoLnJ1bGUuYmVnaW4pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoKSBicmVhaztcblxuICAgICAgICAgIGNvbnN0IGJlZm9yZU1hdGNoID0gY29kZVRvSGlnaGxpZ2h0LnN1YnN0cmluZyhpbmRleCwgbWF0Y2guaW5kZXgpO1xuICAgICAgICAgIGNvbnN0IHByb2Nlc3NlZENvdW50ID0gcHJvY2Vzc0xleGVtZShiZWZvcmVNYXRjaCwgbWF0Y2gpO1xuICAgICAgICAgIGluZGV4ID0gbWF0Y2guaW5kZXggKyBwcm9jZXNzZWRDb3VudDtcbiAgICAgICAgfVxuICAgICAgICBwcm9jZXNzTGV4ZW1lKGNvZGVUb0hpZ2hsaWdodC5zdWJzdHJpbmcoaW5kZXgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxhbmd1YWdlLl9fZW1pdFRva2Vucyhjb2RlVG9IaWdobGlnaHQsIGVtaXR0ZXIpO1xuICAgICAgfVxuXG4gICAgICBlbWl0dGVyLmZpbmFsaXplKCk7XG4gICAgICByZXN1bHQgPSBlbWl0dGVyLnRvSFRNTCgpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBsYW5ndWFnZTogbGFuZ3VhZ2VOYW1lLFxuICAgICAgICB2YWx1ZTogcmVzdWx0LFxuICAgICAgICByZWxldmFuY2UsXG4gICAgICAgIGlsbGVnYWw6IGZhbHNlLFxuICAgICAgICBfZW1pdHRlcjogZW1pdHRlcixcbiAgICAgICAgX3RvcDogdG9wXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyci5tZXNzYWdlICYmIGVyci5tZXNzYWdlLmluY2x1ZGVzKCdJbGxlZ2FsJykpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsYW5ndWFnZTogbGFuZ3VhZ2VOYW1lLFxuICAgICAgICAgIHZhbHVlOiBlc2NhcGUoY29kZVRvSGlnaGxpZ2h0KSxcbiAgICAgICAgICBpbGxlZ2FsOiB0cnVlLFxuICAgICAgICAgIHJlbGV2YW5jZTogMCxcbiAgICAgICAgICBfaWxsZWdhbEJ5OiB7XG4gICAgICAgICAgICBtZXNzYWdlOiBlcnIubWVzc2FnZSxcbiAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgY29udGV4dDogY29kZVRvSGlnaGxpZ2h0LnNsaWNlKGluZGV4IC0gMTAwLCBpbmRleCArIDEwMCksXG4gICAgICAgICAgICBtb2RlOiBlcnIubW9kZSxcbiAgICAgICAgICAgIHJlc3VsdFNvRmFyOiByZXN1bHRcbiAgICAgICAgICB9LFxuICAgICAgICAgIF9lbWl0dGVyOiBlbWl0dGVyXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKFNBRkVfTU9ERSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxhbmd1YWdlOiBsYW5ndWFnZU5hbWUsXG4gICAgICAgICAgdmFsdWU6IGVzY2FwZShjb2RlVG9IaWdobGlnaHQpLFxuICAgICAgICAgIGlsbGVnYWw6IGZhbHNlLFxuICAgICAgICAgIHJlbGV2YW5jZTogMCxcbiAgICAgICAgICBlcnJvclJhaXNlZDogZXJyLFxuICAgICAgICAgIF9lbWl0dGVyOiBlbWl0dGVyLFxuICAgICAgICAgIF90b3A6IHRvcFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiByZXR1cm5zIGEgdmFsaWQgaGlnaGxpZ2h0IHJlc3VsdCwgd2l0aG91dCBhY3R1YWxseSBkb2luZyBhbnkgYWN0dWFsIHdvcmssXG4gICAqIGF1dG8gaGlnaGxpZ2h0IHN0YXJ0cyB3aXRoIHRoaXMgYW5kIGl0J3MgcG9zc2libGUgZm9yIHNtYWxsIHNuaXBwZXRzIHRoYXRcbiAgICogYXV0by1kZXRlY3Rpb24gbWF5IG5vdCBmaW5kIGEgYmV0dGVyIG1hdGNoXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb2RlXG4gICAqIEByZXR1cm5zIHtIaWdobGlnaHRSZXN1bHR9XG4gICAqL1xuICBmdW5jdGlvbiBqdXN0VGV4dEhpZ2hsaWdodFJlc3VsdChjb2RlKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgdmFsdWU6IGVzY2FwZShjb2RlKSxcbiAgICAgIGlsbGVnYWw6IGZhbHNlLFxuICAgICAgcmVsZXZhbmNlOiAwLFxuICAgICAgX3RvcDogUExBSU5URVhUX0xBTkdVQUdFLFxuICAgICAgX2VtaXR0ZXI6IG5ldyBvcHRpb25zLl9fZW1pdHRlcihvcHRpb25zKVxuICAgIH07XG4gICAgcmVzdWx0Ll9lbWl0dGVyLmFkZFRleHQoY29kZSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICBIaWdobGlnaHRpbmcgd2l0aCBsYW5ndWFnZSBkZXRlY3Rpb24uIEFjY2VwdHMgYSBzdHJpbmcgd2l0aCB0aGUgY29kZSB0b1xuICBoaWdobGlnaHQuIFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuXG4gIC0gbGFuZ3VhZ2UgKGRldGVjdGVkIGxhbmd1YWdlKVxuICAtIHJlbGV2YW5jZSAoaW50KVxuICAtIHZhbHVlIChhbiBIVE1MIHN0cmluZyB3aXRoIGhpZ2hsaWdodGluZyBtYXJrdXApXG4gIC0gc2Vjb25kQmVzdCAob2JqZWN0IHdpdGggdGhlIHNhbWUgc3RydWN0dXJlIGZvciBzZWNvbmQtYmVzdCBoZXVyaXN0aWNhbGx5XG4gICAgZGV0ZWN0ZWQgbGFuZ3VhZ2UsIG1heSBiZSBhYnNlbnQpXG5cbiAgICBAcGFyYW0ge3N0cmluZ30gY29kZVxuICAgIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gW2xhbmd1YWdlU3Vic2V0XVxuICAgIEByZXR1cm5zIHtBdXRvSGlnaGxpZ2h0UmVzdWx0fVxuICAqL1xuICBmdW5jdGlvbiBoaWdobGlnaHRBdXRvKGNvZGUsIGxhbmd1YWdlU3Vic2V0KSB7XG4gICAgbGFuZ3VhZ2VTdWJzZXQgPSBsYW5ndWFnZVN1YnNldCB8fCBvcHRpb25zLmxhbmd1YWdlcyB8fCBPYmplY3Qua2V5cyhsYW5ndWFnZXMpO1xuICAgIGNvbnN0IHBsYWludGV4dCA9IGp1c3RUZXh0SGlnaGxpZ2h0UmVzdWx0KGNvZGUpO1xuXG4gICAgY29uc3QgcmVzdWx0cyA9IGxhbmd1YWdlU3Vic2V0LmZpbHRlcihnZXRMYW5ndWFnZSkuZmlsdGVyKGF1dG9EZXRlY3Rpb24pLm1hcChuYW1lID0+XG4gICAgICBfaGlnaGxpZ2h0KG5hbWUsIGNvZGUsIGZhbHNlKVxuICAgICk7XG4gICAgcmVzdWx0cy51bnNoaWZ0KHBsYWludGV4dCk7IC8vIHBsYWludGV4dCBpcyBhbHdheXMgYW4gb3B0aW9uXG5cbiAgICBjb25zdCBzb3J0ZWQgPSByZXN1bHRzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIC8vIHNvcnQgYmFzZSBvbiByZWxldmFuY2VcbiAgICAgIGlmIChhLnJlbGV2YW5jZSAhPT0gYi5yZWxldmFuY2UpIHJldHVybiBiLnJlbGV2YW5jZSAtIGEucmVsZXZhbmNlO1xuXG4gICAgICAvLyBhbHdheXMgYXdhcmQgdGhlIHRpZSB0byB0aGUgYmFzZSBsYW5ndWFnZVxuICAgICAgLy8gaWUgaWYgQysrIGFuZCBBcmR1aW5vIGFyZSB0aWVkLCBpdCdzIG1vcmUgbGlrZWx5IHRvIGJlIEMrK1xuICAgICAgaWYgKGEubGFuZ3VhZ2UgJiYgYi5sYW5ndWFnZSkge1xuICAgICAgICBpZiAoZ2V0TGFuZ3VhZ2UoYS5sYW5ndWFnZSkuc3VwZXJzZXRPZiA9PT0gYi5sYW5ndWFnZSkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9IGVsc2UgaWYgKGdldExhbmd1YWdlKGIubGFuZ3VhZ2UpLnN1cGVyc2V0T2YgPT09IGEubGFuZ3VhZ2UpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gb3RoZXJ3aXNlIHNheSB0aGV5IGFyZSBlcXVhbCwgd2hpY2ggaGFzIHRoZSBlZmZlY3Qgb2Ygc29ydGluZyBvblxuICAgICAgLy8gcmVsZXZhbmNlIHdoaWxlIHByZXNlcnZpbmcgdGhlIG9yaWdpbmFsIG9yZGVyaW5nIC0gd2hpY2ggaXMgaG93IHRpZXNcbiAgICAgIC8vIGhhdmUgaGlzdG9yaWNhbGx5IGJlZW4gc2V0dGxlZCwgaWUgdGhlIGxhbmd1YWdlIHRoYXQgY29tZXMgZmlyc3QgYWx3YXlzXG4gICAgICAvLyB3aW5zIGluIHRoZSBjYXNlIG9mIGEgdGllXG4gICAgICByZXR1cm4gMDtcbiAgICB9KTtcblxuICAgIGNvbnN0IFtiZXN0LCBzZWNvbmRCZXN0XSA9IHNvcnRlZDtcblxuICAgIC8qKiBAdHlwZSB7QXV0b0hpZ2hsaWdodFJlc3VsdH0gKi9cbiAgICBjb25zdCByZXN1bHQgPSBiZXN0O1xuICAgIHJlc3VsdC5zZWNvbmRCZXN0ID0gc2Vjb25kQmVzdDtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQnVpbGRzIG5ldyBjbGFzcyBuYW1lIGZvciBibG9jayBnaXZlbiB0aGUgbGFuZ3VhZ2UgbmFtZVxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbY3VycmVudExhbmddXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbcmVzdWx0TGFuZ11cbiAgICovXG4gIGZ1bmN0aW9uIHVwZGF0ZUNsYXNzTmFtZShlbGVtZW50LCBjdXJyZW50TGFuZywgcmVzdWx0TGFuZykge1xuICAgIGNvbnN0IGxhbmd1YWdlID0gKGN1cnJlbnRMYW5nICYmIGFsaWFzZXNbY3VycmVudExhbmddKSB8fCByZXN1bHRMYW5nO1xuXG4gICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaGxqc1wiKTtcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoYGxhbmd1YWdlLSR7bGFuZ3VhZ2V9YCk7XG4gIH1cblxuICAvKipcbiAgICogQXBwbGllcyBoaWdobGlnaHRpbmcgdG8gYSBET00gbm9kZSBjb250YWluaW5nIGNvZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7SGlnaGxpZ2h0ZWRIVE1MRWxlbWVudH0gZWxlbWVudCAtIHRoZSBIVE1MIGVsZW1lbnQgdG8gaGlnaGxpZ2h0XG4gICovXG4gIGZ1bmN0aW9uIGhpZ2hsaWdodEVsZW1lbnQoZWxlbWVudCkge1xuICAgIC8qKiBAdHlwZSBIVE1MRWxlbWVudCAqL1xuICAgIGxldCBub2RlID0gbnVsbDtcbiAgICBjb25zdCBsYW5ndWFnZSA9IGJsb2NrTGFuZ3VhZ2UoZWxlbWVudCk7XG5cbiAgICBpZiAoc2hvdWxkTm90SGlnaGxpZ2h0KGxhbmd1YWdlKSkgcmV0dXJuO1xuXG4gICAgZmlyZShcImJlZm9yZTpoaWdobGlnaHRFbGVtZW50XCIsXG4gICAgICB7IGVsOiBlbGVtZW50LCBsYW5ndWFnZSB9KTtcblxuICAgIGlmIChlbGVtZW50LmRhdGFzZXQuaGlnaGxpZ2h0ZWQpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiRWxlbWVudCBwcmV2aW91c2x5IGhpZ2hsaWdodGVkLiBUbyBoaWdobGlnaHQgYWdhaW4sIGZpcnN0IHVuc2V0IGBkYXRhc2V0LmhpZ2hsaWdodGVkYC5cIiwgZWxlbWVudCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gd2Ugc2hvdWxkIGJlIGFsbCB0ZXh0LCBubyBjaGlsZCBub2RlcyAodW5lc2NhcGVkIEhUTUwpIC0gdGhpcyBpcyBwb3NzaWJseVxuICAgIC8vIGFuIEhUTUwgaW5qZWN0aW9uIGF0dGFjayAtIGl0J3MgbGlrZWx5IHRvbyBsYXRlIGlmIHRoaXMgaXMgYWxyZWFkeSBpblxuICAgIC8vIHByb2R1Y3Rpb24gKHRoZSBjb2RlIGhhcyBsaWtlbHkgYWxyZWFkeSBkb25lIGl0cyBkYW1hZ2UgYnkgdGhlIHRpbWVcbiAgICAvLyB3ZSdyZSBzZWVpbmcgaXQpLi4uIGJ1dCB3ZSB5ZWxsIGxvdWRseSBhYm91dCB0aGlzIHNvIHRoYXQgaG9wZWZ1bGx5IGl0J3NcbiAgICAvLyBtb3JlIGxpa2VseSB0byBiZSBjYXVnaHQgaW4gZGV2ZWxvcG1lbnQgYmVmb3JlIG1ha2luZyBpdCB0byBwcm9kdWN0aW9uXG4gICAgaWYgKGVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKCFvcHRpb25zLmlnbm9yZVVuZXNjYXBlZEhUTUwpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiT25lIG9mIHlvdXIgY29kZSBibG9ja3MgaW5jbHVkZXMgdW5lc2NhcGVkIEhUTUwuIFRoaXMgaXMgYSBwb3RlbnRpYWxseSBzZXJpb3VzIHNlY3VyaXR5IHJpc2suXCIpO1xuICAgICAgICBjb25zb2xlLndhcm4oXCJodHRwczovL2dpdGh1Yi5jb20vaGlnaGxpZ2h0anMvaGlnaGxpZ2h0LmpzL3dpa2kvc2VjdXJpdHlcIik7XG4gICAgICAgIGNvbnNvbGUud2FybihcIlRoZSBlbGVtZW50IHdpdGggdW5lc2NhcGVkIEhUTUw6XCIpO1xuICAgICAgICBjb25zb2xlLndhcm4oZWxlbWVudCk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy50aHJvd1VuZXNjYXBlZEhUTUwpIHtcbiAgICAgICAgY29uc3QgZXJyID0gbmV3IEhUTUxJbmplY3Rpb25FcnJvcihcbiAgICAgICAgICBcIk9uZSBvZiB5b3VyIGNvZGUgYmxvY2tzIGluY2x1ZGVzIHVuZXNjYXBlZCBIVE1MLlwiLFxuICAgICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MXG4gICAgICAgICk7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBub2RlID0gZWxlbWVudDtcbiAgICBjb25zdCB0ZXh0ID0gbm9kZS50ZXh0Q29udGVudDtcbiAgICBjb25zdCByZXN1bHQgPSBsYW5ndWFnZSA/IGhpZ2hsaWdodCh0ZXh0LCB7IGxhbmd1YWdlLCBpZ25vcmVJbGxlZ2FsczogdHJ1ZSB9KSA6IGhpZ2hsaWdodEF1dG8odGV4dCk7XG5cbiAgICBlbGVtZW50LmlubmVySFRNTCA9IHJlc3VsdC52YWx1ZTtcbiAgICBlbGVtZW50LmRhdGFzZXQuaGlnaGxpZ2h0ZWQgPSBcInllc1wiO1xuICAgIHVwZGF0ZUNsYXNzTmFtZShlbGVtZW50LCBsYW5ndWFnZSwgcmVzdWx0Lmxhbmd1YWdlKTtcbiAgICBlbGVtZW50LnJlc3VsdCA9IHtcbiAgICAgIGxhbmd1YWdlOiByZXN1bHQubGFuZ3VhZ2UsXG4gICAgICAvLyBUT0RPOiByZW1vdmUgd2l0aCB2ZXJzaW9uIDExLjBcbiAgICAgIHJlOiByZXN1bHQucmVsZXZhbmNlLFxuICAgICAgcmVsZXZhbmNlOiByZXN1bHQucmVsZXZhbmNlXG4gICAgfTtcbiAgICBpZiAocmVzdWx0LnNlY29uZEJlc3QpIHtcbiAgICAgIGVsZW1lbnQuc2Vjb25kQmVzdCA9IHtcbiAgICAgICAgbGFuZ3VhZ2U6IHJlc3VsdC5zZWNvbmRCZXN0Lmxhbmd1YWdlLFxuICAgICAgICByZWxldmFuY2U6IHJlc3VsdC5zZWNvbmRCZXN0LnJlbGV2YW5jZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBmaXJlKFwiYWZ0ZXI6aGlnaGxpZ2h0RWxlbWVudFwiLCB7IGVsOiBlbGVtZW50LCByZXN1bHQsIHRleHQgfSk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyBoaWdobGlnaHQuanMgZ2xvYmFsIG9wdGlvbnMgd2l0aCB0aGUgcGFzc2VkIG9wdGlvbnNcbiAgICpcbiAgICogQHBhcmFtIHtQYXJ0aWFsPEhMSlNPcHRpb25zPn0gdXNlck9wdGlvbnNcbiAgICovXG4gIGZ1bmN0aW9uIGNvbmZpZ3VyZSh1c2VyT3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBpbmhlcml0KG9wdGlvbnMsIHVzZXJPcHRpb25zKTtcbiAgfVxuXG4gIC8vIFRPRE86IHJlbW92ZSB2MTIsIGRlcHJlY2F0ZWRcbiAgY29uc3QgaW5pdEhpZ2hsaWdodGluZyA9ICgpID0+IHtcbiAgICBoaWdobGlnaHRBbGwoKTtcbiAgICBkZXByZWNhdGVkKFwiMTAuNi4wXCIsIFwiaW5pdEhpZ2hsaWdodGluZygpIGRlcHJlY2F0ZWQuICBVc2UgaGlnaGxpZ2h0QWxsKCkgbm93LlwiKTtcbiAgfTtcblxuICAvLyBUT0RPOiByZW1vdmUgdjEyLCBkZXByZWNhdGVkXG4gIGZ1bmN0aW9uIGluaXRIaWdobGlnaHRpbmdPbkxvYWQoKSB7XG4gICAgaGlnaGxpZ2h0QWxsKCk7XG4gICAgZGVwcmVjYXRlZChcIjEwLjYuMFwiLCBcImluaXRIaWdobGlnaHRpbmdPbkxvYWQoKSBkZXByZWNhdGVkLiAgVXNlIGhpZ2hsaWdodEFsbCgpIG5vdy5cIik7XG4gIH1cblxuICBsZXQgd2FudHNIaWdobGlnaHQgPSBmYWxzZTtcblxuICAvKipcbiAgICogYXV0by1oaWdobGlnaHRzIGFsbCBwcmU+Y29kZSBlbGVtZW50cyBvbiB0aGUgcGFnZVxuICAgKi9cbiAgZnVuY3Rpb24gaGlnaGxpZ2h0QWxsKCkge1xuICAgIGZ1bmN0aW9uIGJvb3QoKSB7XG4gICAgICAvLyBpZiBhIGhpZ2hsaWdodCB3YXMgcmVxdWVzdGVkIGJlZm9yZSBET00gd2FzIGxvYWRlZCwgZG8gbm93XG4gICAgICBoaWdobGlnaHRBbGwoKTtcbiAgICB9XG5cbiAgICAvLyBpZiB3ZSBhcmUgY2FsbGVkIHRvbyBlYXJseSBpbiB0aGUgbG9hZGluZyBwcm9jZXNzXG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwibG9hZGluZ1wiKSB7XG4gICAgICAvLyBtYWtlIHN1cmUgdGhlIGV2ZW50IGxpc3RlbmVyIGlzIG9ubHkgYWRkZWQgb25jZVxuICAgICAgaWYgKCF3YW50c0hpZ2hsaWdodCkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGJvb3QsIGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIHdhbnRzSGlnaGxpZ2h0ID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBibG9ja3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKG9wdGlvbnMuY3NzU2VsZWN0b3IpO1xuICAgIGJsb2Nrcy5mb3JFYWNoKGhpZ2hsaWdodEVsZW1lbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgbGFuZ3VhZ2UgZ3JhbW1hciBtb2R1bGVcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxhbmd1YWdlTmFtZVxuICAgKiBAcGFyYW0ge0xhbmd1YWdlRm59IGxhbmd1YWdlRGVmaW5pdGlvblxuICAgKi9cbiAgZnVuY3Rpb24gcmVnaXN0ZXJMYW5ndWFnZShsYW5ndWFnZU5hbWUsIGxhbmd1YWdlRGVmaW5pdGlvbikge1xuICAgIGxldCBsYW5nID0gbnVsbDtcbiAgICB0cnkge1xuICAgICAgbGFuZyA9IGxhbmd1YWdlRGVmaW5pdGlvbihobGpzKTtcbiAgICB9IGNhdGNoIChlcnJvciQxKSB7XG4gICAgICBlcnJvcihcIkxhbmd1YWdlIGRlZmluaXRpb24gZm9yICd7fScgY291bGQgbm90IGJlIHJlZ2lzdGVyZWQuXCIucmVwbGFjZShcInt9XCIsIGxhbmd1YWdlTmFtZSkpO1xuICAgICAgLy8gaGFyZCBvciBzb2Z0IGVycm9yXG4gICAgICBpZiAoIVNBRkVfTU9ERSkgeyB0aHJvdyBlcnJvciQxOyB9IGVsc2UgeyBlcnJvcihlcnJvciQxKTsgfVxuICAgICAgLy8gbGFuZ3VhZ2VzIHRoYXQgaGF2ZSBzZXJpb3VzIGVycm9ycyBhcmUgcmVwbGFjZWQgd2l0aCBlc3NlbnRpYWxseSBhXG4gICAgICAvLyBcInBsYWludGV4dFwiIHN0YW5kLWluIHNvIHRoYXQgdGhlIGNvZGUgYmxvY2tzIHdpbGwgc3RpbGwgZ2V0IG5vcm1hbFxuICAgICAgLy8gY3NzIGNsYXNzZXMgYXBwbGllZCB0byB0aGVtIC0gYW5kIG9uZSBiYWQgbGFuZ3VhZ2Ugd29uJ3QgYnJlYWsgdGhlXG4gICAgICAvLyBlbnRpcmUgaGlnaGxpZ2h0ZXJcbiAgICAgIGxhbmcgPSBQTEFJTlRFWFRfTEFOR1VBR0U7XG4gICAgfVxuICAgIC8vIGdpdmUgaXQgYSB0ZW1wb3JhcnkgbmFtZSBpZiBpdCBkb2Vzbid0IGhhdmUgb25lIGluIHRoZSBtZXRhLWRhdGFcbiAgICBpZiAoIWxhbmcubmFtZSkgbGFuZy5uYW1lID0gbGFuZ3VhZ2VOYW1lO1xuICAgIGxhbmd1YWdlc1tsYW5ndWFnZU5hbWVdID0gbGFuZztcbiAgICBsYW5nLnJhd0RlZmluaXRpb24gPSBsYW5ndWFnZURlZmluaXRpb24uYmluZChudWxsLCBobGpzKTtcblxuICAgIGlmIChsYW5nLmFsaWFzZXMpIHtcbiAgICAgIHJlZ2lzdGVyQWxpYXNlcyhsYW5nLmFsaWFzZXMsIHsgbGFuZ3VhZ2VOYW1lIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYSBsYW5ndWFnZSBncmFtbWFyIG1vZHVsZVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGFuZ3VhZ2VOYW1lXG4gICAqL1xuICBmdW5jdGlvbiB1bnJlZ2lzdGVyTGFuZ3VhZ2UobGFuZ3VhZ2VOYW1lKSB7XG4gICAgZGVsZXRlIGxhbmd1YWdlc1tsYW5ndWFnZU5hbWVdO1xuICAgIGZvciAoY29uc3QgYWxpYXMgb2YgT2JqZWN0LmtleXMoYWxpYXNlcykpIHtcbiAgICAgIGlmIChhbGlhc2VzW2FsaWFzXSA9PT0gbGFuZ3VhZ2VOYW1lKSB7XG4gICAgICAgIGRlbGV0ZSBhbGlhc2VzW2FsaWFzXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge3N0cmluZ1tdfSBMaXN0IG9mIGxhbmd1YWdlIGludGVybmFsIG5hbWVzXG4gICAqL1xuICBmdW5jdGlvbiBsaXN0TGFuZ3VhZ2VzKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhsYW5ndWFnZXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gbmFtZSBvZiB0aGUgbGFuZ3VhZ2UgdG8gcmV0cmlldmVcbiAgICogQHJldHVybnMge0xhbmd1YWdlIHwgdW5kZWZpbmVkfVxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0TGFuZ3VhZ2UobmFtZSkge1xuICAgIG5hbWUgPSAobmFtZSB8fCAnJykudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gbGFuZ3VhZ2VzW25hbWVdIHx8IGxhbmd1YWdlc1thbGlhc2VzW25hbWVdXTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gYWxpYXNMaXN0IC0gc2luZ2xlIGFsaWFzIG9yIGxpc3Qgb2YgYWxpYXNlc1xuICAgKiBAcGFyYW0ge3tsYW5ndWFnZU5hbWU6IHN0cmluZ319IG9wdHNcbiAgICovXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyQWxpYXNlcyhhbGlhc0xpc3QsIHsgbGFuZ3VhZ2VOYW1lIH0pIHtcbiAgICBpZiAodHlwZW9mIGFsaWFzTGlzdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGFsaWFzTGlzdCA9IFthbGlhc0xpc3RdO1xuICAgIH1cbiAgICBhbGlhc0xpc3QuZm9yRWFjaChhbGlhcyA9PiB7IGFsaWFzZXNbYWxpYXMudG9Mb3dlckNhc2UoKV0gPSBsYW5ndWFnZU5hbWU7IH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgYSBnaXZlbiBsYW5ndWFnZSBoYXMgYXV0by1kZXRlY3Rpb24gZW5hYmxlZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIG5hbWUgb2YgdGhlIGxhbmd1YWdlXG4gICAqL1xuICBmdW5jdGlvbiBhdXRvRGV0ZWN0aW9uKG5hbWUpIHtcbiAgICBjb25zdCBsYW5nID0gZ2V0TGFuZ3VhZ2UobmFtZSk7XG4gICAgcmV0dXJuIGxhbmcgJiYgIWxhbmcuZGlzYWJsZUF1dG9kZXRlY3Q7XG4gIH1cblxuICAvKipcbiAgICogVXBncmFkZXMgdGhlIG9sZCBoaWdobGlnaHRCbG9jayBwbHVnaW5zIHRvIHRoZSBuZXdcbiAgICogaGlnaGxpZ2h0RWxlbWVudCBBUElcbiAgICogQHBhcmFtIHtITEpTUGx1Z2lufSBwbHVnaW5cbiAgICovXG4gIGZ1bmN0aW9uIHVwZ3JhZGVQbHVnaW5BUEkocGx1Z2luKSB7XG4gICAgLy8gVE9ETzogcmVtb3ZlIHdpdGggdjEyXG4gICAgaWYgKHBsdWdpbltcImJlZm9yZTpoaWdobGlnaHRCbG9ja1wiXSAmJiAhcGx1Z2luW1wiYmVmb3JlOmhpZ2hsaWdodEVsZW1lbnRcIl0pIHtcbiAgICAgIHBsdWdpbltcImJlZm9yZTpoaWdobGlnaHRFbGVtZW50XCJdID0gKGRhdGEpID0+IHtcbiAgICAgICAgcGx1Z2luW1wiYmVmb3JlOmhpZ2hsaWdodEJsb2NrXCJdKFxuICAgICAgICAgIE9iamVjdC5hc3NpZ24oeyBibG9jazogZGF0YS5lbCB9LCBkYXRhKVxuICAgICAgICApO1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHBsdWdpbltcImFmdGVyOmhpZ2hsaWdodEJsb2NrXCJdICYmICFwbHVnaW5bXCJhZnRlcjpoaWdobGlnaHRFbGVtZW50XCJdKSB7XG4gICAgICBwbHVnaW5bXCJhZnRlcjpoaWdobGlnaHRFbGVtZW50XCJdID0gKGRhdGEpID0+IHtcbiAgICAgICAgcGx1Z2luW1wiYWZ0ZXI6aGlnaGxpZ2h0QmxvY2tcIl0oXG4gICAgICAgICAgT2JqZWN0LmFzc2lnbih7IGJsb2NrOiBkYXRhLmVsIH0sIGRhdGEpXG4gICAgICAgICk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0hMSlNQbHVnaW59IHBsdWdpblxuICAgKi9cbiAgZnVuY3Rpb24gYWRkUGx1Z2luKHBsdWdpbikge1xuICAgIHVwZ3JhZGVQbHVnaW5BUEkocGx1Z2luKTtcbiAgICBwbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0hMSlNQbHVnaW59IHBsdWdpblxuICAgKi9cbiAgZnVuY3Rpb24gcmVtb3ZlUGx1Z2luKHBsdWdpbikge1xuICAgIGNvbnN0IGluZGV4ID0gcGx1Z2lucy5pbmRleE9mKHBsdWdpbik7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgcGx1Z2lucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge1BsdWdpbkV2ZW50fSBldmVudFxuICAgKiBAcGFyYW0ge2FueX0gYXJnc1xuICAgKi9cbiAgZnVuY3Rpb24gZmlyZShldmVudCwgYXJncykge1xuICAgIGNvbnN0IGNiID0gZXZlbnQ7XG4gICAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uKHBsdWdpbikge1xuICAgICAgaWYgKHBsdWdpbltjYl0pIHtcbiAgICAgICAgcGx1Z2luW2NiXShhcmdzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBERVBSRUNBVEVEXG4gICAqIEBwYXJhbSB7SGlnaGxpZ2h0ZWRIVE1MRWxlbWVudH0gZWxcbiAgICovXG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZUhpZ2hsaWdodEJsb2NrKGVsKSB7XG4gICAgZGVwcmVjYXRlZChcIjEwLjcuMFwiLCBcImhpZ2hsaWdodEJsb2NrIHdpbGwgYmUgcmVtb3ZlZCBlbnRpcmVseSBpbiB2MTIuMFwiKTtcbiAgICBkZXByZWNhdGVkKFwiMTAuNy4wXCIsIFwiUGxlYXNlIHVzZSBoaWdobGlnaHRFbGVtZW50IG5vdy5cIik7XG5cbiAgICByZXR1cm4gaGlnaGxpZ2h0RWxlbWVudChlbCk7XG4gIH1cblxuICAvKiBJbnRlcmZhY2UgZGVmaW5pdGlvbiAqL1xuICBPYmplY3QuYXNzaWduKGhsanMsIHtcbiAgICBoaWdobGlnaHQsXG4gICAgaGlnaGxpZ2h0QXV0byxcbiAgICBoaWdobGlnaHRBbGwsXG4gICAgaGlnaGxpZ2h0RWxlbWVudCxcbiAgICAvLyBUT0RPOiBSZW1vdmUgd2l0aCB2MTIgQVBJXG4gICAgaGlnaGxpZ2h0QmxvY2s6IGRlcHJlY2F0ZUhpZ2hsaWdodEJsb2NrLFxuICAgIGNvbmZpZ3VyZSxcbiAgICBpbml0SGlnaGxpZ2h0aW5nLFxuICAgIGluaXRIaWdobGlnaHRpbmdPbkxvYWQsXG4gICAgcmVnaXN0ZXJMYW5ndWFnZSxcbiAgICB1bnJlZ2lzdGVyTGFuZ3VhZ2UsXG4gICAgbGlzdExhbmd1YWdlcyxcbiAgICBnZXRMYW5ndWFnZSxcbiAgICByZWdpc3RlckFsaWFzZXMsXG4gICAgYXV0b0RldGVjdGlvbixcbiAgICBpbmhlcml0LFxuICAgIGFkZFBsdWdpbixcbiAgICByZW1vdmVQbHVnaW5cbiAgfSk7XG5cbiAgaGxqcy5kZWJ1Z01vZGUgPSBmdW5jdGlvbigpIHsgU0FGRV9NT0RFID0gZmFsc2U7IH07XG4gIGhsanMuc2FmZU1vZGUgPSBmdW5jdGlvbigpIHsgU0FGRV9NT0RFID0gdHJ1ZTsgfTtcbiAgaGxqcy52ZXJzaW9uU3RyaW5nID0gdmVyc2lvbjtcblxuICBobGpzLnJlZ2V4ID0ge1xuICAgIGNvbmNhdDogY29uY2F0LFxuICAgIGxvb2thaGVhZDogbG9va2FoZWFkLFxuICAgIGVpdGhlcjogZWl0aGVyLFxuICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICBhbnlOdW1iZXJPZlRpbWVzOiBhbnlOdW1iZXJPZlRpbWVzXG4gIH07XG5cbiAgZm9yIChjb25zdCBrZXkgaW4gTU9ERVMpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKHR5cGVvZiBNT0RFU1trZXldID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBkZWVwRnJlZXplKE1PREVTW2tleV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIG1lcmdlIGFsbCB0aGUgbW9kZXMvcmVnZXhlcyBpbnRvIG91ciBtYWluIG9iamVjdFxuICBPYmplY3QuYXNzaWduKGhsanMsIE1PREVTKTtcblxuICByZXR1cm4gaGxqcztcbn07XG5cbi8vIE90aGVyIG5hbWVzIGZvciB0aGUgdmFyaWFibGUgbWF5IGJyZWFrIGJ1aWxkIHNjcmlwdFxuY29uc3QgaGlnaGxpZ2h0ID0gSExKUyh7fSk7XG5cbi8vIHJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGhpZ2hsaWdodGVyIHRvIGJlIHVzZWQgZm9yIGV4dGVuc2lvbnNcbi8vIGNoZWNrIGh0dHBzOi8vZ2l0aHViLmNvbS93b29vcm0vbG93bGlnaHQvaXNzdWVzLzQ3XG5oaWdobGlnaHQubmV3SW5zdGFuY2UgPSAoKSA9PiBITEpTKHt9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBoaWdobGlnaHQ7XG5oaWdobGlnaHQuSGlnaGxpZ2h0SlMgPSBoaWdobGlnaHQ7XG5oaWdobGlnaHQuZGVmYXVsdCA9IGhpZ2hsaWdodDtcbiJdLCJuYW1lcyI6WyJkZWVwRnJlZXplIiwib2JqIiwiTWFwIiwiY2xlYXIiLCJkZWxldGUiLCJzZXQiLCJFcnJvciIsIlNldCIsImFkZCIsIk9iamVjdCIsImZyZWV6ZSIsImdldE93blByb3BlcnR5TmFtZXMiLCJmb3JFYWNoIiwibmFtZSIsInByb3AiLCJ0eXBlIiwiaXNGcm96ZW4iLCJSZXNwb25zZSIsImNvbnN0cnVjdG9yIiwibW9kZSIsImRhdGEiLCJ1bmRlZmluZWQiLCJpc01hdGNoSWdub3JlZCIsImlnbm9yZU1hdGNoIiwiZXNjYXBlSFRNTCIsInZhbHVlIiwicmVwbGFjZSIsImluaGVyaXQkMSIsIm9yaWdpbmFsIiwib2JqZWN0cyIsInJlc3VsdCIsImNyZWF0ZSIsImtleSIsIlNQQU5fQ0xPU0UiLCJlbWl0c1dyYXBwaW5nVGFncyIsIm5vZGUiLCJzY29wZSIsInNjb3BlVG9DU1NDbGFzcyIsInByZWZpeCIsInN0YXJ0c1dpdGgiLCJpbmNsdWRlcyIsInBpZWNlcyIsInNwbGl0Iiwic2hpZnQiLCJtYXAiLCJ4IiwiaSIsInJlcGVhdCIsImpvaW4iLCJIVE1MUmVuZGVyZXIiLCJwYXJzZVRyZWUiLCJvcHRpb25zIiwiYnVmZmVyIiwiY2xhc3NQcmVmaXgiLCJ3YWxrIiwiYWRkVGV4dCIsInRleHQiLCJvcGVuTm9kZSIsImNsYXNzTmFtZSIsInNwYW4iLCJjbG9zZU5vZGUiLCJuZXdOb2RlIiwib3B0cyIsImNoaWxkcmVuIiwiYXNzaWduIiwiVG9rZW5UcmVlIiwicm9vdE5vZGUiLCJzdGFjayIsInRvcCIsImxlbmd0aCIsInJvb3QiLCJwdXNoIiwicG9wIiwiY2xvc2VBbGxOb2RlcyIsInRvSlNPTiIsIkpTT04iLCJzdHJpbmdpZnkiLCJidWlsZGVyIiwiX3dhbGsiLCJjaGlsZCIsIl9jb2xsYXBzZSIsImV2ZXJ5IiwiZWwiLCJUb2tlblRyZWVFbWl0dGVyIiwic3RhcnRTY29wZSIsImVuZFNjb3BlIiwiX19hZGRTdWJsYW5ndWFnZSIsImVtaXR0ZXIiLCJ0b0hUTUwiLCJyZW5kZXJlciIsImZpbmFsaXplIiwic291cmNlIiwicmUiLCJsb29rYWhlYWQiLCJjb25jYXQiLCJhbnlOdW1iZXJPZlRpbWVzIiwib3B0aW9uYWwiLCJhcmdzIiwiam9pbmVkIiwic3RyaXBPcHRpb25zRnJvbUFyZ3MiLCJzcGxpY2UiLCJlaXRoZXIiLCJjYXB0dXJlIiwiY291bnRNYXRjaEdyb3VwcyIsIlJlZ0V4cCIsInRvU3RyaW5nIiwiZXhlYyIsImxleGVtZSIsIm1hdGNoIiwiaW5kZXgiLCJCQUNLUkVGX1JFIiwiX3Jld3JpdGVCYWNrcmVmZXJlbmNlcyIsInJlZ2V4cHMiLCJqb2luV2l0aCIsIm51bUNhcHR1cmVzIiwicmVnZXgiLCJvZmZzZXQiLCJvdXQiLCJzdWJzdHJpbmciLCJTdHJpbmciLCJOdW1iZXIiLCJNQVRDSF9OT1RISU5HX1JFIiwiSURFTlRfUkUiLCJVTkRFUlNDT1JFX0lERU5UX1JFIiwiTlVNQkVSX1JFIiwiQ19OVU1CRVJfUkUiLCJCSU5BUllfTlVNQkVSX1JFIiwiUkVfU1RBUlRFUlNfUkUiLCJTSEVCQU5HIiwiYmVnaW5TaGViYW5nIiwiYmluYXJ5IiwiYmVnaW4iLCJlbmQiLCJyZWxldmFuY2UiLCJtIiwicmVzcCIsIkJBQ0tTTEFTSF9FU0NBUEUiLCJBUE9TX1NUUklOR19NT0RFIiwiaWxsZWdhbCIsImNvbnRhaW5zIiwiUVVPVEVfU1RSSU5HX01PREUiLCJQSFJBU0FMX1dPUkRTX01PREUiLCJDT01NRU5UIiwibW9kZU9wdGlvbnMiLCJleGNsdWRlQmVnaW4iLCJFTkdMSVNIX1dPUkQiLCJDX0xJTkVfQ09NTUVOVF9NT0RFIiwiQ19CTE9DS19DT01NRU5UX01PREUiLCJIQVNIX0NPTU1FTlRfTU9ERSIsIk5VTUJFUl9NT0RFIiwiQ19OVU1CRVJfTU9ERSIsIkJJTkFSWV9OVU1CRVJfTU9ERSIsIlJFR0VYUF9NT0RFIiwiVElUTEVfTU9ERSIsIlVOREVSU0NPUkVfVElUTEVfTU9ERSIsIk1FVEhPRF9HVUFSRCIsIkVORF9TQU1FX0FTX0JFR0lOIiwiX2JlZ2luTWF0Y2giLCJNT0RFUyIsIl9fcHJvdG9fXyIsInNraXBJZkhhc1ByZWNlZGluZ0RvdCIsInJlc3BvbnNlIiwiYmVmb3JlIiwiaW5wdXQiLCJzY29wZUNsYXNzTmFtZSIsIl9wYXJlbnQiLCJiZWdpbktleXdvcmRzIiwicGFyZW50IiwiX19iZWZvcmVCZWdpbiIsImtleXdvcmRzIiwiY29tcGlsZUlsbGVnYWwiLCJBcnJheSIsImlzQXJyYXkiLCJjb21waWxlTWF0Y2giLCJjb21waWxlUmVsZXZhbmNlIiwiYmVmb3JlTWF0Y2hFeHQiLCJiZWZvcmVNYXRjaCIsInN0YXJ0cyIsIm9yaWdpbmFsTW9kZSIsImtleXMiLCJlbmRzUGFyZW50IiwiQ09NTU9OX0tFWVdPUkRTIiwiREVGQVVMVF9LRVlXT1JEX1NDT1BFIiwiY29tcGlsZUtleXdvcmRzIiwicmF3S2V5d29yZHMiLCJjYXNlSW5zZW5zaXRpdmUiLCJzY29wZU5hbWUiLCJjb21waWxlZEtleXdvcmRzIiwiY29tcGlsZUxpc3QiLCJrZXl3b3JkTGlzdCIsInRvTG93ZXJDYXNlIiwia2V5d29yZCIsInBhaXIiLCJzY29yZUZvcktleXdvcmQiLCJwcm92aWRlZFNjb3JlIiwiY29tbW9uS2V5d29yZCIsInNlZW5EZXByZWNhdGlvbnMiLCJlcnJvciIsIm1lc3NhZ2UiLCJjb25zb2xlIiwid2FybiIsImxvZyIsImRlcHJlY2F0ZWQiLCJ2ZXJzaW9uIiwiTXVsdGlDbGFzc0Vycm9yIiwicmVtYXBTY29wZU5hbWVzIiwicmVnZXhlcyIsInNjb3BlTmFtZXMiLCJlbWl0IiwicG9zaXRpb25zIiwiX2VtaXQiLCJfbXVsdGkiLCJiZWdpbk11bHRpQ2xhc3MiLCJza2lwIiwicmV0dXJuQmVnaW4iLCJiZWdpblNjb3BlIiwiZW5kTXVsdGlDbGFzcyIsImV4Y2x1ZGVFbmQiLCJyZXR1cm5FbmQiLCJzY29wZVN1Z2FyIiwiTXVsdGlDbGFzcyIsIl93cmFwIiwiY29tcGlsZUxhbmd1YWdlIiwibGFuZ3VhZ2UiLCJsYW5nUmUiLCJnbG9iYWwiLCJjYXNlX2luc2Vuc2l0aXZlIiwidW5pY29kZVJlZ2V4IiwiTXVsdGlSZWdleCIsIm1hdGNoSW5kZXhlcyIsIm1hdGNoQXQiLCJwb3NpdGlvbiIsImFkZFJ1bGUiLCJjb21waWxlIiwidGVybWluYXRvcnMiLCJtYXRjaGVyUmUiLCJsYXN0SW5kZXgiLCJzIiwiZmluZEluZGV4IiwibWF0Y2hEYXRhIiwiUmVzdW1hYmxlTXVsdGlSZWdleCIsInJ1bGVzIiwibXVsdGlSZWdleGVzIiwiY291bnQiLCJyZWdleEluZGV4IiwiZ2V0TWF0Y2hlciIsIm1hdGNoZXIiLCJzbGljZSIsInJlc3VtaW5nU2NhbkF0U2FtZVBvc2l0aW9uIiwiY29uc2lkZXJBbGwiLCJtMiIsImJ1aWxkTW9kZVJlZ2V4IiwibW0iLCJ0ZXJtIiwicnVsZSIsInRlcm1pbmF0b3JFbmQiLCJjb21waWxlTW9kZSIsImNtb2RlIiwiaXNDb21waWxlZCIsImV4dCIsImNvbXBpbGVyRXh0ZW5zaW9ucyIsImtleXdvcmRQYXR0ZXJuIiwiJHBhdHRlcm4iLCJrZXl3b3JkUGF0dGVyblJlIiwiYmVnaW5SZSIsImVuZHNXaXRoUGFyZW50IiwiZW5kUmUiLCJpbGxlZ2FsUmUiLCJjIiwiZXhwYW5kT3JDbG9uZU1vZGUiLCJjbGFzc05hbWVBbGlhc2VzIiwiZGVwZW5kZW5jeU9uUGFyZW50IiwidmFyaWFudHMiLCJjYWNoZWRWYXJpYW50cyIsInZhcmlhbnQiLCJIVE1MSW5qZWN0aW9uRXJyb3IiLCJyZWFzb24iLCJodG1sIiwiZXNjYXBlIiwiaW5oZXJpdCIsIk5PX01BVENIIiwiU3ltYm9sIiwiTUFYX0tFWVdPUkRfSElUUyIsIkhMSlMiLCJobGpzIiwibGFuZ3VhZ2VzIiwiYWxpYXNlcyIsInBsdWdpbnMiLCJTQUZFX01PREUiLCJMQU5HVUFHRV9OT1RfRk9VTkQiLCJQTEFJTlRFWFRfTEFOR1VBR0UiLCJkaXNhYmxlQXV0b2RldGVjdCIsImlnbm9yZVVuZXNjYXBlZEhUTUwiLCJ0aHJvd1VuZXNjYXBlZEhUTUwiLCJub0hpZ2hsaWdodFJlIiwibGFuZ3VhZ2VEZXRlY3RSZSIsImNzc1NlbGVjdG9yIiwiX19lbWl0dGVyIiwic2hvdWxkTm90SGlnaGxpZ2h0IiwibGFuZ3VhZ2VOYW1lIiwidGVzdCIsImJsb2NrTGFuZ3VhZ2UiLCJibG9jayIsImNsYXNzZXMiLCJwYXJlbnROb2RlIiwiZ2V0TGFuZ3VhZ2UiLCJmaW5kIiwiX2NsYXNzIiwiaGlnaGxpZ2h0IiwiY29kZU9yTGFuZ3VhZ2VOYW1lIiwib3B0aW9uc09yQ29kZSIsImlnbm9yZUlsbGVnYWxzIiwiY29kZSIsImNvbnRleHQiLCJmaXJlIiwiX2hpZ2hsaWdodCIsImNvZGVUb0hpZ2hsaWdodCIsImNvbnRpbnVhdGlvbiIsImtleXdvcmRIaXRzIiwia2V5d29yZERhdGEiLCJtYXRjaFRleHQiLCJwcm9jZXNzS2V5d29yZHMiLCJtb2RlQnVmZmVyIiwiYnVmIiwid29yZCIsImtpbmQiLCJrZXl3b3JkUmVsZXZhbmNlIiwiY3NzQ2xhc3MiLCJlbWl0S2V5d29yZCIsInByb2Nlc3NTdWJMYW5ndWFnZSIsInN1Ykxhbmd1YWdlIiwiY29udGludWF0aW9ucyIsIl90b3AiLCJoaWdobGlnaHRBdXRvIiwiX2VtaXR0ZXIiLCJwcm9jZXNzQnVmZmVyIiwiZW1pdE11bHRpQ2xhc3MiLCJtYXgiLCJrbGFzcyIsInN0YXJ0TmV3TW9kZSIsImVuZE9mTW9kZSIsIm1hdGNoUGx1c1JlbWFpbmRlciIsIm1hdGNoZWQiLCJkb0lnbm9yZSIsInJlc3VtZVNjYW5BdFNhbWVQb3NpdGlvbiIsImRvQmVnaW5NYXRjaCIsIm5ld01vZGUiLCJiZWZvcmVDYWxsYmFja3MiLCJjYiIsImRvRW5kTWF0Y2giLCJlbmRNb2RlIiwib3JpZ2luIiwicHJvY2Vzc0NvbnRpbnVhdGlvbnMiLCJsaXN0IiwiY3VycmVudCIsInVuc2hpZnQiLCJpdGVtIiwibGFzdE1hdGNoIiwicHJvY2Vzc0xleGVtZSIsInRleHRCZWZvcmVNYXRjaCIsImVyciIsImJhZFJ1bGUiLCJwcm9jZXNzZWQiLCJpdGVyYXRpb25zIiwibWQiLCJfX2VtaXRUb2tlbnMiLCJwcm9jZXNzZWRDb3VudCIsIl9pbGxlZ2FsQnkiLCJyZXN1bHRTb0ZhciIsImVycm9yUmFpc2VkIiwianVzdFRleHRIaWdobGlnaHRSZXN1bHQiLCJsYW5ndWFnZVN1YnNldCIsInBsYWludGV4dCIsInJlc3VsdHMiLCJmaWx0ZXIiLCJhdXRvRGV0ZWN0aW9uIiwic29ydGVkIiwic29ydCIsImEiLCJiIiwic3VwZXJzZXRPZiIsImJlc3QiLCJzZWNvbmRCZXN0IiwidXBkYXRlQ2xhc3NOYW1lIiwiZWxlbWVudCIsImN1cnJlbnRMYW5nIiwicmVzdWx0TGFuZyIsImNsYXNzTGlzdCIsImhpZ2hsaWdodEVsZW1lbnQiLCJkYXRhc2V0IiwiaGlnaGxpZ2h0ZWQiLCJpbm5lckhUTUwiLCJ0ZXh0Q29udGVudCIsImNvbmZpZ3VyZSIsInVzZXJPcHRpb25zIiwiaW5pdEhpZ2hsaWdodGluZyIsImhpZ2hsaWdodEFsbCIsImluaXRIaWdobGlnaHRpbmdPbkxvYWQiLCJ3YW50c0hpZ2hsaWdodCIsImJvb3QiLCJkb2N1bWVudCIsInJlYWR5U3RhdGUiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiYmxvY2tzIiwicXVlcnlTZWxlY3RvckFsbCIsInJlZ2lzdGVyTGFuZ3VhZ2UiLCJsYW5ndWFnZURlZmluaXRpb24iLCJsYW5nIiwiZXJyb3IkMSIsInJhd0RlZmluaXRpb24iLCJiaW5kIiwicmVnaXN0ZXJBbGlhc2VzIiwidW5yZWdpc3Rlckxhbmd1YWdlIiwiYWxpYXMiLCJsaXN0TGFuZ3VhZ2VzIiwiYWxpYXNMaXN0IiwidXBncmFkZVBsdWdpbkFQSSIsInBsdWdpbiIsImFkZFBsdWdpbiIsInJlbW92ZVBsdWdpbiIsImluZGV4T2YiLCJldmVudCIsImRlcHJlY2F0ZUhpZ2hsaWdodEJsb2NrIiwiaGlnaGxpZ2h0QmxvY2siLCJkZWJ1Z01vZGUiLCJzYWZlTW9kZSIsInZlcnNpb25TdHJpbmciLCJuZXdJbnN0YW5jZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJIaWdobGlnaHRKUyIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/lib/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/core.js":
/*!**********************************************!*\
  !*** ./node_modules/highlight.js/es/core.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HighlightJS: () => (/* reexport default export from named module */ _lib_core_js__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _lib_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/core.js */ \"(ssr)/./node_modules/highlight.js/lib/core.js\");\n// https://nodejs.org/api/packages.html#packages_writing_dual_packages_while_avoiding_or_minimizing_hazards\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_lib_core_js__WEBPACK_IMPORTED_MODULE_0__);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2NvcmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMkdBQTJHO0FBQ2xFO0FBQ2xCO0FBQ3ZCLGlFQUFlQSx5Q0FBV0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2hhcmR3YXJlLWRvYy1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL2hpZ2hsaWdodC5qcy9lcy9jb3JlLmpzPzFlMTYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9wYWNrYWdlcy5odG1sI3BhY2thZ2VzX3dyaXRpbmdfZHVhbF9wYWNrYWdlc193aGlsZV9hdm9pZGluZ19vcl9taW5pbWl6aW5nX2hhemFyZHNcbmltcG9ydCBIaWdobGlnaHRKUyBmcm9tICcuLi9saWIvY29yZS5qcyc7XG5leHBvcnQgeyBIaWdobGlnaHRKUyB9O1xuZXhwb3J0IGRlZmF1bHQgSGlnaGxpZ2h0SlM7XG4iXSwibmFtZXMiOlsiSGlnaGxpZ2h0SlMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/arduino.js":
/*!***********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/arduino.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ arduino)\n/* harmony export */ });\n/*\nLanguage: C++\nCategory: common, system\nWebsite: https://isocpp.org\n*/ /** @type LanguageFn */ function cPlusPlus(hljs) {\n    const regex = hljs.regex;\n    // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n    // not include such support nor can we be sure all the grammars depending\n    // on it would desire this behavior\n    const C_LINE_COMMENT_MODE = hljs.COMMENT(\"//\", \"$\", {\n        contains: [\n            {\n                begin: /\\\\\\n/\n            }\n        ]\n    });\n    const DECLTYPE_AUTO_RE = \"decltype\\\\(auto\\\\)\";\n    const NAMESPACE_RE = \"[a-zA-Z_]\\\\w*::\";\n    const TEMPLATE_ARGUMENT_RE = \"<[^<>]+>\";\n    const FUNCTION_TYPE_RE = \"(?!struct)(\" + DECLTYPE_AUTO_RE + \"|\" + regex.optional(NAMESPACE_RE) + \"[a-zA-Z_]\\\\w*\" + regex.optional(TEMPLATE_ARGUMENT_RE) + \")\";\n    const CPP_PRIMITIVE_TYPES = {\n        className: \"type\",\n        begin: \"\\\\b[a-z\\\\d_]*_t\\\\b\"\n    };\n    // https://en.cppreference.com/w/cpp/language/escape\n    // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n    const CHARACTER_ESCAPES = \"\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)\";\n    const STRINGS = {\n        className: \"string\",\n        variants: [\n            {\n                begin: '(u8?|U|L)?\"',\n                end: '\"',\n                illegal: \"\\\\n\",\n                contains: [\n                    hljs.BACKSLASH_ESCAPE\n                ]\n            },\n            {\n                begin: \"(u8?|U|L)?'(\" + CHARACTER_ESCAPES + \"|.)\",\n                end: \"'\",\n                illegal: \".\"\n            },\n            hljs.END_SAME_AS_BEGIN({\n                begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n                end: /\\)([^()\\\\ ]{0,16})\"/\n            })\n        ]\n    };\n    const NUMBERS = {\n        className: \"number\",\n        variants: [\n            // Floating-point literal.\n            {\n                begin: \"[+-]?(?:\" // Leading sign.\n                 + \"(?:\" + \"[0-9](?:'?[0-9])*\\\\.(?:[0-9](?:'?[0-9])*)?\" + \"|\\\\.[0-9](?:'?[0-9])*\" + \")(?:[Ee][+-]?[0-9](?:'?[0-9])*)?\" + \"|[0-9](?:'?[0-9])*[Ee][+-]?[0-9](?:'?[0-9])*\" + \"|0[Xx](?:\" + \"[0-9A-Fa-f](?:'?[0-9A-Fa-f])*(?:\\\\.(?:[0-9A-Fa-f](?:'?[0-9A-Fa-f])*)?)?\" + \"|\\\\.[0-9A-Fa-f](?:'?[0-9A-Fa-f])*\" + \")[Pp][+-]?[0-9](?:'?[0-9])*\" + \")(?:\" // Literal suffixes.\n                 + \"[Ff](?:16|32|64|128)?\" + \"|(BF|bf)16\" + \"|[Ll]\" + \"|\" // Literal suffix is optional.\n                 + \")\"\n            },\n            // Integer literal.\n            {\n                begin: \"[+-]?\\\\b(?:\" // Leading sign.\n                 + \"0[Bb][01](?:'?[01])*\" // Binary.\n                 + \"|0[Xx][0-9A-Fa-f](?:'?[0-9A-Fa-f])*\" // Hexadecimal.\n                 + \"|0(?:'?[0-7])*\" // Octal or just a lone zero.\n                 + \"|[1-9](?:'?[0-9])*\" // Decimal.\n                 + \")(?:\" // Literal suffixes.\n                 + \"[Uu](?:LL?|ll?)\" + \"|[Uu][Zz]?\" + \"|(?:LL?|ll?)[Uu]?\" + \"|[Zz][Uu]\" + \"|\" // Literal suffix is optional.\n                 + \")\"\n            }\n        ],\n        relevance: 0\n    };\n    const PREPROCESSOR = {\n        className: \"meta\",\n        begin: /#\\s*[a-z]+\\b/,\n        end: /$/,\n        keywords: {\n            keyword: \"if else elif endif define undef warning error line \" + \"pragma _Pragma ifdef ifndef include\"\n        },\n        contains: [\n            {\n                begin: /\\\\\\n/,\n                relevance: 0\n            },\n            hljs.inherit(STRINGS, {\n                className: \"string\"\n            }),\n            {\n                className: \"string\",\n                begin: /<.*?>/\n            },\n            C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE\n        ]\n    };\n    const TITLE_MODE = {\n        className: \"title\",\n        begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,\n        relevance: 0\n    };\n    const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + \"\\\\s*\\\\(\";\n    // https://en.cppreference.com/w/cpp/keyword\n    const RESERVED_KEYWORDS = [\n        \"alignas\",\n        \"alignof\",\n        \"and\",\n        \"and_eq\",\n        \"asm\",\n        \"atomic_cancel\",\n        \"atomic_commit\",\n        \"atomic_noexcept\",\n        \"auto\",\n        \"bitand\",\n        \"bitor\",\n        \"break\",\n        \"case\",\n        \"catch\",\n        \"class\",\n        \"co_await\",\n        \"co_return\",\n        \"co_yield\",\n        \"compl\",\n        \"concept\",\n        \"const_cast|10\",\n        \"consteval\",\n        \"constexpr\",\n        \"constinit\",\n        \"continue\",\n        \"decltype\",\n        \"default\",\n        \"delete\",\n        \"do\",\n        \"dynamic_cast|10\",\n        \"else\",\n        \"enum\",\n        \"explicit\",\n        \"export\",\n        \"extern\",\n        \"false\",\n        \"final\",\n        \"for\",\n        \"friend\",\n        \"goto\",\n        \"if\",\n        \"import\",\n        \"inline\",\n        \"module\",\n        \"mutable\",\n        \"namespace\",\n        \"new\",\n        \"noexcept\",\n        \"not\",\n        \"not_eq\",\n        \"nullptr\",\n        \"operator\",\n        \"or\",\n        \"or_eq\",\n        \"override\",\n        \"private\",\n        \"protected\",\n        \"public\",\n        \"reflexpr\",\n        \"register\",\n        \"reinterpret_cast|10\",\n        \"requires\",\n        \"return\",\n        \"sizeof\",\n        \"static_assert\",\n        \"static_cast|10\",\n        \"struct\",\n        \"switch\",\n        \"synchronized\",\n        \"template\",\n        \"this\",\n        \"thread_local\",\n        \"throw\",\n        \"transaction_safe\",\n        \"transaction_safe_dynamic\",\n        \"true\",\n        \"try\",\n        \"typedef\",\n        \"typeid\",\n        \"typename\",\n        \"union\",\n        \"using\",\n        \"virtual\",\n        \"volatile\",\n        \"while\",\n        \"xor\",\n        \"xor_eq\"\n    ];\n    // https://en.cppreference.com/w/cpp/keyword\n    const RESERVED_TYPES = [\n        \"bool\",\n        \"char\",\n        \"char16_t\",\n        \"char32_t\",\n        \"char8_t\",\n        \"double\",\n        \"float\",\n        \"int\",\n        \"long\",\n        \"short\",\n        \"void\",\n        \"wchar_t\",\n        \"unsigned\",\n        \"signed\",\n        \"const\",\n        \"static\"\n    ];\n    const TYPE_HINTS = [\n        \"any\",\n        \"auto_ptr\",\n        \"barrier\",\n        \"binary_semaphore\",\n        \"bitset\",\n        \"complex\",\n        \"condition_variable\",\n        \"condition_variable_any\",\n        \"counting_semaphore\",\n        \"deque\",\n        \"false_type\",\n        \"flat_map\",\n        \"flat_set\",\n        \"future\",\n        \"imaginary\",\n        \"initializer_list\",\n        \"istringstream\",\n        \"jthread\",\n        \"latch\",\n        \"lock_guard\",\n        \"multimap\",\n        \"multiset\",\n        \"mutex\",\n        \"optional\",\n        \"ostringstream\",\n        \"packaged_task\",\n        \"pair\",\n        \"promise\",\n        \"priority_queue\",\n        \"queue\",\n        \"recursive_mutex\",\n        \"recursive_timed_mutex\",\n        \"scoped_lock\",\n        \"set\",\n        \"shared_future\",\n        \"shared_lock\",\n        \"shared_mutex\",\n        \"shared_timed_mutex\",\n        \"shared_ptr\",\n        \"stack\",\n        \"string_view\",\n        \"stringstream\",\n        \"timed_mutex\",\n        \"thread\",\n        \"true_type\",\n        \"tuple\",\n        \"unique_lock\",\n        \"unique_ptr\",\n        \"unordered_map\",\n        \"unordered_multimap\",\n        \"unordered_multiset\",\n        \"unordered_set\",\n        \"variant\",\n        \"vector\",\n        \"weak_ptr\",\n        \"wstring\",\n        \"wstring_view\"\n    ];\n    const FUNCTION_HINTS = [\n        \"abort\",\n        \"abs\",\n        \"acos\",\n        \"apply\",\n        \"as_const\",\n        \"asin\",\n        \"atan\",\n        \"atan2\",\n        \"calloc\",\n        \"ceil\",\n        \"cerr\",\n        \"cin\",\n        \"clog\",\n        \"cos\",\n        \"cosh\",\n        \"cout\",\n        \"declval\",\n        \"endl\",\n        \"exchange\",\n        \"exit\",\n        \"exp\",\n        \"fabs\",\n        \"floor\",\n        \"fmod\",\n        \"forward\",\n        \"fprintf\",\n        \"fputs\",\n        \"free\",\n        \"frexp\",\n        \"fscanf\",\n        \"future\",\n        \"invoke\",\n        \"isalnum\",\n        \"isalpha\",\n        \"iscntrl\",\n        \"isdigit\",\n        \"isgraph\",\n        \"islower\",\n        \"isprint\",\n        \"ispunct\",\n        \"isspace\",\n        \"isupper\",\n        \"isxdigit\",\n        \"labs\",\n        \"launder\",\n        \"ldexp\",\n        \"log\",\n        \"log10\",\n        \"make_pair\",\n        \"make_shared\",\n        \"make_shared_for_overwrite\",\n        \"make_tuple\",\n        \"make_unique\",\n        \"malloc\",\n        \"memchr\",\n        \"memcmp\",\n        \"memcpy\",\n        \"memset\",\n        \"modf\",\n        \"move\",\n        \"pow\",\n        \"printf\",\n        \"putchar\",\n        \"puts\",\n        \"realloc\",\n        \"scanf\",\n        \"sin\",\n        \"sinh\",\n        \"snprintf\",\n        \"sprintf\",\n        \"sqrt\",\n        \"sscanf\",\n        \"std\",\n        \"stderr\",\n        \"stdin\",\n        \"stdout\",\n        \"strcat\",\n        \"strchr\",\n        \"strcmp\",\n        \"strcpy\",\n        \"strcspn\",\n        \"strlen\",\n        \"strncat\",\n        \"strncmp\",\n        \"strncpy\",\n        \"strpbrk\",\n        \"strrchr\",\n        \"strspn\",\n        \"strstr\",\n        \"swap\",\n        \"tan\",\n        \"tanh\",\n        \"terminate\",\n        \"to_underlying\",\n        \"tolower\",\n        \"toupper\",\n        \"vfprintf\",\n        \"visit\",\n        \"vprintf\",\n        \"vsprintf\"\n    ];\n    const LITERALS = [\n        \"NULL\",\n        \"false\",\n        \"nullopt\",\n        \"nullptr\",\n        \"true\"\n    ];\n    // https://en.cppreference.com/w/cpp/keyword\n    const BUILT_IN = [\n        \"_Pragma\"\n    ];\n    const CPP_KEYWORDS = {\n        type: RESERVED_TYPES,\n        keyword: RESERVED_KEYWORDS,\n        literal: LITERALS,\n        built_in: BUILT_IN,\n        _type_hints: TYPE_HINTS\n    };\n    const FUNCTION_DISPATCH = {\n        className: \"function.dispatch\",\n        relevance: 0,\n        keywords: {\n            // Only for relevance, not highlighting.\n            _hint: FUNCTION_HINTS\n        },\n        begin: regex.concat(/\\b/, /(?!decltype)/, /(?!if)/, /(?!for)/, /(?!switch)/, /(?!while)/, hljs.IDENT_RE, regex.lookahead(/(<[^<>]+>|)\\s*\\(/))\n    };\n    const EXPRESSION_CONTAINS = [\n        FUNCTION_DISPATCH,\n        PREPROCESSOR,\n        CPP_PRIMITIVE_TYPES,\n        C_LINE_COMMENT_MODE,\n        hljs.C_BLOCK_COMMENT_MODE,\n        NUMBERS,\n        STRINGS\n    ];\n    const EXPRESSION_CONTEXT = {\n        // This mode covers expression context where we can't expect a function\n        // definition and shouldn't highlight anything that looks like one:\n        // `return some()`, `else if()`, `(x*sum(1, 2))`\n        variants: [\n            {\n                begin: /=/,\n                end: /;/\n            },\n            {\n                begin: /\\(/,\n                end: /\\)/\n            },\n            {\n                beginKeywords: \"new throw return else\",\n                end: /;/\n            }\n        ],\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                keywords: CPP_KEYWORDS,\n                contains: EXPRESSION_CONTAINS.concat([\n                    \"self\"\n                ]),\n                relevance: 0\n            }\n        ]),\n        relevance: 0\n    };\n    const FUNCTION_DECLARATION = {\n        className: \"function\",\n        begin: \"(\" + FUNCTION_TYPE_RE + \"[\\\\*&\\\\s]+)+\" + FUNCTION_TITLE,\n        returnBegin: true,\n        end: /[{;=]/,\n        excludeEnd: true,\n        keywords: CPP_KEYWORDS,\n        illegal: /[^\\w\\s\\*&:<>.]/,\n        contains: [\n            {\n                begin: DECLTYPE_AUTO_RE,\n                keywords: CPP_KEYWORDS,\n                relevance: 0\n            },\n            {\n                begin: FUNCTION_TITLE,\n                returnBegin: true,\n                contains: [\n                    TITLE_MODE\n                ],\n                relevance: 0\n            },\n            // needed because we do not have look-behind on the below rule\n            // to prevent it from grabbing the final : in a :: pair\n            {\n                begin: /::/,\n                relevance: 0\n            },\n            // initializers\n            {\n                begin: /:/,\n                endsWithParent: true,\n                contains: [\n                    STRINGS,\n                    NUMBERS\n                ]\n            },\n            // allow for multiple declarations, e.g.:\n            // extern void f(int), g(char);\n            {\n                relevance: 0,\n                match: /,/\n            },\n            {\n                className: \"params\",\n                begin: /\\(/,\n                end: /\\)/,\n                keywords: CPP_KEYWORDS,\n                relevance: 0,\n                contains: [\n                    C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE,\n                    STRINGS,\n                    NUMBERS,\n                    CPP_PRIMITIVE_TYPES,\n                    // Count matching parentheses.\n                    {\n                        begin: /\\(/,\n                        end: /\\)/,\n                        keywords: CPP_KEYWORDS,\n                        relevance: 0,\n                        contains: [\n                            \"self\",\n                            C_LINE_COMMENT_MODE,\n                            hljs.C_BLOCK_COMMENT_MODE,\n                            STRINGS,\n                            NUMBERS,\n                            CPP_PRIMITIVE_TYPES\n                        ]\n                    }\n                ]\n            },\n            CPP_PRIMITIVE_TYPES,\n            C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            PREPROCESSOR\n        ]\n    };\n    return {\n        name: \"C++\",\n        aliases: [\n            \"cc\",\n            \"c++\",\n            \"h++\",\n            \"hpp\",\n            \"hh\",\n            \"hxx\",\n            \"cxx\"\n        ],\n        keywords: CPP_KEYWORDS,\n        illegal: \"</\",\n        classNameAliases: {\n            \"function.dispatch\": \"built_in\"\n        },\n        contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, FUNCTION_DISPATCH, EXPRESSION_CONTAINS, [\n            PREPROCESSOR,\n            {\n                begin: \"\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function|flat_map|flat_set)\\\\s*<(?!<)\",\n                end: \">\",\n                keywords: CPP_KEYWORDS,\n                contains: [\n                    \"self\",\n                    CPP_PRIMITIVE_TYPES\n                ]\n            },\n            {\n                begin: hljs.IDENT_RE + \"::\",\n                keywords: CPP_KEYWORDS\n            },\n            {\n                match: [\n                    // extra complexity to deal with `enum class` and `enum struct`\n                    /\\b(?:enum(?:\\s+(?:class|struct))?|class|struct|union)/,\n                    /\\s+/,\n                    /\\w+/\n                ],\n                className: {\n                    1: \"keyword\",\n                    3: \"title.class\"\n                }\n            }\n        ])\n    };\n}\n/*\nLanguage: Arduino\nAuthor: Stefania Mellai <s.mellai@arduino.cc>\nDescription: The Arduino® Language is a superset of C++. This rules are designed to highlight the Arduino® source code. For info about language see http://www.arduino.cc.\nWebsite: https://www.arduino.cc\nCategory: system\n*/ /** @type LanguageFn */ function arduino(hljs) {\n    const ARDUINO_KW = {\n        type: [\n            \"boolean\",\n            \"byte\",\n            \"word\",\n            \"String\"\n        ],\n        built_in: [\n            \"KeyboardController\",\n            \"MouseController\",\n            \"SoftwareSerial\",\n            \"EthernetServer\",\n            \"EthernetClient\",\n            \"LiquidCrystal\",\n            \"RobotControl\",\n            \"GSMVoiceCall\",\n            \"EthernetUDP\",\n            \"EsploraTFT\",\n            \"HttpClient\",\n            \"RobotMotor\",\n            \"WiFiClient\",\n            \"GSMScanner\",\n            \"FileSystem\",\n            \"Scheduler\",\n            \"GSMServer\",\n            \"YunClient\",\n            \"YunServer\",\n            \"IPAddress\",\n            \"GSMClient\",\n            \"GSMModem\",\n            \"Keyboard\",\n            \"Ethernet\",\n            \"Console\",\n            \"GSMBand\",\n            \"Esplora\",\n            \"Stepper\",\n            \"Process\",\n            \"WiFiUDP\",\n            \"GSM_SMS\",\n            \"Mailbox\",\n            \"USBHost\",\n            \"Firmata\",\n            \"PImage\",\n            \"Client\",\n            \"Server\",\n            \"GSMPIN\",\n            \"FileIO\",\n            \"Bridge\",\n            \"Serial\",\n            \"EEPROM\",\n            \"Stream\",\n            \"Mouse\",\n            \"Audio\",\n            \"Servo\",\n            \"File\",\n            \"Task\",\n            \"GPRS\",\n            \"WiFi\",\n            \"Wire\",\n            \"TFT\",\n            \"GSM\",\n            \"SPI\",\n            \"SD\"\n        ],\n        _hints: [\n            \"setup\",\n            \"loop\",\n            \"runShellCommandAsynchronously\",\n            \"analogWriteResolution\",\n            \"retrieveCallingNumber\",\n            \"printFirmwareVersion\",\n            \"analogReadResolution\",\n            \"sendDigitalPortPair\",\n            \"noListenOnLocalhost\",\n            \"readJoystickButton\",\n            \"setFirmwareVersion\",\n            \"readJoystickSwitch\",\n            \"scrollDisplayRight\",\n            \"getVoiceCallStatus\",\n            \"scrollDisplayLeft\",\n            \"writeMicroseconds\",\n            \"delayMicroseconds\",\n            \"beginTransmission\",\n            \"getSignalStrength\",\n            \"runAsynchronously\",\n            \"getAsynchronously\",\n            \"listenOnLocalhost\",\n            \"getCurrentCarrier\",\n            \"readAccelerometer\",\n            \"messageAvailable\",\n            \"sendDigitalPorts\",\n            \"lineFollowConfig\",\n            \"countryNameWrite\",\n            \"runShellCommand\",\n            \"readStringUntil\",\n            \"rewindDirectory\",\n            \"readTemperature\",\n            \"setClockDivider\",\n            \"readLightSensor\",\n            \"endTransmission\",\n            \"analogReference\",\n            \"detachInterrupt\",\n            \"countryNameRead\",\n            \"attachInterrupt\",\n            \"encryptionType\",\n            \"readBytesUntil\",\n            \"robotNameWrite\",\n            \"readMicrophone\",\n            \"robotNameRead\",\n            \"cityNameWrite\",\n            \"userNameWrite\",\n            \"readJoystickY\",\n            \"readJoystickX\",\n            \"mouseReleased\",\n            \"openNextFile\",\n            \"scanNetworks\",\n            \"noInterrupts\",\n            \"digitalWrite\",\n            \"beginSpeaker\",\n            \"mousePressed\",\n            \"isActionDone\",\n            \"mouseDragged\",\n            \"displayLogos\",\n            \"noAutoscroll\",\n            \"addParameter\",\n            \"remoteNumber\",\n            \"getModifiers\",\n            \"keyboardRead\",\n            \"userNameRead\",\n            \"waitContinue\",\n            \"processInput\",\n            \"parseCommand\",\n            \"printVersion\",\n            \"readNetworks\",\n            \"writeMessage\",\n            \"blinkVersion\",\n            \"cityNameRead\",\n            \"readMessage\",\n            \"setDataMode\",\n            \"parsePacket\",\n            \"isListening\",\n            \"setBitOrder\",\n            \"beginPacket\",\n            \"isDirectory\",\n            \"motorsWrite\",\n            \"drawCompass\",\n            \"digitalRead\",\n            \"clearScreen\",\n            \"serialEvent\",\n            \"rightToLeft\",\n            \"setTextSize\",\n            \"leftToRight\",\n            \"requestFrom\",\n            \"keyReleased\",\n            \"compassRead\",\n            \"analogWrite\",\n            \"interrupts\",\n            \"WiFiServer\",\n            \"disconnect\",\n            \"playMelody\",\n            \"parseFloat\",\n            \"autoscroll\",\n            \"getPINUsed\",\n            \"setPINUsed\",\n            \"setTimeout\",\n            \"sendAnalog\",\n            \"readSlider\",\n            \"analogRead\",\n            \"beginWrite\",\n            \"createChar\",\n            \"motorsStop\",\n            \"keyPressed\",\n            \"tempoWrite\",\n            \"readButton\",\n            \"subnetMask\",\n            \"debugPrint\",\n            \"macAddress\",\n            \"writeGreen\",\n            \"randomSeed\",\n            \"attachGPRS\",\n            \"readString\",\n            \"sendString\",\n            \"remotePort\",\n            \"releaseAll\",\n            \"mouseMoved\",\n            \"background\",\n            \"getXChange\",\n            \"getYChange\",\n            \"answerCall\",\n            \"getResult\",\n            \"voiceCall\",\n            \"endPacket\",\n            \"constrain\",\n            \"getSocket\",\n            \"writeJSON\",\n            \"getButton\",\n            \"available\",\n            \"connected\",\n            \"findUntil\",\n            \"readBytes\",\n            \"exitValue\",\n            \"readGreen\",\n            \"writeBlue\",\n            \"startLoop\",\n            \"IPAddress\",\n            \"isPressed\",\n            \"sendSysex\",\n            \"pauseMode\",\n            \"gatewayIP\",\n            \"setCursor\",\n            \"getOemKey\",\n            \"tuneWrite\",\n            \"noDisplay\",\n            \"loadImage\",\n            \"switchPIN\",\n            \"onRequest\",\n            \"onReceive\",\n            \"changePIN\",\n            \"playFile\",\n            \"noBuffer\",\n            \"parseInt\",\n            \"overflow\",\n            \"checkPIN\",\n            \"knobRead\",\n            \"beginTFT\",\n            \"bitClear\",\n            \"updateIR\",\n            \"bitWrite\",\n            \"position\",\n            \"writeRGB\",\n            \"highByte\",\n            \"writeRed\",\n            \"setSpeed\",\n            \"readBlue\",\n            \"noStroke\",\n            \"remoteIP\",\n            \"transfer\",\n            \"shutdown\",\n            \"hangCall\",\n            \"beginSMS\",\n            \"endWrite\",\n            \"attached\",\n            \"maintain\",\n            \"noCursor\",\n            \"checkReg\",\n            \"checkPUK\",\n            \"shiftOut\",\n            \"isValid\",\n            \"shiftIn\",\n            \"pulseIn\",\n            \"connect\",\n            \"println\",\n            \"localIP\",\n            \"pinMode\",\n            \"getIMEI\",\n            \"display\",\n            \"noBlink\",\n            \"process\",\n            \"getBand\",\n            \"running\",\n            \"beginSD\",\n            \"drawBMP\",\n            \"lowByte\",\n            \"setBand\",\n            \"release\",\n            \"bitRead\",\n            \"prepare\",\n            \"pointTo\",\n            \"readRed\",\n            \"setMode\",\n            \"noFill\",\n            \"remove\",\n            \"listen\",\n            \"stroke\",\n            \"detach\",\n            \"attach\",\n            \"noTone\",\n            \"exists\",\n            \"buffer\",\n            \"height\",\n            \"bitSet\",\n            \"circle\",\n            \"config\",\n            \"cursor\",\n            \"random\",\n            \"IRread\",\n            \"setDNS\",\n            \"endSMS\",\n            \"getKey\",\n            \"micros\",\n            \"millis\",\n            \"begin\",\n            \"print\",\n            \"write\",\n            \"ready\",\n            \"flush\",\n            \"width\",\n            \"isPIN\",\n            \"blink\",\n            \"clear\",\n            \"press\",\n            \"mkdir\",\n            \"rmdir\",\n            \"close\",\n            \"point\",\n            \"yield\",\n            \"image\",\n            \"BSSID\",\n            \"click\",\n            \"delay\",\n            \"read\",\n            \"text\",\n            \"move\",\n            \"peek\",\n            \"beep\",\n            \"rect\",\n            \"line\",\n            \"open\",\n            \"seek\",\n            \"fill\",\n            \"size\",\n            \"turn\",\n            \"stop\",\n            \"home\",\n            \"find\",\n            \"step\",\n            \"tone\",\n            \"sqrt\",\n            \"RSSI\",\n            \"SSID\",\n            \"end\",\n            \"bit\",\n            \"tan\",\n            \"cos\",\n            \"sin\",\n            \"pow\",\n            \"map\",\n            \"abs\",\n            \"max\",\n            \"min\",\n            \"get\",\n            \"run\",\n            \"put\"\n        ],\n        literal: [\n            \"DIGITAL_MESSAGE\",\n            \"FIRMATA_STRING\",\n            \"ANALOG_MESSAGE\",\n            \"REPORT_DIGITAL\",\n            \"REPORT_ANALOG\",\n            \"INPUT_PULLUP\",\n            \"SET_PIN_MODE\",\n            \"INTERNAL2V56\",\n            \"SYSTEM_RESET\",\n            \"LED_BUILTIN\",\n            \"INTERNAL1V1\",\n            \"SYSEX_START\",\n            \"INTERNAL\",\n            \"EXTERNAL\",\n            \"DEFAULT\",\n            \"OUTPUT\",\n            \"INPUT\",\n            \"HIGH\",\n            \"LOW\"\n        ]\n    };\n    const ARDUINO = cPlusPlus(hljs);\n    const kws = /** @type {Record<string,any>} */ ARDUINO.keywords;\n    kws.type = [\n        ...kws.type,\n        ...ARDUINO_KW.type\n    ];\n    kws.literal = [\n        ...kws.literal,\n        ...ARDUINO_KW.literal\n    ];\n    kws.built_in = [\n        ...kws.built_in,\n        ...ARDUINO_KW.built_in\n    ];\n    kws._hints = ARDUINO_KW._hints;\n    ARDUINO.name = \"Arduino\";\n    ARDUINO.aliases = [\n        \"ino\"\n    ];\n    ARDUINO.supersetOf = \"cpp\";\n    return ARDUINO;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/arduino.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/bash.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/bash.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ bash)\n/* harmony export */ });\n/*\nLanguage: Bash\nAuthor: vah <vahtenberg@gmail.com>\nContributrors: Benjamin Pannell <contact@sierrasoftworks.com>\nWebsite: https://www.gnu.org/software/bash/\nCategory: common, scripting\n*/ /** @type LanguageFn */ function bash(hljs) {\n    const regex = hljs.regex;\n    const VAR = {};\n    const BRACED_VAR = {\n        begin: /\\$\\{/,\n        end: /\\}/,\n        contains: [\n            \"self\",\n            {\n                begin: /:-/,\n                contains: [\n                    VAR\n                ]\n            } // default values\n        ]\n    };\n    Object.assign(VAR, {\n        className: \"variable\",\n        variants: [\n            {\n                begin: regex.concat(/\\$[\\w\\d#@][\\w\\d_]*/, // negative look-ahead tries to avoid matching patterns that are not\n                // Perl at all like $ident$, @ident@, etc.\n                `(?![\\\\w\\\\d])(?![$])`)\n            },\n            BRACED_VAR\n        ]\n    });\n    const SUBST = {\n        className: \"subst\",\n        begin: /\\$\\(/,\n        end: /\\)/,\n        contains: [\n            hljs.BACKSLASH_ESCAPE\n        ]\n    };\n    const COMMENT = hljs.inherit(hljs.COMMENT(), {\n        match: [\n            /(^|\\s)/,\n            /#.*$/\n        ],\n        scope: {\n            2: \"comment\"\n        }\n    });\n    const HERE_DOC = {\n        begin: /<<-?\\s*(?=\\w+)/,\n        starts: {\n            contains: [\n                hljs.END_SAME_AS_BEGIN({\n                    begin: /(\\w+)/,\n                    end: /(\\w+)/,\n                    className: \"string\"\n                })\n            ]\n        }\n    };\n    const QUOTE_STRING = {\n        className: \"string\",\n        begin: /\"/,\n        end: /\"/,\n        contains: [\n            hljs.BACKSLASH_ESCAPE,\n            VAR,\n            SUBST\n        ]\n    };\n    SUBST.contains.push(QUOTE_STRING);\n    const ESCAPED_QUOTE = {\n        match: /\\\\\"/\n    };\n    const APOS_STRING = {\n        className: \"string\",\n        begin: /'/,\n        end: /'/\n    };\n    const ESCAPED_APOS = {\n        match: /\\\\'/\n    };\n    const ARITHMETIC = {\n        begin: /\\$?\\(\\(/,\n        end: /\\)\\)/,\n        contains: [\n            {\n                begin: /\\d+#[0-9a-f]+/,\n                className: \"number\"\n            },\n            hljs.NUMBER_MODE,\n            VAR\n        ]\n    };\n    const SH_LIKE_SHELLS = [\n        \"fish\",\n        \"bash\",\n        \"zsh\",\n        \"sh\",\n        \"csh\",\n        \"ksh\",\n        \"tcsh\",\n        \"dash\",\n        \"scsh\"\n    ];\n    const KNOWN_SHEBANG = hljs.SHEBANG({\n        binary: `(${SH_LIKE_SHELLS.join(\"|\")})`,\n        relevance: 10\n    });\n    const FUNCTION = {\n        className: \"function\",\n        begin: /\\w[\\w\\d_]*\\s*\\(\\s*\\)\\s*\\{/,\n        returnBegin: true,\n        contains: [\n            hljs.inherit(hljs.TITLE_MODE, {\n                begin: /\\w[\\w\\d_]*/\n            })\n        ],\n        relevance: 0\n    };\n    const KEYWORDS = [\n        \"if\",\n        \"then\",\n        \"else\",\n        \"elif\",\n        \"fi\",\n        \"time\",\n        \"for\",\n        \"while\",\n        \"until\",\n        \"in\",\n        \"do\",\n        \"done\",\n        \"case\",\n        \"esac\",\n        \"coproc\",\n        \"function\",\n        \"select\"\n    ];\n    const LITERALS = [\n        \"true\",\n        \"false\"\n    ];\n    // to consume paths to prevent keyword matches inside them\n    const PATH_MODE = {\n        match: /(\\/[a-z._-]+)+/\n    };\n    // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n    const SHELL_BUILT_INS = [\n        \"break\",\n        \"cd\",\n        \"continue\",\n        \"eval\",\n        \"exec\",\n        \"exit\",\n        \"export\",\n        \"getopts\",\n        \"hash\",\n        \"pwd\",\n        \"readonly\",\n        \"return\",\n        \"shift\",\n        \"test\",\n        \"times\",\n        \"trap\",\n        \"umask\",\n        \"unset\"\n    ];\n    const BASH_BUILT_INS = [\n        \"alias\",\n        \"bind\",\n        \"builtin\",\n        \"caller\",\n        \"command\",\n        \"declare\",\n        \"echo\",\n        \"enable\",\n        \"help\",\n        \"let\",\n        \"local\",\n        \"logout\",\n        \"mapfile\",\n        \"printf\",\n        \"read\",\n        \"readarray\",\n        \"source\",\n        \"sudo\",\n        \"type\",\n        \"typeset\",\n        \"ulimit\",\n        \"unalias\"\n    ];\n    const ZSH_BUILT_INS = [\n        \"autoload\",\n        \"bg\",\n        \"bindkey\",\n        \"bye\",\n        \"cap\",\n        \"chdir\",\n        \"clone\",\n        \"comparguments\",\n        \"compcall\",\n        \"compctl\",\n        \"compdescribe\",\n        \"compfiles\",\n        \"compgroups\",\n        \"compquote\",\n        \"comptags\",\n        \"comptry\",\n        \"compvalues\",\n        \"dirs\",\n        \"disable\",\n        \"disown\",\n        \"echotc\",\n        \"echoti\",\n        \"emulate\",\n        \"fc\",\n        \"fg\",\n        \"float\",\n        \"functions\",\n        \"getcap\",\n        \"getln\",\n        \"history\",\n        \"integer\",\n        \"jobs\",\n        \"kill\",\n        \"limit\",\n        \"log\",\n        \"noglob\",\n        \"popd\",\n        \"print\",\n        \"pushd\",\n        \"pushln\",\n        \"rehash\",\n        \"sched\",\n        \"setcap\",\n        \"setopt\",\n        \"stat\",\n        \"suspend\",\n        \"ttyctl\",\n        \"unfunction\",\n        \"unhash\",\n        \"unlimit\",\n        \"unsetopt\",\n        \"vared\",\n        \"wait\",\n        \"whence\",\n        \"where\",\n        \"which\",\n        \"zcompile\",\n        \"zformat\",\n        \"zftp\",\n        \"zle\",\n        \"zmodload\",\n        \"zparseopts\",\n        \"zprof\",\n        \"zpty\",\n        \"zregexparse\",\n        \"zsocket\",\n        \"zstyle\",\n        \"ztcp\"\n    ];\n    const GNU_CORE_UTILS = [\n        \"chcon\",\n        \"chgrp\",\n        \"chown\",\n        \"chmod\",\n        \"cp\",\n        \"dd\",\n        \"df\",\n        \"dir\",\n        \"dircolors\",\n        \"ln\",\n        \"ls\",\n        \"mkdir\",\n        \"mkfifo\",\n        \"mknod\",\n        \"mktemp\",\n        \"mv\",\n        \"realpath\",\n        \"rm\",\n        \"rmdir\",\n        \"shred\",\n        \"sync\",\n        \"touch\",\n        \"truncate\",\n        \"vdir\",\n        \"b2sum\",\n        \"base32\",\n        \"base64\",\n        \"cat\",\n        \"cksum\",\n        \"comm\",\n        \"csplit\",\n        \"cut\",\n        \"expand\",\n        \"fmt\",\n        \"fold\",\n        \"head\",\n        \"join\",\n        \"md5sum\",\n        \"nl\",\n        \"numfmt\",\n        \"od\",\n        \"paste\",\n        \"ptx\",\n        \"pr\",\n        \"sha1sum\",\n        \"sha224sum\",\n        \"sha256sum\",\n        \"sha384sum\",\n        \"sha512sum\",\n        \"shuf\",\n        \"sort\",\n        \"split\",\n        \"sum\",\n        \"tac\",\n        \"tail\",\n        \"tr\",\n        \"tsort\",\n        \"unexpand\",\n        \"uniq\",\n        \"wc\",\n        \"arch\",\n        \"basename\",\n        \"chroot\",\n        \"date\",\n        \"dirname\",\n        \"du\",\n        \"echo\",\n        \"env\",\n        \"expr\",\n        \"factor\",\n        // \"false\", // keyword literal already\n        \"groups\",\n        \"hostid\",\n        \"id\",\n        \"link\",\n        \"logname\",\n        \"nice\",\n        \"nohup\",\n        \"nproc\",\n        \"pathchk\",\n        \"pinky\",\n        \"printenv\",\n        \"printf\",\n        \"pwd\",\n        \"readlink\",\n        \"runcon\",\n        \"seq\",\n        \"sleep\",\n        \"stat\",\n        \"stdbuf\",\n        \"stty\",\n        \"tee\",\n        \"test\",\n        \"timeout\",\n        // \"true\", // keyword literal already\n        \"tty\",\n        \"uname\",\n        \"unlink\",\n        \"uptime\",\n        \"users\",\n        \"who\",\n        \"whoami\",\n        \"yes\"\n    ];\n    return {\n        name: \"Bash\",\n        aliases: [\n            \"sh\",\n            \"zsh\"\n        ],\n        keywords: {\n            $pattern: /\\b[a-z][a-z0-9._-]+\\b/,\n            keyword: KEYWORDS,\n            literal: LITERALS,\n            built_in: [\n                ...SHELL_BUILT_INS,\n                ...BASH_BUILT_INS,\n                // Shell modifiers\n                \"set\",\n                \"shopt\",\n                ...ZSH_BUILT_INS,\n                ...GNU_CORE_UTILS\n            ]\n        },\n        contains: [\n            KNOWN_SHEBANG,\n            hljs.SHEBANG(),\n            FUNCTION,\n            ARITHMETIC,\n            COMMENT,\n            HERE_DOC,\n            PATH_MODE,\n            QUOTE_STRING,\n            ESCAPED_QUOTE,\n            APOS_STRING,\n            ESCAPED_APOS,\n            VAR\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/bash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/c.js":
/*!*****************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/c.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ c)\n/* harmony export */ });\n/*\nLanguage: C\nCategory: common, system\nWebsite: https://en.wikipedia.org/wiki/C_(programming_language)\n*/ /** @type LanguageFn */ function c(hljs) {\n    const regex = hljs.regex;\n    // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n    // not include such support nor can we be sure all the grammars depending\n    // on it would desire this behavior\n    const C_LINE_COMMENT_MODE = hljs.COMMENT(\"//\", \"$\", {\n        contains: [\n            {\n                begin: /\\\\\\n/\n            }\n        ]\n    });\n    const DECLTYPE_AUTO_RE = \"decltype\\\\(auto\\\\)\";\n    const NAMESPACE_RE = \"[a-zA-Z_]\\\\w*::\";\n    const TEMPLATE_ARGUMENT_RE = \"<[^<>]+>\";\n    const FUNCTION_TYPE_RE = \"(\" + DECLTYPE_AUTO_RE + \"|\" + regex.optional(NAMESPACE_RE) + \"[a-zA-Z_]\\\\w*\" + regex.optional(TEMPLATE_ARGUMENT_RE) + \")\";\n    const TYPES = {\n        className: \"type\",\n        variants: [\n            {\n                begin: \"\\\\b[a-z\\\\d_]*_t\\\\b\"\n            },\n            {\n                match: /\\batomic_[a-z]{3,6}\\b/\n            }\n        ]\n    };\n    // https://en.cppreference.com/w/cpp/language/escape\n    // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n    const CHARACTER_ESCAPES = \"\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)\";\n    const STRINGS = {\n        className: \"string\",\n        variants: [\n            {\n                begin: '(u8?|U|L)?\"',\n                end: '\"',\n                illegal: \"\\\\n\",\n                contains: [\n                    hljs.BACKSLASH_ESCAPE\n                ]\n            },\n            {\n                begin: \"(u8?|U|L)?'(\" + CHARACTER_ESCAPES + \"|.)\",\n                end: \"'\",\n                illegal: \".\"\n            },\n            hljs.END_SAME_AS_BEGIN({\n                begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n                end: /\\)([^()\\\\ ]{0,16})\"/\n            })\n        ]\n    };\n    const NUMBERS = {\n        className: \"number\",\n        variants: [\n            {\n                match: /\\b(0b[01']+)/\n            },\n            {\n                match: /(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)/\n            },\n            {\n                match: /(-?)\\b(0[xX][a-fA-F0-9]+(?:'[a-fA-F0-9]+)*(?:\\.[a-fA-F0-9]*(?:'[a-fA-F0-9]*)*)?(?:[pP][-+]?[0-9]+)?(l|L)?(u|U)?)/\n            },\n            {\n                match: /(-?)\\b\\d+(?:'\\d+)*(?:\\.\\d*(?:'\\d*)*)?(?:[eE][-+]?\\d+)?/\n            }\n        ],\n        relevance: 0\n    };\n    const PREPROCESSOR = {\n        className: \"meta\",\n        begin: /#\\s*[a-z]+\\b/,\n        end: /$/,\n        keywords: {\n            keyword: \"if else elif endif define undef warning error line \" + \"pragma _Pragma ifdef ifndef elifdef elifndef include\"\n        },\n        contains: [\n            {\n                begin: /\\\\\\n/,\n                relevance: 0\n            },\n            hljs.inherit(STRINGS, {\n                className: \"string\"\n            }),\n            {\n                className: \"string\",\n                begin: /<.*?>/\n            },\n            C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE\n        ]\n    };\n    const TITLE_MODE = {\n        className: \"title\",\n        begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,\n        relevance: 0\n    };\n    const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + \"\\\\s*\\\\(\";\n    const C_KEYWORDS = [\n        \"asm\",\n        \"auto\",\n        \"break\",\n        \"case\",\n        \"continue\",\n        \"default\",\n        \"do\",\n        \"else\",\n        \"enum\",\n        \"extern\",\n        \"for\",\n        \"fortran\",\n        \"goto\",\n        \"if\",\n        \"inline\",\n        \"register\",\n        \"restrict\",\n        \"return\",\n        \"sizeof\",\n        \"typeof\",\n        \"typeof_unqual\",\n        \"struct\",\n        \"switch\",\n        \"typedef\",\n        \"union\",\n        \"volatile\",\n        \"while\",\n        \"_Alignas\",\n        \"_Alignof\",\n        \"_Atomic\",\n        \"_Generic\",\n        \"_Noreturn\",\n        \"_Static_assert\",\n        \"_Thread_local\",\n        // aliases\n        \"alignas\",\n        \"alignof\",\n        \"noreturn\",\n        \"static_assert\",\n        \"thread_local\",\n        // not a C keyword but is, for all intents and purposes, treated exactly like one.\n        \"_Pragma\"\n    ];\n    const C_TYPES = [\n        \"float\",\n        \"double\",\n        \"signed\",\n        \"unsigned\",\n        \"int\",\n        \"short\",\n        \"long\",\n        \"char\",\n        \"void\",\n        \"_Bool\",\n        \"_BitInt\",\n        \"_Complex\",\n        \"_Imaginary\",\n        \"_Decimal32\",\n        \"_Decimal64\",\n        \"_Decimal96\",\n        \"_Decimal128\",\n        \"_Decimal64x\",\n        \"_Decimal128x\",\n        \"_Float16\",\n        \"_Float32\",\n        \"_Float64\",\n        \"_Float128\",\n        \"_Float32x\",\n        \"_Float64x\",\n        \"_Float128x\",\n        // modifiers\n        \"const\",\n        \"static\",\n        \"constexpr\",\n        // aliases\n        \"complex\",\n        \"bool\",\n        \"imaginary\"\n    ];\n    const KEYWORDS = {\n        keyword: C_KEYWORDS,\n        type: C_TYPES,\n        literal: \"true false NULL\",\n        // TODO: apply hinting work similar to what was done in cpp.js\n        built_in: \"std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream \" + \"auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set \" + \"unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos \" + \"asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp \" + \"fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper \" + \"isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow \" + \"printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp \" + \"strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan \" + \"vfprintf vprintf vsprintf endl initializer_list unique_ptr\"\n    };\n    const EXPRESSION_CONTAINS = [\n        PREPROCESSOR,\n        TYPES,\n        C_LINE_COMMENT_MODE,\n        hljs.C_BLOCK_COMMENT_MODE,\n        NUMBERS,\n        STRINGS\n    ];\n    const EXPRESSION_CONTEXT = {\n        // This mode covers expression context where we can't expect a function\n        // definition and shouldn't highlight anything that looks like one:\n        // `return some()`, `else if()`, `(x*sum(1, 2))`\n        variants: [\n            {\n                begin: /=/,\n                end: /;/\n            },\n            {\n                begin: /\\(/,\n                end: /\\)/\n            },\n            {\n                beginKeywords: \"new throw return else\",\n                end: /;/\n            }\n        ],\n        keywords: KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                keywords: KEYWORDS,\n                contains: EXPRESSION_CONTAINS.concat([\n                    \"self\"\n                ]),\n                relevance: 0\n            }\n        ]),\n        relevance: 0\n    };\n    const FUNCTION_DECLARATION = {\n        begin: \"(\" + FUNCTION_TYPE_RE + \"[\\\\*&\\\\s]+)+\" + FUNCTION_TITLE,\n        returnBegin: true,\n        end: /[{;=]/,\n        excludeEnd: true,\n        keywords: KEYWORDS,\n        illegal: /[^\\w\\s\\*&:<>.]/,\n        contains: [\n            {\n                begin: DECLTYPE_AUTO_RE,\n                keywords: KEYWORDS,\n                relevance: 0\n            },\n            {\n                begin: FUNCTION_TITLE,\n                returnBegin: true,\n                contains: [\n                    hljs.inherit(TITLE_MODE, {\n                        className: \"title.function\"\n                    })\n                ],\n                relevance: 0\n            },\n            // allow for multiple declarations, e.g.:\n            // extern void f(int), g(char);\n            {\n                relevance: 0,\n                match: /,/\n            },\n            {\n                className: \"params\",\n                begin: /\\(/,\n                end: /\\)/,\n                keywords: KEYWORDS,\n                relevance: 0,\n                contains: [\n                    C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE,\n                    STRINGS,\n                    NUMBERS,\n                    TYPES,\n                    // Count matching parentheses.\n                    {\n                        begin: /\\(/,\n                        end: /\\)/,\n                        keywords: KEYWORDS,\n                        relevance: 0,\n                        contains: [\n                            \"self\",\n                            C_LINE_COMMENT_MODE,\n                            hljs.C_BLOCK_COMMENT_MODE,\n                            STRINGS,\n                            NUMBERS,\n                            TYPES\n                        ]\n                    }\n                ]\n            },\n            TYPES,\n            C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            PREPROCESSOR\n        ]\n    };\n    return {\n        name: \"C\",\n        aliases: [\n            \"h\"\n        ],\n        keywords: KEYWORDS,\n        // Until differentiations are added between `c` and `cpp`, `c` will\n        // not be auto-detected to avoid auto-detect conflicts between C and C++\n        disableAutodetect: true,\n        illegal: \"</\",\n        contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, EXPRESSION_CONTAINS, [\n            PREPROCESSOR,\n            {\n                begin: hljs.IDENT_RE + \"::\",\n                keywords: KEYWORDS\n            },\n            {\n                className: \"class\",\n                beginKeywords: \"enum class struct union\",\n                end: /[{;:<>=]/,\n                contains: [\n                    {\n                        beginKeywords: \"final class struct\"\n                    },\n                    hljs.TITLE_MODE\n                ]\n            }\n        ]),\n        exports: {\n            preprocessor: PREPROCESSOR,\n            strings: STRINGS,\n            keywords: KEYWORDS\n        }\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/c.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/cpp.js":
/*!*******************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/cpp.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ cpp)\n/* harmony export */ });\n/*\nLanguage: C++\nCategory: common, system\nWebsite: https://isocpp.org\n*/ /** @type LanguageFn */ function cpp(hljs) {\n    const regex = hljs.regex;\n    // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n    // not include such support nor can we be sure all the grammars depending\n    // on it would desire this behavior\n    const C_LINE_COMMENT_MODE = hljs.COMMENT(\"//\", \"$\", {\n        contains: [\n            {\n                begin: /\\\\\\n/\n            }\n        ]\n    });\n    const DECLTYPE_AUTO_RE = \"decltype\\\\(auto\\\\)\";\n    const NAMESPACE_RE = \"[a-zA-Z_]\\\\w*::\";\n    const TEMPLATE_ARGUMENT_RE = \"<[^<>]+>\";\n    const FUNCTION_TYPE_RE = \"(?!struct)(\" + DECLTYPE_AUTO_RE + \"|\" + regex.optional(NAMESPACE_RE) + \"[a-zA-Z_]\\\\w*\" + regex.optional(TEMPLATE_ARGUMENT_RE) + \")\";\n    const CPP_PRIMITIVE_TYPES = {\n        className: \"type\",\n        begin: \"\\\\b[a-z\\\\d_]*_t\\\\b\"\n    };\n    // https://en.cppreference.com/w/cpp/language/escape\n    // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n    const CHARACTER_ESCAPES = \"\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)\";\n    const STRINGS = {\n        className: \"string\",\n        variants: [\n            {\n                begin: '(u8?|U|L)?\"',\n                end: '\"',\n                illegal: \"\\\\n\",\n                contains: [\n                    hljs.BACKSLASH_ESCAPE\n                ]\n            },\n            {\n                begin: \"(u8?|U|L)?'(\" + CHARACTER_ESCAPES + \"|.)\",\n                end: \"'\",\n                illegal: \".\"\n            },\n            hljs.END_SAME_AS_BEGIN({\n                begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n                end: /\\)([^()\\\\ ]{0,16})\"/\n            })\n        ]\n    };\n    const NUMBERS = {\n        className: \"number\",\n        variants: [\n            // Floating-point literal.\n            {\n                begin: \"[+-]?(?:\" // Leading sign.\n                 + \"(?:\" + \"[0-9](?:'?[0-9])*\\\\.(?:[0-9](?:'?[0-9])*)?\" + \"|\\\\.[0-9](?:'?[0-9])*\" + \")(?:[Ee][+-]?[0-9](?:'?[0-9])*)?\" + \"|[0-9](?:'?[0-9])*[Ee][+-]?[0-9](?:'?[0-9])*\" + \"|0[Xx](?:\" + \"[0-9A-Fa-f](?:'?[0-9A-Fa-f])*(?:\\\\.(?:[0-9A-Fa-f](?:'?[0-9A-Fa-f])*)?)?\" + \"|\\\\.[0-9A-Fa-f](?:'?[0-9A-Fa-f])*\" + \")[Pp][+-]?[0-9](?:'?[0-9])*\" + \")(?:\" // Literal suffixes.\n                 + \"[Ff](?:16|32|64|128)?\" + \"|(BF|bf)16\" + \"|[Ll]\" + \"|\" // Literal suffix is optional.\n                 + \")\"\n            },\n            // Integer literal.\n            {\n                begin: \"[+-]?\\\\b(?:\" // Leading sign.\n                 + \"0[Bb][01](?:'?[01])*\" // Binary.\n                 + \"|0[Xx][0-9A-Fa-f](?:'?[0-9A-Fa-f])*\" // Hexadecimal.\n                 + \"|0(?:'?[0-7])*\" // Octal or just a lone zero.\n                 + \"|[1-9](?:'?[0-9])*\" // Decimal.\n                 + \")(?:\" // Literal suffixes.\n                 + \"[Uu](?:LL?|ll?)\" + \"|[Uu][Zz]?\" + \"|(?:LL?|ll?)[Uu]?\" + \"|[Zz][Uu]\" + \"|\" // Literal suffix is optional.\n                 + \")\"\n            }\n        ],\n        relevance: 0\n    };\n    const PREPROCESSOR = {\n        className: \"meta\",\n        begin: /#\\s*[a-z]+\\b/,\n        end: /$/,\n        keywords: {\n            keyword: \"if else elif endif define undef warning error line \" + \"pragma _Pragma ifdef ifndef include\"\n        },\n        contains: [\n            {\n                begin: /\\\\\\n/,\n                relevance: 0\n            },\n            hljs.inherit(STRINGS, {\n                className: \"string\"\n            }),\n            {\n                className: \"string\",\n                begin: /<.*?>/\n            },\n            C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE\n        ]\n    };\n    const TITLE_MODE = {\n        className: \"title\",\n        begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,\n        relevance: 0\n    };\n    const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + \"\\\\s*\\\\(\";\n    // https://en.cppreference.com/w/cpp/keyword\n    const RESERVED_KEYWORDS = [\n        \"alignas\",\n        \"alignof\",\n        \"and\",\n        \"and_eq\",\n        \"asm\",\n        \"atomic_cancel\",\n        \"atomic_commit\",\n        \"atomic_noexcept\",\n        \"auto\",\n        \"bitand\",\n        \"bitor\",\n        \"break\",\n        \"case\",\n        \"catch\",\n        \"class\",\n        \"co_await\",\n        \"co_return\",\n        \"co_yield\",\n        \"compl\",\n        \"concept\",\n        \"const_cast|10\",\n        \"consteval\",\n        \"constexpr\",\n        \"constinit\",\n        \"continue\",\n        \"decltype\",\n        \"default\",\n        \"delete\",\n        \"do\",\n        \"dynamic_cast|10\",\n        \"else\",\n        \"enum\",\n        \"explicit\",\n        \"export\",\n        \"extern\",\n        \"false\",\n        \"final\",\n        \"for\",\n        \"friend\",\n        \"goto\",\n        \"if\",\n        \"import\",\n        \"inline\",\n        \"module\",\n        \"mutable\",\n        \"namespace\",\n        \"new\",\n        \"noexcept\",\n        \"not\",\n        \"not_eq\",\n        \"nullptr\",\n        \"operator\",\n        \"or\",\n        \"or_eq\",\n        \"override\",\n        \"private\",\n        \"protected\",\n        \"public\",\n        \"reflexpr\",\n        \"register\",\n        \"reinterpret_cast|10\",\n        \"requires\",\n        \"return\",\n        \"sizeof\",\n        \"static_assert\",\n        \"static_cast|10\",\n        \"struct\",\n        \"switch\",\n        \"synchronized\",\n        \"template\",\n        \"this\",\n        \"thread_local\",\n        \"throw\",\n        \"transaction_safe\",\n        \"transaction_safe_dynamic\",\n        \"true\",\n        \"try\",\n        \"typedef\",\n        \"typeid\",\n        \"typename\",\n        \"union\",\n        \"using\",\n        \"virtual\",\n        \"volatile\",\n        \"while\",\n        \"xor\",\n        \"xor_eq\"\n    ];\n    // https://en.cppreference.com/w/cpp/keyword\n    const RESERVED_TYPES = [\n        \"bool\",\n        \"char\",\n        \"char16_t\",\n        \"char32_t\",\n        \"char8_t\",\n        \"double\",\n        \"float\",\n        \"int\",\n        \"long\",\n        \"short\",\n        \"void\",\n        \"wchar_t\",\n        \"unsigned\",\n        \"signed\",\n        \"const\",\n        \"static\"\n    ];\n    const TYPE_HINTS = [\n        \"any\",\n        \"auto_ptr\",\n        \"barrier\",\n        \"binary_semaphore\",\n        \"bitset\",\n        \"complex\",\n        \"condition_variable\",\n        \"condition_variable_any\",\n        \"counting_semaphore\",\n        \"deque\",\n        \"false_type\",\n        \"flat_map\",\n        \"flat_set\",\n        \"future\",\n        \"imaginary\",\n        \"initializer_list\",\n        \"istringstream\",\n        \"jthread\",\n        \"latch\",\n        \"lock_guard\",\n        \"multimap\",\n        \"multiset\",\n        \"mutex\",\n        \"optional\",\n        \"ostringstream\",\n        \"packaged_task\",\n        \"pair\",\n        \"promise\",\n        \"priority_queue\",\n        \"queue\",\n        \"recursive_mutex\",\n        \"recursive_timed_mutex\",\n        \"scoped_lock\",\n        \"set\",\n        \"shared_future\",\n        \"shared_lock\",\n        \"shared_mutex\",\n        \"shared_timed_mutex\",\n        \"shared_ptr\",\n        \"stack\",\n        \"string_view\",\n        \"stringstream\",\n        \"timed_mutex\",\n        \"thread\",\n        \"true_type\",\n        \"tuple\",\n        \"unique_lock\",\n        \"unique_ptr\",\n        \"unordered_map\",\n        \"unordered_multimap\",\n        \"unordered_multiset\",\n        \"unordered_set\",\n        \"variant\",\n        \"vector\",\n        \"weak_ptr\",\n        \"wstring\",\n        \"wstring_view\"\n    ];\n    const FUNCTION_HINTS = [\n        \"abort\",\n        \"abs\",\n        \"acos\",\n        \"apply\",\n        \"as_const\",\n        \"asin\",\n        \"atan\",\n        \"atan2\",\n        \"calloc\",\n        \"ceil\",\n        \"cerr\",\n        \"cin\",\n        \"clog\",\n        \"cos\",\n        \"cosh\",\n        \"cout\",\n        \"declval\",\n        \"endl\",\n        \"exchange\",\n        \"exit\",\n        \"exp\",\n        \"fabs\",\n        \"floor\",\n        \"fmod\",\n        \"forward\",\n        \"fprintf\",\n        \"fputs\",\n        \"free\",\n        \"frexp\",\n        \"fscanf\",\n        \"future\",\n        \"invoke\",\n        \"isalnum\",\n        \"isalpha\",\n        \"iscntrl\",\n        \"isdigit\",\n        \"isgraph\",\n        \"islower\",\n        \"isprint\",\n        \"ispunct\",\n        \"isspace\",\n        \"isupper\",\n        \"isxdigit\",\n        \"labs\",\n        \"launder\",\n        \"ldexp\",\n        \"log\",\n        \"log10\",\n        \"make_pair\",\n        \"make_shared\",\n        \"make_shared_for_overwrite\",\n        \"make_tuple\",\n        \"make_unique\",\n        \"malloc\",\n        \"memchr\",\n        \"memcmp\",\n        \"memcpy\",\n        \"memset\",\n        \"modf\",\n        \"move\",\n        \"pow\",\n        \"printf\",\n        \"putchar\",\n        \"puts\",\n        \"realloc\",\n        \"scanf\",\n        \"sin\",\n        \"sinh\",\n        \"snprintf\",\n        \"sprintf\",\n        \"sqrt\",\n        \"sscanf\",\n        \"std\",\n        \"stderr\",\n        \"stdin\",\n        \"stdout\",\n        \"strcat\",\n        \"strchr\",\n        \"strcmp\",\n        \"strcpy\",\n        \"strcspn\",\n        \"strlen\",\n        \"strncat\",\n        \"strncmp\",\n        \"strncpy\",\n        \"strpbrk\",\n        \"strrchr\",\n        \"strspn\",\n        \"strstr\",\n        \"swap\",\n        \"tan\",\n        \"tanh\",\n        \"terminate\",\n        \"to_underlying\",\n        \"tolower\",\n        \"toupper\",\n        \"vfprintf\",\n        \"visit\",\n        \"vprintf\",\n        \"vsprintf\"\n    ];\n    const LITERALS = [\n        \"NULL\",\n        \"false\",\n        \"nullopt\",\n        \"nullptr\",\n        \"true\"\n    ];\n    // https://en.cppreference.com/w/cpp/keyword\n    const BUILT_IN = [\n        \"_Pragma\"\n    ];\n    const CPP_KEYWORDS = {\n        type: RESERVED_TYPES,\n        keyword: RESERVED_KEYWORDS,\n        literal: LITERALS,\n        built_in: BUILT_IN,\n        _type_hints: TYPE_HINTS\n    };\n    const FUNCTION_DISPATCH = {\n        className: \"function.dispatch\",\n        relevance: 0,\n        keywords: {\n            // Only for relevance, not highlighting.\n            _hint: FUNCTION_HINTS\n        },\n        begin: regex.concat(/\\b/, /(?!decltype)/, /(?!if)/, /(?!for)/, /(?!switch)/, /(?!while)/, hljs.IDENT_RE, regex.lookahead(/(<[^<>]+>|)\\s*\\(/))\n    };\n    const EXPRESSION_CONTAINS = [\n        FUNCTION_DISPATCH,\n        PREPROCESSOR,\n        CPP_PRIMITIVE_TYPES,\n        C_LINE_COMMENT_MODE,\n        hljs.C_BLOCK_COMMENT_MODE,\n        NUMBERS,\n        STRINGS\n    ];\n    const EXPRESSION_CONTEXT = {\n        // This mode covers expression context where we can't expect a function\n        // definition and shouldn't highlight anything that looks like one:\n        // `return some()`, `else if()`, `(x*sum(1, 2))`\n        variants: [\n            {\n                begin: /=/,\n                end: /;/\n            },\n            {\n                begin: /\\(/,\n                end: /\\)/\n            },\n            {\n                beginKeywords: \"new throw return else\",\n                end: /;/\n            }\n        ],\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                keywords: CPP_KEYWORDS,\n                contains: EXPRESSION_CONTAINS.concat([\n                    \"self\"\n                ]),\n                relevance: 0\n            }\n        ]),\n        relevance: 0\n    };\n    const FUNCTION_DECLARATION = {\n        className: \"function\",\n        begin: \"(\" + FUNCTION_TYPE_RE + \"[\\\\*&\\\\s]+)+\" + FUNCTION_TITLE,\n        returnBegin: true,\n        end: /[{;=]/,\n        excludeEnd: true,\n        keywords: CPP_KEYWORDS,\n        illegal: /[^\\w\\s\\*&:<>.]/,\n        contains: [\n            {\n                begin: DECLTYPE_AUTO_RE,\n                keywords: CPP_KEYWORDS,\n                relevance: 0\n            },\n            {\n                begin: FUNCTION_TITLE,\n                returnBegin: true,\n                contains: [\n                    TITLE_MODE\n                ],\n                relevance: 0\n            },\n            // needed because we do not have look-behind on the below rule\n            // to prevent it from grabbing the final : in a :: pair\n            {\n                begin: /::/,\n                relevance: 0\n            },\n            // initializers\n            {\n                begin: /:/,\n                endsWithParent: true,\n                contains: [\n                    STRINGS,\n                    NUMBERS\n                ]\n            },\n            // allow for multiple declarations, e.g.:\n            // extern void f(int), g(char);\n            {\n                relevance: 0,\n                match: /,/\n            },\n            {\n                className: \"params\",\n                begin: /\\(/,\n                end: /\\)/,\n                keywords: CPP_KEYWORDS,\n                relevance: 0,\n                contains: [\n                    C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE,\n                    STRINGS,\n                    NUMBERS,\n                    CPP_PRIMITIVE_TYPES,\n                    // Count matching parentheses.\n                    {\n                        begin: /\\(/,\n                        end: /\\)/,\n                        keywords: CPP_KEYWORDS,\n                        relevance: 0,\n                        contains: [\n                            \"self\",\n                            C_LINE_COMMENT_MODE,\n                            hljs.C_BLOCK_COMMENT_MODE,\n                            STRINGS,\n                            NUMBERS,\n                            CPP_PRIMITIVE_TYPES\n                        ]\n                    }\n                ]\n            },\n            CPP_PRIMITIVE_TYPES,\n            C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            PREPROCESSOR\n        ]\n    };\n    return {\n        name: \"C++\",\n        aliases: [\n            \"cc\",\n            \"c++\",\n            \"h++\",\n            \"hpp\",\n            \"hh\",\n            \"hxx\",\n            \"cxx\"\n        ],\n        keywords: CPP_KEYWORDS,\n        illegal: \"</\",\n        classNameAliases: {\n            \"function.dispatch\": \"built_in\"\n        },\n        contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, FUNCTION_DISPATCH, EXPRESSION_CONTAINS, [\n            PREPROCESSOR,\n            {\n                begin: \"\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function|flat_map|flat_set)\\\\s*<(?!<)\",\n                end: \">\",\n                keywords: CPP_KEYWORDS,\n                contains: [\n                    \"self\",\n                    CPP_PRIMITIVE_TYPES\n                ]\n            },\n            {\n                begin: hljs.IDENT_RE + \"::\",\n                keywords: CPP_KEYWORDS\n            },\n            {\n                match: [\n                    // extra complexity to deal with `enum class` and `enum struct`\n                    /\\b(?:enum(?:\\s+(?:class|struct))?|class|struct|union)/,\n                    /\\s+/,\n                    /\\w+/\n                ],\n                className: {\n                    1: \"keyword\",\n                    3: \"title.class\"\n                }\n            }\n        ])\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/cpp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/csharp.js":
/*!**********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/csharp.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ csharp)\n/* harmony export */ });\n/*\nLanguage: C#\nAuthor: Jason Diamond <jason@diamond.name>\nContributor: Nicolas LLOBERA <nllobera@gmail.com>, Pieter Vantorre <pietervantorre@gmail.com>, David Pine <david.pine@microsoft.com>\nWebsite: https://docs.microsoft.com/dotnet/csharp/\nCategory: common\n*/ /** @type LanguageFn */ function csharp(hljs) {\n    const BUILT_IN_KEYWORDS = [\n        \"bool\",\n        \"byte\",\n        \"char\",\n        \"decimal\",\n        \"delegate\",\n        \"double\",\n        \"dynamic\",\n        \"enum\",\n        \"float\",\n        \"int\",\n        \"long\",\n        \"nint\",\n        \"nuint\",\n        \"object\",\n        \"sbyte\",\n        \"short\",\n        \"string\",\n        \"ulong\",\n        \"uint\",\n        \"ushort\"\n    ];\n    const FUNCTION_MODIFIERS = [\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"static\",\n        \"internal\",\n        \"protected\",\n        \"abstract\",\n        \"async\",\n        \"extern\",\n        \"override\",\n        \"unsafe\",\n        \"virtual\",\n        \"new\",\n        \"sealed\",\n        \"partial\"\n    ];\n    const LITERAL_KEYWORDS = [\n        \"default\",\n        \"false\",\n        \"null\",\n        \"true\"\n    ];\n    const NORMAL_KEYWORDS = [\n        \"abstract\",\n        \"as\",\n        \"base\",\n        \"break\",\n        \"case\",\n        \"catch\",\n        \"class\",\n        \"const\",\n        \"continue\",\n        \"do\",\n        \"else\",\n        \"event\",\n        \"explicit\",\n        \"extern\",\n        \"finally\",\n        \"fixed\",\n        \"for\",\n        \"foreach\",\n        \"goto\",\n        \"if\",\n        \"implicit\",\n        \"in\",\n        \"interface\",\n        \"internal\",\n        \"is\",\n        \"lock\",\n        \"namespace\",\n        \"new\",\n        \"operator\",\n        \"out\",\n        \"override\",\n        \"params\",\n        \"private\",\n        \"protected\",\n        \"public\",\n        \"readonly\",\n        \"record\",\n        \"ref\",\n        \"return\",\n        \"scoped\",\n        \"sealed\",\n        \"sizeof\",\n        \"stackalloc\",\n        \"static\",\n        \"struct\",\n        \"switch\",\n        \"this\",\n        \"throw\",\n        \"try\",\n        \"typeof\",\n        \"unchecked\",\n        \"unsafe\",\n        \"using\",\n        \"virtual\",\n        \"void\",\n        \"volatile\",\n        \"while\"\n    ];\n    const CONTEXTUAL_KEYWORDS = [\n        \"add\",\n        \"alias\",\n        \"and\",\n        \"ascending\",\n        \"args\",\n        \"async\",\n        \"await\",\n        \"by\",\n        \"descending\",\n        \"dynamic\",\n        \"equals\",\n        \"file\",\n        \"from\",\n        \"get\",\n        \"global\",\n        \"group\",\n        \"init\",\n        \"into\",\n        \"join\",\n        \"let\",\n        \"nameof\",\n        \"not\",\n        \"notnull\",\n        \"on\",\n        \"or\",\n        \"orderby\",\n        \"partial\",\n        \"record\",\n        \"remove\",\n        \"required\",\n        \"scoped\",\n        \"select\",\n        \"set\",\n        \"unmanaged\",\n        \"value|0\",\n        \"var\",\n        \"when\",\n        \"where\",\n        \"with\",\n        \"yield\"\n    ];\n    const KEYWORDS = {\n        keyword: NORMAL_KEYWORDS.concat(CONTEXTUAL_KEYWORDS),\n        built_in: BUILT_IN_KEYWORDS,\n        literal: LITERAL_KEYWORDS\n    };\n    const TITLE_MODE = hljs.inherit(hljs.TITLE_MODE, {\n        begin: \"[a-zA-Z](\\\\.?\\\\w)*\"\n    });\n    const NUMBERS = {\n        className: \"number\",\n        variants: [\n            {\n                begin: \"\\\\b(0b[01']+)\"\n            },\n            {\n                begin: \"(-?)\\\\b([\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)(u|U|l|L|ul|UL|f|F|b|B)\"\n            },\n            {\n                begin: \"(-?)(\\\\b0[xX][a-fA-F0-9']+|(\\\\b[\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)([eE][-+]?[\\\\d']+)?)\"\n            }\n        ],\n        relevance: 0\n    };\n    const RAW_STRING = {\n        className: \"string\",\n        begin: /\"\"\"(\"*)(?!\")(.|\\n)*?\"\"\"\\1/,\n        relevance: 1\n    };\n    const VERBATIM_STRING = {\n        className: \"string\",\n        begin: '@\"',\n        end: '\"',\n        contains: [\n            {\n                begin: '\"\"'\n            }\n        ]\n    };\n    const VERBATIM_STRING_NO_LF = hljs.inherit(VERBATIM_STRING, {\n        illegal: /\\n/\n    });\n    const SUBST = {\n        className: \"subst\",\n        begin: /\\{/,\n        end: /\\}/,\n        keywords: KEYWORDS\n    };\n    const SUBST_NO_LF = hljs.inherit(SUBST, {\n        illegal: /\\n/\n    });\n    const INTERPOLATED_STRING = {\n        className: \"string\",\n        begin: /\\$\"/,\n        end: '\"',\n        illegal: /\\n/,\n        contains: [\n            {\n                begin: /\\{\\{/\n            },\n            {\n                begin: /\\}\\}/\n            },\n            hljs.BACKSLASH_ESCAPE,\n            SUBST_NO_LF\n        ]\n    };\n    const INTERPOLATED_VERBATIM_STRING = {\n        className: \"string\",\n        begin: /\\$@\"/,\n        end: '\"',\n        contains: [\n            {\n                begin: /\\{\\{/\n            },\n            {\n                begin: /\\}\\}/\n            },\n            {\n                begin: '\"\"'\n            },\n            SUBST\n        ]\n    };\n    const INTERPOLATED_VERBATIM_STRING_NO_LF = hljs.inherit(INTERPOLATED_VERBATIM_STRING, {\n        illegal: /\\n/,\n        contains: [\n            {\n                begin: /\\{\\{/\n            },\n            {\n                begin: /\\}\\}/\n            },\n            {\n                begin: '\"\"'\n            },\n            SUBST_NO_LF\n        ]\n    });\n    SUBST.contains = [\n        INTERPOLATED_VERBATIM_STRING,\n        INTERPOLATED_STRING,\n        VERBATIM_STRING,\n        hljs.APOS_STRING_MODE,\n        hljs.QUOTE_STRING_MODE,\n        NUMBERS,\n        hljs.C_BLOCK_COMMENT_MODE\n    ];\n    SUBST_NO_LF.contains = [\n        INTERPOLATED_VERBATIM_STRING_NO_LF,\n        INTERPOLATED_STRING,\n        VERBATIM_STRING_NO_LF,\n        hljs.APOS_STRING_MODE,\n        hljs.QUOTE_STRING_MODE,\n        NUMBERS,\n        hljs.inherit(hljs.C_BLOCK_COMMENT_MODE, {\n            illegal: /\\n/\n        })\n    ];\n    const STRING = {\n        variants: [\n            RAW_STRING,\n            INTERPOLATED_VERBATIM_STRING,\n            INTERPOLATED_STRING,\n            VERBATIM_STRING,\n            hljs.APOS_STRING_MODE,\n            hljs.QUOTE_STRING_MODE\n        ]\n    };\n    const GENERIC_MODIFIER = {\n        begin: \"<\",\n        end: \">\",\n        contains: [\n            {\n                beginKeywords: \"in out\"\n            },\n            TITLE_MODE\n        ]\n    };\n    const TYPE_IDENT_RE = hljs.IDENT_RE + \"(<\" + hljs.IDENT_RE + \"(\\\\s*,\\\\s*\" + hljs.IDENT_RE + \")*>)?(\\\\[\\\\])?\";\n    const AT_IDENTIFIER = {\n        // prevents expressions like `@class` from incorrect flagging\n        // `class` as a keyword\n        begin: \"@\" + hljs.IDENT_RE,\n        relevance: 0\n    };\n    return {\n        name: \"C#\",\n        aliases: [\n            \"cs\",\n            \"c#\"\n        ],\n        keywords: KEYWORDS,\n        illegal: /::/,\n        contains: [\n            hljs.COMMENT(\"///\", \"$\", {\n                returnBegin: true,\n                contains: [\n                    {\n                        className: \"doctag\",\n                        variants: [\n                            {\n                                begin: \"///\",\n                                relevance: 0\n                            },\n                            {\n                                begin: \"<!--|-->\"\n                            },\n                            {\n                                begin: \"</?\",\n                                end: \">\"\n                            }\n                        ]\n                    }\n                ]\n            }),\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            {\n                className: \"meta\",\n                begin: \"#\",\n                end: \"$\",\n                keywords: {\n                    keyword: \"if else elif endif define undef warning error line region endregion pragma checksum\"\n                }\n            },\n            STRING,\n            NUMBERS,\n            {\n                beginKeywords: \"class interface\",\n                relevance: 0,\n                end: /[{;=]/,\n                illegal: /[^\\s:,]/,\n                contains: [\n                    {\n                        beginKeywords: \"where class\"\n                    },\n                    TITLE_MODE,\n                    GENERIC_MODIFIER,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            {\n                beginKeywords: \"namespace\",\n                relevance: 0,\n                end: /[{;=]/,\n                illegal: /[^\\s:]/,\n                contains: [\n                    TITLE_MODE,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            {\n                beginKeywords: \"record\",\n                relevance: 0,\n                end: /[{;=]/,\n                illegal: /[^\\s:]/,\n                contains: [\n                    TITLE_MODE,\n                    GENERIC_MODIFIER,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            {\n                // [Attributes(\"\")]\n                className: \"meta\",\n                begin: \"^\\\\s*\\\\[(?=[\\\\w])\",\n                excludeBegin: true,\n                end: \"\\\\]\",\n                excludeEnd: true,\n                contains: [\n                    {\n                        className: \"string\",\n                        begin: /\"/,\n                        end: /\"/\n                    }\n                ]\n            },\n            {\n                // Expression keywords prevent 'keyword Name(...)' from being\n                // recognized as a function definition\n                beginKeywords: \"new return throw await else\",\n                relevance: 0\n            },\n            {\n                className: \"function\",\n                begin: \"(\" + TYPE_IDENT_RE + \"\\\\s+)+\" + hljs.IDENT_RE + \"\\\\s*(<[^=]+>\\\\s*)?\\\\(\",\n                returnBegin: true,\n                end: /\\s*[{;=]/,\n                excludeEnd: true,\n                keywords: KEYWORDS,\n                contains: [\n                    // prevents these from being highlighted `title`\n                    {\n                        beginKeywords: FUNCTION_MODIFIERS.join(\" \"),\n                        relevance: 0\n                    },\n                    {\n                        begin: hljs.IDENT_RE + \"\\\\s*(<[^=]+>\\\\s*)?\\\\(\",\n                        returnBegin: true,\n                        contains: [\n                            hljs.TITLE_MODE,\n                            GENERIC_MODIFIER\n                        ],\n                        relevance: 0\n                    },\n                    {\n                        match: /\\(\\)/\n                    },\n                    {\n                        className: \"params\",\n                        begin: /\\(/,\n                        end: /\\)/,\n                        excludeBegin: true,\n                        excludeEnd: true,\n                        keywords: KEYWORDS,\n                        relevance: 0,\n                        contains: [\n                            STRING,\n                            NUMBERS,\n                            hljs.C_BLOCK_COMMENT_MODE\n                        ]\n                    },\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            AT_IDENTIFIER\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/csharp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/css.js":
/*!*******************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/css.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ css)\n/* harmony export */ });\nconst MODES = (hljs)=>{\n    return {\n        IMPORTANT: {\n            scope: \"meta\",\n            begin: \"!important\"\n        },\n        BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,\n        HEXCOLOR: {\n            scope: \"number\",\n            begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\\b/\n        },\n        FUNCTION_DISPATCH: {\n            className: \"built_in\",\n            begin: /[\\w-]+(?=\\()/\n        },\n        ATTRIBUTE_SELECTOR_MODE: {\n            scope: \"selector-attr\",\n            begin: /\\[/,\n            end: /\\]/,\n            illegal: \"$\",\n            contains: [\n                hljs.APOS_STRING_MODE,\n                hljs.QUOTE_STRING_MODE\n            ]\n        },\n        CSS_NUMBER_MODE: {\n            scope: \"number\",\n            begin: hljs.NUMBER_RE + \"(\" + \"%|em|ex|ch|rem\" + \"|vw|vh|vmin|vmax\" + \"|cm|mm|in|pt|pc|px\" + \"|deg|grad|rad|turn\" + \"|s|ms\" + \"|Hz|kHz\" + \"|dpi|dpcm|dppx\" + \")?\",\n            relevance: 0\n        },\n        CSS_VARIABLE: {\n            className: \"attr\",\n            begin: /--[A-Za-z_][A-Za-z0-9_-]*/\n        }\n    };\n};\nconst HTML_TAGS = [\n    \"a\",\n    \"abbr\",\n    \"address\",\n    \"article\",\n    \"aside\",\n    \"audio\",\n    \"b\",\n    \"blockquote\",\n    \"body\",\n    \"button\",\n    \"canvas\",\n    \"caption\",\n    \"cite\",\n    \"code\",\n    \"dd\",\n    \"del\",\n    \"details\",\n    \"dfn\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"em\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"header\",\n    \"hgroup\",\n    \"html\",\n    \"i\",\n    \"iframe\",\n    \"img\",\n    \"input\",\n    \"ins\",\n    \"kbd\",\n    \"label\",\n    \"legend\",\n    \"li\",\n    \"main\",\n    \"mark\",\n    \"menu\",\n    \"nav\",\n    \"object\",\n    \"ol\",\n    \"optgroup\",\n    \"option\",\n    \"p\",\n    \"picture\",\n    \"q\",\n    \"quote\",\n    \"samp\",\n    \"section\",\n    \"select\",\n    \"source\",\n    \"span\",\n    \"strong\",\n    \"summary\",\n    \"sup\",\n    \"table\",\n    \"tbody\",\n    \"td\",\n    \"textarea\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"time\",\n    \"tr\",\n    \"ul\",\n    \"var\",\n    \"video\"\n];\nconst SVG_TAGS = [\n    \"defs\",\n    \"g\",\n    \"marker\",\n    \"mask\",\n    \"pattern\",\n    \"svg\",\n    \"switch\",\n    \"symbol\",\n    \"feBlend\",\n    \"feColorMatrix\",\n    \"feComponentTransfer\",\n    \"feComposite\",\n    \"feConvolveMatrix\",\n    \"feDiffuseLighting\",\n    \"feDisplacementMap\",\n    \"feFlood\",\n    \"feGaussianBlur\",\n    \"feImage\",\n    \"feMerge\",\n    \"feMorphology\",\n    \"feOffset\",\n    \"feSpecularLighting\",\n    \"feTile\",\n    \"feTurbulence\",\n    \"linearGradient\",\n    \"radialGradient\",\n    \"stop\",\n    \"circle\",\n    \"ellipse\",\n    \"image\",\n    \"line\",\n    \"path\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"text\",\n    \"use\",\n    \"textPath\",\n    \"tspan\",\n    \"foreignObject\",\n    \"clipPath\"\n];\nconst TAGS = [\n    ...HTML_TAGS,\n    ...SVG_TAGS\n];\n// Sorting, then reversing makes sure longer attributes/elements like\n// `font-weight` are matched fully instead of getting false positives on say `font`\nconst MEDIA_FEATURES = [\n    \"any-hover\",\n    \"any-pointer\",\n    \"aspect-ratio\",\n    \"color\",\n    \"color-gamut\",\n    \"color-index\",\n    \"device-aspect-ratio\",\n    \"device-height\",\n    \"device-width\",\n    \"display-mode\",\n    \"forced-colors\",\n    \"grid\",\n    \"height\",\n    \"hover\",\n    \"inverted-colors\",\n    \"monochrome\",\n    \"orientation\",\n    \"overflow-block\",\n    \"overflow-inline\",\n    \"pointer\",\n    \"prefers-color-scheme\",\n    \"prefers-contrast\",\n    \"prefers-reduced-motion\",\n    \"prefers-reduced-transparency\",\n    \"resolution\",\n    \"scan\",\n    \"scripting\",\n    \"update\",\n    \"width\",\n    // TODO: find a better solution?\n    \"min-width\",\n    \"max-width\",\n    \"min-height\",\n    \"max-height\"\n].sort().reverse();\n// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\nconst PSEUDO_CLASSES = [\n    \"active\",\n    \"any-link\",\n    \"blank\",\n    \"checked\",\n    \"current\",\n    \"default\",\n    \"defined\",\n    \"dir\",\n    \"disabled\",\n    \"drop\",\n    \"empty\",\n    \"enabled\",\n    \"first\",\n    \"first-child\",\n    \"first-of-type\",\n    \"fullscreen\",\n    \"future\",\n    \"focus\",\n    \"focus-visible\",\n    \"focus-within\",\n    \"has\",\n    \"host\",\n    \"host-context\",\n    \"hover\",\n    \"indeterminate\",\n    \"in-range\",\n    \"invalid\",\n    \"is\",\n    \"lang\",\n    \"last-child\",\n    \"last-of-type\",\n    \"left\",\n    \"link\",\n    \"local-link\",\n    \"not\",\n    \"nth-child\",\n    \"nth-col\",\n    \"nth-last-child\",\n    \"nth-last-col\",\n    \"nth-last-of-type\",\n    \"nth-of-type\",\n    \"only-child\",\n    \"only-of-type\",\n    \"optional\",\n    \"out-of-range\",\n    \"past\",\n    \"placeholder-shown\",\n    \"read-only\",\n    \"read-write\",\n    \"required\",\n    \"right\",\n    \"root\",\n    \"scope\",\n    \"target\",\n    \"target-within\",\n    \"user-invalid\",\n    \"valid\",\n    \"visited\",\n    \"where\" // where()\n].sort().reverse();\n// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements\nconst PSEUDO_ELEMENTS = [\n    \"after\",\n    \"backdrop\",\n    \"before\",\n    \"cue\",\n    \"cue-region\",\n    \"first-letter\",\n    \"first-line\",\n    \"grammar-error\",\n    \"marker\",\n    \"part\",\n    \"placeholder\",\n    \"selection\",\n    \"slotted\",\n    \"spelling-error\"\n].sort().reverse();\nconst ATTRIBUTES = [\n    \"accent-color\",\n    \"align-content\",\n    \"align-items\",\n    \"align-self\",\n    \"alignment-baseline\",\n    \"all\",\n    \"anchor-name\",\n    \"animation\",\n    \"animation-composition\",\n    \"animation-delay\",\n    \"animation-direction\",\n    \"animation-duration\",\n    \"animation-fill-mode\",\n    \"animation-iteration-count\",\n    \"animation-name\",\n    \"animation-play-state\",\n    \"animation-range\",\n    \"animation-range-end\",\n    \"animation-range-start\",\n    \"animation-timeline\",\n    \"animation-timing-function\",\n    \"appearance\",\n    \"aspect-ratio\",\n    \"backdrop-filter\",\n    \"backface-visibility\",\n    \"background\",\n    \"background-attachment\",\n    \"background-blend-mode\",\n    \"background-clip\",\n    \"background-color\",\n    \"background-image\",\n    \"background-origin\",\n    \"background-position\",\n    \"background-position-x\",\n    \"background-position-y\",\n    \"background-repeat\",\n    \"background-size\",\n    \"baseline-shift\",\n    \"block-size\",\n    \"border\",\n    \"border-block\",\n    \"border-block-color\",\n    \"border-block-end\",\n    \"border-block-end-color\",\n    \"border-block-end-style\",\n    \"border-block-end-width\",\n    \"border-block-start\",\n    \"border-block-start-color\",\n    \"border-block-start-style\",\n    \"border-block-start-width\",\n    \"border-block-style\",\n    \"border-block-width\",\n    \"border-bottom\",\n    \"border-bottom-color\",\n    \"border-bottom-left-radius\",\n    \"border-bottom-right-radius\",\n    \"border-bottom-style\",\n    \"border-bottom-width\",\n    \"border-collapse\",\n    \"border-color\",\n    \"border-end-end-radius\",\n    \"border-end-start-radius\",\n    \"border-image\",\n    \"border-image-outset\",\n    \"border-image-repeat\",\n    \"border-image-slice\",\n    \"border-image-source\",\n    \"border-image-width\",\n    \"border-inline\",\n    \"border-inline-color\",\n    \"border-inline-end\",\n    \"border-inline-end-color\",\n    \"border-inline-end-style\",\n    \"border-inline-end-width\",\n    \"border-inline-start\",\n    \"border-inline-start-color\",\n    \"border-inline-start-style\",\n    \"border-inline-start-width\",\n    \"border-inline-style\",\n    \"border-inline-width\",\n    \"border-left\",\n    \"border-left-color\",\n    \"border-left-style\",\n    \"border-left-width\",\n    \"border-radius\",\n    \"border-right\",\n    \"border-right-color\",\n    \"border-right-style\",\n    \"border-right-width\",\n    \"border-spacing\",\n    \"border-start-end-radius\",\n    \"border-start-start-radius\",\n    \"border-style\",\n    \"border-top\",\n    \"border-top-color\",\n    \"border-top-left-radius\",\n    \"border-top-right-radius\",\n    \"border-top-style\",\n    \"border-top-width\",\n    \"border-width\",\n    \"bottom\",\n    \"box-align\",\n    \"box-decoration-break\",\n    \"box-direction\",\n    \"box-flex\",\n    \"box-flex-group\",\n    \"box-lines\",\n    \"box-ordinal-group\",\n    \"box-orient\",\n    \"box-pack\",\n    \"box-shadow\",\n    \"box-sizing\",\n    \"break-after\",\n    \"break-before\",\n    \"break-inside\",\n    \"caption-side\",\n    \"caret-color\",\n    \"clear\",\n    \"clip\",\n    \"clip-path\",\n    \"clip-rule\",\n    \"color\",\n    \"color-interpolation\",\n    \"color-interpolation-filters\",\n    \"color-profile\",\n    \"color-rendering\",\n    \"color-scheme\",\n    \"column-count\",\n    \"column-fill\",\n    \"column-gap\",\n    \"column-rule\",\n    \"column-rule-color\",\n    \"column-rule-style\",\n    \"column-rule-width\",\n    \"column-span\",\n    \"column-width\",\n    \"columns\",\n    \"contain\",\n    \"contain-intrinsic-block-size\",\n    \"contain-intrinsic-height\",\n    \"contain-intrinsic-inline-size\",\n    \"contain-intrinsic-size\",\n    \"contain-intrinsic-width\",\n    \"container\",\n    \"container-name\",\n    \"container-type\",\n    \"content\",\n    \"content-visibility\",\n    \"counter-increment\",\n    \"counter-reset\",\n    \"counter-set\",\n    \"cue\",\n    \"cue-after\",\n    \"cue-before\",\n    \"cursor\",\n    \"cx\",\n    \"cy\",\n    \"direction\",\n    \"display\",\n    \"dominant-baseline\",\n    \"empty-cells\",\n    \"enable-background\",\n    \"field-sizing\",\n    \"fill\",\n    \"fill-opacity\",\n    \"fill-rule\",\n    \"filter\",\n    \"flex\",\n    \"flex-basis\",\n    \"flex-direction\",\n    \"flex-flow\",\n    \"flex-grow\",\n    \"flex-shrink\",\n    \"flex-wrap\",\n    \"float\",\n    \"flood-color\",\n    \"flood-opacity\",\n    \"flow\",\n    \"font\",\n    \"font-display\",\n    \"font-family\",\n    \"font-feature-settings\",\n    \"font-kerning\",\n    \"font-language-override\",\n    \"font-optical-sizing\",\n    \"font-palette\",\n    \"font-size\",\n    \"font-size-adjust\",\n    \"font-smooth\",\n    \"font-smoothing\",\n    \"font-stretch\",\n    \"font-style\",\n    \"font-synthesis\",\n    \"font-synthesis-position\",\n    \"font-synthesis-small-caps\",\n    \"font-synthesis-style\",\n    \"font-synthesis-weight\",\n    \"font-variant\",\n    \"font-variant-alternates\",\n    \"font-variant-caps\",\n    \"font-variant-east-asian\",\n    \"font-variant-emoji\",\n    \"font-variant-ligatures\",\n    \"font-variant-numeric\",\n    \"font-variant-position\",\n    \"font-variation-settings\",\n    \"font-weight\",\n    \"forced-color-adjust\",\n    \"gap\",\n    \"glyph-orientation-horizontal\",\n    \"glyph-orientation-vertical\",\n    \"grid\",\n    \"grid-area\",\n    \"grid-auto-columns\",\n    \"grid-auto-flow\",\n    \"grid-auto-rows\",\n    \"grid-column\",\n    \"grid-column-end\",\n    \"grid-column-start\",\n    \"grid-gap\",\n    \"grid-row\",\n    \"grid-row-end\",\n    \"grid-row-start\",\n    \"grid-template\",\n    \"grid-template-areas\",\n    \"grid-template-columns\",\n    \"grid-template-rows\",\n    \"hanging-punctuation\",\n    \"height\",\n    \"hyphenate-character\",\n    \"hyphenate-limit-chars\",\n    \"hyphens\",\n    \"icon\",\n    \"image-orientation\",\n    \"image-rendering\",\n    \"image-resolution\",\n    \"ime-mode\",\n    \"initial-letter\",\n    \"initial-letter-align\",\n    \"inline-size\",\n    \"inset\",\n    \"inset-area\",\n    \"inset-block\",\n    \"inset-block-end\",\n    \"inset-block-start\",\n    \"inset-inline\",\n    \"inset-inline-end\",\n    \"inset-inline-start\",\n    \"isolation\",\n    \"justify-content\",\n    \"justify-items\",\n    \"justify-self\",\n    \"kerning\",\n    \"left\",\n    \"letter-spacing\",\n    \"lighting-color\",\n    \"line-break\",\n    \"line-height\",\n    \"line-height-step\",\n    \"list-style\",\n    \"list-style-image\",\n    \"list-style-position\",\n    \"list-style-type\",\n    \"margin\",\n    \"margin-block\",\n    \"margin-block-end\",\n    \"margin-block-start\",\n    \"margin-bottom\",\n    \"margin-inline\",\n    \"margin-inline-end\",\n    \"margin-inline-start\",\n    \"margin-left\",\n    \"margin-right\",\n    \"margin-top\",\n    \"margin-trim\",\n    \"marker\",\n    \"marker-end\",\n    \"marker-mid\",\n    \"marker-start\",\n    \"marks\",\n    \"mask\",\n    \"mask-border\",\n    \"mask-border-mode\",\n    \"mask-border-outset\",\n    \"mask-border-repeat\",\n    \"mask-border-slice\",\n    \"mask-border-source\",\n    \"mask-border-width\",\n    \"mask-clip\",\n    \"mask-composite\",\n    \"mask-image\",\n    \"mask-mode\",\n    \"mask-origin\",\n    \"mask-position\",\n    \"mask-repeat\",\n    \"mask-size\",\n    \"mask-type\",\n    \"masonry-auto-flow\",\n    \"math-depth\",\n    \"math-shift\",\n    \"math-style\",\n    \"max-block-size\",\n    \"max-height\",\n    \"max-inline-size\",\n    \"max-width\",\n    \"min-block-size\",\n    \"min-height\",\n    \"min-inline-size\",\n    \"min-width\",\n    \"mix-blend-mode\",\n    \"nav-down\",\n    \"nav-index\",\n    \"nav-left\",\n    \"nav-right\",\n    \"nav-up\",\n    \"none\",\n    \"normal\",\n    \"object-fit\",\n    \"object-position\",\n    \"offset\",\n    \"offset-anchor\",\n    \"offset-distance\",\n    \"offset-path\",\n    \"offset-position\",\n    \"offset-rotate\",\n    \"opacity\",\n    \"order\",\n    \"orphans\",\n    \"outline\",\n    \"outline-color\",\n    \"outline-offset\",\n    \"outline-style\",\n    \"outline-width\",\n    \"overflow\",\n    \"overflow-anchor\",\n    \"overflow-block\",\n    \"overflow-clip-margin\",\n    \"overflow-inline\",\n    \"overflow-wrap\",\n    \"overflow-x\",\n    \"overflow-y\",\n    \"overlay\",\n    \"overscroll-behavior\",\n    \"overscroll-behavior-block\",\n    \"overscroll-behavior-inline\",\n    \"overscroll-behavior-x\",\n    \"overscroll-behavior-y\",\n    \"padding\",\n    \"padding-block\",\n    \"padding-block-end\",\n    \"padding-block-start\",\n    \"padding-bottom\",\n    \"padding-inline\",\n    \"padding-inline-end\",\n    \"padding-inline-start\",\n    \"padding-left\",\n    \"padding-right\",\n    \"padding-top\",\n    \"page\",\n    \"page-break-after\",\n    \"page-break-before\",\n    \"page-break-inside\",\n    \"paint-order\",\n    \"pause\",\n    \"pause-after\",\n    \"pause-before\",\n    \"perspective\",\n    \"perspective-origin\",\n    \"place-content\",\n    \"place-items\",\n    \"place-self\",\n    \"pointer-events\",\n    \"position\",\n    \"position-anchor\",\n    \"position-visibility\",\n    \"print-color-adjust\",\n    \"quotes\",\n    \"r\",\n    \"resize\",\n    \"rest\",\n    \"rest-after\",\n    \"rest-before\",\n    \"right\",\n    \"rotate\",\n    \"row-gap\",\n    \"ruby-align\",\n    \"ruby-position\",\n    \"scale\",\n    \"scroll-behavior\",\n    \"scroll-margin\",\n    \"scroll-margin-block\",\n    \"scroll-margin-block-end\",\n    \"scroll-margin-block-start\",\n    \"scroll-margin-bottom\",\n    \"scroll-margin-inline\",\n    \"scroll-margin-inline-end\",\n    \"scroll-margin-inline-start\",\n    \"scroll-margin-left\",\n    \"scroll-margin-right\",\n    \"scroll-margin-top\",\n    \"scroll-padding\",\n    \"scroll-padding-block\",\n    \"scroll-padding-block-end\",\n    \"scroll-padding-block-start\",\n    \"scroll-padding-bottom\",\n    \"scroll-padding-inline\",\n    \"scroll-padding-inline-end\",\n    \"scroll-padding-inline-start\",\n    \"scroll-padding-left\",\n    \"scroll-padding-right\",\n    \"scroll-padding-top\",\n    \"scroll-snap-align\",\n    \"scroll-snap-stop\",\n    \"scroll-snap-type\",\n    \"scroll-timeline\",\n    \"scroll-timeline-axis\",\n    \"scroll-timeline-name\",\n    \"scrollbar-color\",\n    \"scrollbar-gutter\",\n    \"scrollbar-width\",\n    \"shape-image-threshold\",\n    \"shape-margin\",\n    \"shape-outside\",\n    \"shape-rendering\",\n    \"speak\",\n    \"speak-as\",\n    \"src\",\n    \"stop-color\",\n    \"stop-opacity\",\n    \"stroke\",\n    \"stroke-dasharray\",\n    \"stroke-dashoffset\",\n    \"stroke-linecap\",\n    \"stroke-linejoin\",\n    \"stroke-miterlimit\",\n    \"stroke-opacity\",\n    \"stroke-width\",\n    \"tab-size\",\n    \"table-layout\",\n    \"text-align\",\n    \"text-align-all\",\n    \"text-align-last\",\n    \"text-anchor\",\n    \"text-combine-upright\",\n    \"text-decoration\",\n    \"text-decoration-color\",\n    \"text-decoration-line\",\n    \"text-decoration-skip\",\n    \"text-decoration-skip-ink\",\n    \"text-decoration-style\",\n    \"text-decoration-thickness\",\n    \"text-emphasis\",\n    \"text-emphasis-color\",\n    \"text-emphasis-position\",\n    \"text-emphasis-style\",\n    \"text-indent\",\n    \"text-justify\",\n    \"text-orientation\",\n    \"text-overflow\",\n    \"text-rendering\",\n    \"text-shadow\",\n    \"text-size-adjust\",\n    \"text-transform\",\n    \"text-underline-offset\",\n    \"text-underline-position\",\n    \"text-wrap\",\n    \"text-wrap-mode\",\n    \"text-wrap-style\",\n    \"timeline-scope\",\n    \"top\",\n    \"touch-action\",\n    \"transform\",\n    \"transform-box\",\n    \"transform-origin\",\n    \"transform-style\",\n    \"transition\",\n    \"transition-behavior\",\n    \"transition-delay\",\n    \"transition-duration\",\n    \"transition-property\",\n    \"transition-timing-function\",\n    \"translate\",\n    \"unicode-bidi\",\n    \"user-modify\",\n    \"user-select\",\n    \"vector-effect\",\n    \"vertical-align\",\n    \"view-timeline\",\n    \"view-timeline-axis\",\n    \"view-timeline-inset\",\n    \"view-timeline-name\",\n    \"view-transition-name\",\n    \"visibility\",\n    \"voice-balance\",\n    \"voice-duration\",\n    \"voice-family\",\n    \"voice-pitch\",\n    \"voice-range\",\n    \"voice-rate\",\n    \"voice-stress\",\n    \"voice-volume\",\n    \"white-space\",\n    \"white-space-collapse\",\n    \"widows\",\n    \"width\",\n    \"will-change\",\n    \"word-break\",\n    \"word-spacing\",\n    \"word-wrap\",\n    \"writing-mode\",\n    \"x\",\n    \"y\",\n    \"z-index\",\n    \"zoom\"\n].sort().reverse();\n/*\nLanguage: CSS\nCategory: common, css, web\nWebsite: https://developer.mozilla.org/en-US/docs/Web/CSS\n*/ /** @type LanguageFn */ function css(hljs) {\n    const regex = hljs.regex;\n    const modes = MODES(hljs);\n    const VENDOR_PREFIX = {\n        begin: /-(webkit|moz|ms|o)-(?=[a-z])/\n    };\n    const AT_MODIFIERS = \"and or not only\";\n    const AT_PROPERTY_RE = /@-?\\w[\\w]*(-\\w+)*/; // @-webkit-keyframes\n    const IDENT_RE = \"[a-zA-Z-][a-zA-Z0-9_-]*\";\n    const STRINGS = [\n        hljs.APOS_STRING_MODE,\n        hljs.QUOTE_STRING_MODE\n    ];\n    return {\n        name: \"CSS\",\n        case_insensitive: true,\n        illegal: /[=|'\\$]/,\n        keywords: {\n            keyframePosition: \"from to\"\n        },\n        classNameAliases: {\n            // for visual continuity with `tag {}` and because we\n            // don't have a great class for this?\n            keyframePosition: \"selector-tag\"\n        },\n        contains: [\n            modes.BLOCK_COMMENT,\n            VENDOR_PREFIX,\n            // to recognize keyframe 40% etc which are outside the scope of our\n            // attribute value mode\n            modes.CSS_NUMBER_MODE,\n            {\n                className: \"selector-id\",\n                begin: /#[A-Za-z0-9_-]+/,\n                relevance: 0\n            },\n            {\n                className: \"selector-class\",\n                begin: \"\\\\.\" + IDENT_RE,\n                relevance: 0\n            },\n            modes.ATTRIBUTE_SELECTOR_MODE,\n            {\n                className: \"selector-pseudo\",\n                variants: [\n                    {\n                        begin: \":(\" + PSEUDO_CLASSES.join(\"|\") + \")\"\n                    },\n                    {\n                        begin: \":(:)?(\" + PSEUDO_ELEMENTS.join(\"|\") + \")\"\n                    }\n                ]\n            },\n            // we may actually need this (12/2020)\n            // { // pseudo-selector params\n            //   begin: /\\(/,\n            //   end: /\\)/,\n            //   contains: [ hljs.CSS_NUMBER_MODE ]\n            // },\n            modes.CSS_VARIABLE,\n            {\n                className: \"attribute\",\n                begin: \"\\\\b(\" + ATTRIBUTES.join(\"|\") + \")\\\\b\"\n            },\n            // attribute values\n            {\n                begin: /:/,\n                end: /[;}{]/,\n                contains: [\n                    modes.BLOCK_COMMENT,\n                    modes.HEXCOLOR,\n                    modes.IMPORTANT,\n                    modes.CSS_NUMBER_MODE,\n                    ...STRINGS,\n                    // needed to highlight these as strings and to avoid issues with\n                    // illegal characters that might be inside urls that would tigger the\n                    // languages illegal stack\n                    {\n                        begin: /(url|data-uri)\\(/,\n                        end: /\\)/,\n                        relevance: 0,\n                        keywords: {\n                            built_in: \"url data-uri\"\n                        },\n                        contains: [\n                            ...STRINGS,\n                            {\n                                className: \"string\",\n                                // any character other than `)` as in `url()` will be the start\n                                // of a string, which ends with `)` (from the parent mode)\n                                begin: /[^)]/,\n                                endsWithParent: true,\n                                excludeEnd: true\n                            }\n                        ]\n                    },\n                    modes.FUNCTION_DISPATCH\n                ]\n            },\n            {\n                begin: regex.lookahead(/@/),\n                end: \"[{;]\",\n                relevance: 0,\n                illegal: /:/,\n                contains: [\n                    {\n                        className: \"keyword\",\n                        begin: AT_PROPERTY_RE\n                    },\n                    {\n                        begin: /\\s/,\n                        endsWithParent: true,\n                        excludeEnd: true,\n                        relevance: 0,\n                        keywords: {\n                            $pattern: /[a-z-]+/,\n                            keyword: AT_MODIFIERS,\n                            attribute: MEDIA_FEATURES.join(\" \")\n                        },\n                        contains: [\n                            {\n                                begin: /[a-z-]+(?=:)/,\n                                className: \"attribute\"\n                            },\n                            ...STRINGS,\n                            modes.CSS_NUMBER_MODE\n                        ]\n                    }\n                ]\n            },\n            {\n                className: \"selector-tag\",\n                begin: \"\\\\b(\" + TAGS.join(\"|\") + \")\\\\b\"\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/css.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/diff.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/diff.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ diff)\n/* harmony export */ });\n/*\nLanguage: Diff\nDescription: Unified and context diff\nAuthor: Vasily Polovnyov <vast@whiteants.net>\nWebsite: https://www.gnu.org/software/diffutils/\nCategory: common\n*/ /** @type LanguageFn */ function diff(hljs) {\n    const regex = hljs.regex;\n    return {\n        name: \"Diff\",\n        aliases: [\n            \"patch\"\n        ],\n        contains: [\n            {\n                className: \"meta\",\n                relevance: 10,\n                match: regex.either(/^@@ +-\\d+,\\d+ +\\+\\d+,\\d+ +@@/, /^\\*\\*\\* +\\d+,\\d+ +\\*\\*\\*\\*$/, /^--- +\\d+,\\d+ +----$/)\n            },\n            {\n                className: \"comment\",\n                variants: [\n                    {\n                        begin: regex.either(/Index: /, /^index/, /={3,}/, /^-{3}/, /^\\*{3} /, /^\\+{3}/, /^diff --git/),\n                        end: /$/\n                    },\n                    {\n                        match: /^\\*{15}$/\n                    }\n                ]\n            },\n            {\n                className: \"addition\",\n                begin: /^\\+/,\n                end: /$/\n            },\n            {\n                className: \"deletion\",\n                begin: /^-/,\n                end: /$/\n            },\n            {\n                className: \"addition\",\n                begin: /^!/,\n                end: /$/\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9kaWZmLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7O0FBTUEsR0FFQSxxQkFBcUIsR0FDckIsU0FBU0EsS0FBS0MsSUFBSTtJQUNoQixNQUFNQyxRQUFRRCxLQUFLQyxLQUFLO0lBQ3hCLE9BQU87UUFDTEMsTUFBTTtRQUNOQyxTQUFTO1lBQUU7U0FBUztRQUNwQkMsVUFBVTtZQUNSO2dCQUNFQyxXQUFXO2dCQUNYQyxXQUFXO2dCQUNYQyxPQUFPTixNQUFNTyxNQUFNLENBQ2pCLGdDQUNBLCtCQUNBO1lBRUo7WUFDQTtnQkFDRUgsV0FBVztnQkFDWEksVUFBVTtvQkFDUjt3QkFDRUMsT0FBT1QsTUFBTU8sTUFBTSxDQUNqQixXQUNBLFVBQ0EsU0FDQSxTQUNBLFdBQ0EsVUFDQTt3QkFFRkcsS0FBSztvQkFDUDtvQkFDQTt3QkFBRUosT0FBTztvQkFBVztpQkFDckI7WUFDSDtZQUNBO2dCQUNFRixXQUFXO2dCQUNYSyxPQUFPO2dCQUNQQyxLQUFLO1lBQ1A7WUFDQTtnQkFDRU4sV0FBVztnQkFDWEssT0FBTztnQkFDUEMsS0FBSztZQUNQO1lBQ0E7Z0JBQ0VOLFdBQVc7Z0JBQ1hLLE9BQU87Z0JBQ1BDLEtBQUs7WUFDUDtTQUNEO0lBQ0g7QUFDRjtBQUUyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2hhcmR3YXJlLWRvYy1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL2hpZ2hsaWdodC5qcy9lcy9sYW5ndWFnZXMvZGlmZi5qcz8wNWJkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5MYW5ndWFnZTogRGlmZlxuRGVzY3JpcHRpb246IFVuaWZpZWQgYW5kIGNvbnRleHQgZGlmZlxuQXV0aG9yOiBWYXNpbHkgUG9sb3ZueW92IDx2YXN0QHdoaXRlYW50cy5uZXQ+XG5XZWJzaXRlOiBodHRwczovL3d3dy5nbnUub3JnL3NvZnR3YXJlL2RpZmZ1dGlscy9cbkNhdGVnb3J5OiBjb21tb25cbiovXG5cbi8qKiBAdHlwZSBMYW5ndWFnZUZuICovXG5mdW5jdGlvbiBkaWZmKGhsanMpIHtcbiAgY29uc3QgcmVnZXggPSBobGpzLnJlZ2V4O1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdEaWZmJyxcbiAgICBhbGlhc2VzOiBbICdwYXRjaCcgXSxcbiAgICBjb250YWluczogW1xuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6ICdtZXRhJyxcbiAgICAgICAgcmVsZXZhbmNlOiAxMCxcbiAgICAgICAgbWF0Y2g6IHJlZ2V4LmVpdGhlcihcbiAgICAgICAgICAvXkBAICstXFxkKyxcXGQrICtcXCtcXGQrLFxcZCsgK0BALyxcbiAgICAgICAgICAvXlxcKlxcKlxcKiArXFxkKyxcXGQrICtcXCpcXCpcXCpcXCokLyxcbiAgICAgICAgICAvXi0tLSArXFxkKyxcXGQrICstLS0tJC9cbiAgICAgICAgKVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnY29tbWVudCcsXG4gICAgICAgIHZhcmlhbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgYmVnaW46IHJlZ2V4LmVpdGhlcihcbiAgICAgICAgICAgICAgL0luZGV4OiAvLFxuICAgICAgICAgICAgICAvXmluZGV4LyxcbiAgICAgICAgICAgICAgLz17Myx9LyxcbiAgICAgICAgICAgICAgL14tezN9LyxcbiAgICAgICAgICAgICAgL15cXCp7M30gLyxcbiAgICAgICAgICAgICAgL15cXCt7M30vLFxuICAgICAgICAgICAgICAvXmRpZmYgLS1naXQvXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgZW5kOiAvJC9cbiAgICAgICAgICB9LFxuICAgICAgICAgIHsgbWF0Y2g6IC9eXFwqezE1fSQvIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnYWRkaXRpb24nLFxuICAgICAgICBiZWdpbjogL15cXCsvLFxuICAgICAgICBlbmQ6IC8kL1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnZGVsZXRpb24nLFxuICAgICAgICBiZWdpbjogL14tLyxcbiAgICAgICAgZW5kOiAvJC9cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ2FkZGl0aW9uJyxcbiAgICAgICAgYmVnaW46IC9eIS8sXG4gICAgICAgIGVuZDogLyQvXG4gICAgICB9XG4gICAgXVxuICB9O1xufVxuXG5leHBvcnQgeyBkaWZmIGFzIGRlZmF1bHQgfTtcbiJdLCJuYW1lcyI6WyJkaWZmIiwiaGxqcyIsInJlZ2V4IiwibmFtZSIsImFsaWFzZXMiLCJjb250YWlucyIsImNsYXNzTmFtZSIsInJlbGV2YW5jZSIsIm1hdGNoIiwiZWl0aGVyIiwidmFyaWFudHMiLCJiZWdpbiIsImVuZCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/diff.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/go.js":
/*!******************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/go.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ go)\n/* harmony export */ });\n/*\nLanguage: Go\nAuthor: Stephan Kountso aka StepLg <steplg@gmail.com>\nContributors: Evgeny Stepanischev <imbolk@gmail.com>\nDescription: Google go language (golang). For info about language\nWebsite: http://golang.org/\nCategory: common, system\n*/ function go(hljs) {\n    const LITERALS = [\n        \"true\",\n        \"false\",\n        \"iota\",\n        \"nil\"\n    ];\n    const BUILT_INS = [\n        \"append\",\n        \"cap\",\n        \"close\",\n        \"complex\",\n        \"copy\",\n        \"imag\",\n        \"len\",\n        \"make\",\n        \"new\",\n        \"panic\",\n        \"print\",\n        \"println\",\n        \"real\",\n        \"recover\",\n        \"delete\"\n    ];\n    const TYPES = [\n        \"bool\",\n        \"byte\",\n        \"complex64\",\n        \"complex128\",\n        \"error\",\n        \"float32\",\n        \"float64\",\n        \"int8\",\n        \"int16\",\n        \"int32\",\n        \"int64\",\n        \"string\",\n        \"uint8\",\n        \"uint16\",\n        \"uint32\",\n        \"uint64\",\n        \"int\",\n        \"uint\",\n        \"uintptr\",\n        \"rune\"\n    ];\n    const KWS = [\n        \"break\",\n        \"case\",\n        \"chan\",\n        \"const\",\n        \"continue\",\n        \"default\",\n        \"defer\",\n        \"else\",\n        \"fallthrough\",\n        \"for\",\n        \"func\",\n        \"go\",\n        \"goto\",\n        \"if\",\n        \"import\",\n        \"interface\",\n        \"map\",\n        \"package\",\n        \"range\",\n        \"return\",\n        \"select\",\n        \"struct\",\n        \"switch\",\n        \"type\",\n        \"var\"\n    ];\n    const KEYWORDS = {\n        keyword: KWS,\n        type: TYPES,\n        literal: LITERALS,\n        built_in: BUILT_INS\n    };\n    return {\n        name: \"Go\",\n        aliases: [\n            \"golang\"\n        ],\n        keywords: KEYWORDS,\n        illegal: \"</\",\n        contains: [\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            {\n                className: \"string\",\n                variants: [\n                    hljs.QUOTE_STRING_MODE,\n                    hljs.APOS_STRING_MODE,\n                    {\n                        begin: \"`\",\n                        end: \"`\"\n                    }\n                ]\n            },\n            {\n                className: \"number\",\n                variants: [\n                    {\n                        match: /-?\\b0[xX]\\.[a-fA-F0-9](_?[a-fA-F0-9])*[pP][+-]?\\d(_?\\d)*i?/,\n                        relevance: 0\n                    },\n                    {\n                        match: /-?\\b0[xX](_?[a-fA-F0-9])+((\\.([a-fA-F0-9](_?[a-fA-F0-9])*)?)?[pP][+-]?\\d(_?\\d)*)?i?/,\n                        relevance: 0\n                    },\n                    {\n                        match: /-?\\b0[oO](_?[0-7])*i?/,\n                        relevance: 0\n                    },\n                    {\n                        match: /-?\\.\\d(_?\\d)*([eE][+-]?\\d(_?\\d)*)?i?/,\n                        relevance: 0\n                    },\n                    {\n                        match: /-?\\b\\d(_?\\d)*(\\.(\\d(_?\\d)*)?)?([eE][+-]?\\d(_?\\d)*)?i?/,\n                        relevance: 0\n                    }\n                ]\n            },\n            {\n                begin: /:=/ // relevance booster\n            },\n            {\n                className: \"function\",\n                beginKeywords: \"func\",\n                end: \"\\\\s*(\\\\{|$)\",\n                excludeEnd: true,\n                contains: [\n                    hljs.TITLE_MODE,\n                    {\n                        className: \"params\",\n                        begin: /\\(/,\n                        end: /\\)/,\n                        endsParent: true,\n                        keywords: KEYWORDS,\n                        illegal: /[\"']/\n                    }\n                ]\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9nby5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7QUFPQSxHQUVBLFNBQVNBLEdBQUdDLElBQUk7SUFDZCxNQUFNQyxXQUFXO1FBQ2Y7UUFDQTtRQUNBO1FBQ0E7S0FDRDtJQUNELE1BQU1DLFlBQVk7UUFDaEI7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7SUFDRCxNQUFNQyxRQUFRO1FBQ1o7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtLQUNEO0lBQ0QsTUFBTUMsTUFBTTtRQUNWO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7SUFDRCxNQUFNQyxXQUFXO1FBQ2ZDLFNBQVNGO1FBQ1RHLE1BQU1KO1FBQ05LLFNBQVNQO1FBQ1RRLFVBQVVQO0lBQ1o7SUFDQSxPQUFPO1FBQ0xRLE1BQU07UUFDTkMsU0FBUztZQUFFO1NBQVU7UUFDckJDLFVBQVVQO1FBQ1ZRLFNBQVM7UUFDVEMsVUFBVTtZQUNSZCxLQUFLZSxtQkFBbUI7WUFDeEJmLEtBQUtnQixvQkFBb0I7WUFDekI7Z0JBQ0VDLFdBQVc7Z0JBQ1hDLFVBQVU7b0JBQ1JsQixLQUFLbUIsaUJBQWlCO29CQUN0Qm5CLEtBQUtvQixnQkFBZ0I7b0JBQ3JCO3dCQUNFQyxPQUFPO3dCQUNQQyxLQUFLO29CQUNQO2lCQUNEO1lBQ0g7WUFDQTtnQkFDRUwsV0FBVztnQkFDWEMsVUFBVTtvQkFDUjt3QkFDRUssT0FBTzt3QkFDUEMsV0FBVztvQkFDYjtvQkFDQTt3QkFDRUQsT0FBTzt3QkFDUEMsV0FBVztvQkFDYjtvQkFDQTt3QkFDRUQsT0FBTzt3QkFDUEMsV0FBVztvQkFDYjtvQkFDQTt3QkFDRUQsT0FBTzt3QkFDUEMsV0FBVztvQkFDYjtvQkFDQTt3QkFDRUQsT0FBTzt3QkFDUEMsV0FBVztvQkFDYjtpQkFDRDtZQUNIO1lBQ0E7Z0JBQUVILE9BQU8sS0FBSyxvQkFBb0I7WUFDbEM7WUFDQTtnQkFDRUosV0FBVztnQkFDWFEsZUFBZTtnQkFDZkgsS0FBSztnQkFDTEksWUFBWTtnQkFDWlosVUFBVTtvQkFDUmQsS0FBSzJCLFVBQVU7b0JBQ2Y7d0JBQ0VWLFdBQVc7d0JBQ1hJLE9BQU87d0JBQ1BDLEtBQUs7d0JBQ0xNLFlBQVk7d0JBQ1poQixVQUFVUDt3QkFDVlEsU0FBUztvQkFDWDtpQkFDRDtZQUNIO1NBQ0Q7SUFDSDtBQUNGO0FBRXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFyZHdhcmUtZG9jLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9nby5qcz9mYzUzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5MYW5ndWFnZTogR29cbkF1dGhvcjogU3RlcGhhbiBLb3VudHNvIGFrYSBTdGVwTGcgPHN0ZXBsZ0BnbWFpbC5jb20+XG5Db250cmlidXRvcnM6IEV2Z2VueSBTdGVwYW5pc2NoZXYgPGltYm9sa0BnbWFpbC5jb20+XG5EZXNjcmlwdGlvbjogR29vZ2xlIGdvIGxhbmd1YWdlIChnb2xhbmcpLiBGb3IgaW5mbyBhYm91dCBsYW5ndWFnZVxuV2Vic2l0ZTogaHR0cDovL2dvbGFuZy5vcmcvXG5DYXRlZ29yeTogY29tbW9uLCBzeXN0ZW1cbiovXG5cbmZ1bmN0aW9uIGdvKGhsanMpIHtcbiAgY29uc3QgTElURVJBTFMgPSBbXG4gICAgXCJ0cnVlXCIsXG4gICAgXCJmYWxzZVwiLFxuICAgIFwiaW90YVwiLFxuICAgIFwibmlsXCJcbiAgXTtcbiAgY29uc3QgQlVJTFRfSU5TID0gW1xuICAgIFwiYXBwZW5kXCIsXG4gICAgXCJjYXBcIixcbiAgICBcImNsb3NlXCIsXG4gICAgXCJjb21wbGV4XCIsXG4gICAgXCJjb3B5XCIsXG4gICAgXCJpbWFnXCIsXG4gICAgXCJsZW5cIixcbiAgICBcIm1ha2VcIixcbiAgICBcIm5ld1wiLFxuICAgIFwicGFuaWNcIixcbiAgICBcInByaW50XCIsXG4gICAgXCJwcmludGxuXCIsXG4gICAgXCJyZWFsXCIsXG4gICAgXCJyZWNvdmVyXCIsXG4gICAgXCJkZWxldGVcIlxuICBdO1xuICBjb25zdCBUWVBFUyA9IFtcbiAgICBcImJvb2xcIixcbiAgICBcImJ5dGVcIixcbiAgICBcImNvbXBsZXg2NFwiLFxuICAgIFwiY29tcGxleDEyOFwiLFxuICAgIFwiZXJyb3JcIixcbiAgICBcImZsb2F0MzJcIixcbiAgICBcImZsb2F0NjRcIixcbiAgICBcImludDhcIixcbiAgICBcImludDE2XCIsXG4gICAgXCJpbnQzMlwiLFxuICAgIFwiaW50NjRcIixcbiAgICBcInN0cmluZ1wiLFxuICAgIFwidWludDhcIixcbiAgICBcInVpbnQxNlwiLFxuICAgIFwidWludDMyXCIsXG4gICAgXCJ1aW50NjRcIixcbiAgICBcImludFwiLFxuICAgIFwidWludFwiLFxuICAgIFwidWludHB0clwiLFxuICAgIFwicnVuZVwiXG4gIF07XG4gIGNvbnN0IEtXUyA9IFtcbiAgICBcImJyZWFrXCIsXG4gICAgXCJjYXNlXCIsXG4gICAgXCJjaGFuXCIsXG4gICAgXCJjb25zdFwiLFxuICAgIFwiY29udGludWVcIixcbiAgICBcImRlZmF1bHRcIixcbiAgICBcImRlZmVyXCIsXG4gICAgXCJlbHNlXCIsXG4gICAgXCJmYWxsdGhyb3VnaFwiLFxuICAgIFwiZm9yXCIsXG4gICAgXCJmdW5jXCIsXG4gICAgXCJnb1wiLFxuICAgIFwiZ290b1wiLFxuICAgIFwiaWZcIixcbiAgICBcImltcG9ydFwiLFxuICAgIFwiaW50ZXJmYWNlXCIsXG4gICAgXCJtYXBcIixcbiAgICBcInBhY2thZ2VcIixcbiAgICBcInJhbmdlXCIsXG4gICAgXCJyZXR1cm5cIixcbiAgICBcInNlbGVjdFwiLFxuICAgIFwic3RydWN0XCIsXG4gICAgXCJzd2l0Y2hcIixcbiAgICBcInR5cGVcIixcbiAgICBcInZhclwiLFxuICBdO1xuICBjb25zdCBLRVlXT1JEUyA9IHtcbiAgICBrZXl3b3JkOiBLV1MsXG4gICAgdHlwZTogVFlQRVMsXG4gICAgbGl0ZXJhbDogTElURVJBTFMsXG4gICAgYnVpbHRfaW46IEJVSUxUX0lOU1xuICB9O1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdHbycsXG4gICAgYWxpYXNlczogWyAnZ29sYW5nJyBdLFxuICAgIGtleXdvcmRzOiBLRVlXT1JEUyxcbiAgICBpbGxlZ2FsOiAnPC8nLFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICBobGpzLkNfTElORV9DT01NRU5UX01PREUsXG4gICAgICBobGpzLkNfQkxPQ0tfQ09NTUVOVF9NT0RFLFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6ICdzdHJpbmcnLFxuICAgICAgICB2YXJpYW50czogW1xuICAgICAgICAgIGhsanMuUVVPVEVfU1RSSU5HX01PREUsXG4gICAgICAgICAgaGxqcy5BUE9TX1NUUklOR19NT0RFLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGJlZ2luOiAnYCcsXG4gICAgICAgICAgICBlbmQ6ICdgJ1xuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnbnVtYmVyJyxcbiAgICAgICAgdmFyaWFudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBtYXRjaDogLy0/XFxiMFt4WF1cXC5bYS1mQS1GMC05XShfP1thLWZBLUYwLTldKSpbcFBdWystXT9cXGQoXz9cXGQpKmk/LywgLy8gaGV4IHdpdGhvdXQgYSBwcmVzZW50IGRpZ2l0IGJlZm9yZSAuIChtYWtpbmcgYSBkaWdpdCBhZnRlcndhcmRzIHJlcXVpcmVkKVxuICAgICAgICAgICAgcmVsZXZhbmNlOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBtYXRjaDogLy0/XFxiMFt4WF0oXz9bYS1mQS1GMC05XSkrKChcXC4oW2EtZkEtRjAtOV0oXz9bYS1mQS1GMC05XSkqKT8pP1twUF1bKy1dP1xcZChfP1xcZCkqKT9pPy8sIC8vIGhleCB3aXRoIGEgcHJlc2VudCBkaWdpdCBiZWZvcmUgLiAobWFraW5nIGEgZGlnaXQgYWZ0ZXJ3YXJkcyBvcHRpb25hbClcbiAgICAgICAgICAgIHJlbGV2YW5jZTogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgbWF0Y2g6IC8tP1xcYjBbb09dKF8/WzAtN10pKmk/LywgLy8gbGVhZGluZyAwbyBvY3RhbFxuICAgICAgICAgICAgcmVsZXZhbmNlOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBtYXRjaDogLy0/XFwuXFxkKF8/XFxkKSooW2VFXVsrLV0/XFxkKF8/XFxkKSopP2k/LywgLy8gZGVjaW1hbCB3aXRob3V0IGEgcHJlc2VudCBkaWdpdCBiZWZvcmUgLiAobWFraW5nIGEgZGlnaXQgYWZ0ZXJ3YXJkcyByZXF1aXJlZClcbiAgICAgICAgICAgIHJlbGV2YW5jZTogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgbWF0Y2g6IC8tP1xcYlxcZChfP1xcZCkqKFxcLihcXGQoXz9cXGQpKik/KT8oW2VFXVsrLV0/XFxkKF8/XFxkKSopP2k/LywgLy8gZGVjaW1hbCB3aXRoIGEgcHJlc2VudCBkaWdpdCBiZWZvcmUgLiAobWFraW5nIGEgZGlnaXQgYWZ0ZXJ3YXJkcyBvcHRpb25hbClcbiAgICAgICAgICAgIHJlbGV2YW5jZTogMFxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIHsgYmVnaW46IC86PS8gLy8gcmVsZXZhbmNlIGJvb3N0ZXJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ2Z1bmN0aW9uJyxcbiAgICAgICAgYmVnaW5LZXl3b3JkczogJ2Z1bmMnLFxuICAgICAgICBlbmQ6ICdcXFxccyooXFxcXHt8JCknLFxuICAgICAgICBleGNsdWRlRW5kOiB0cnVlLFxuICAgICAgICBjb250YWluczogW1xuICAgICAgICAgIGhsanMuVElUTEVfTU9ERSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICdwYXJhbXMnLFxuICAgICAgICAgICAgYmVnaW46IC9cXCgvLFxuICAgICAgICAgICAgZW5kOiAvXFwpLyxcbiAgICAgICAgICAgIGVuZHNQYXJlbnQ6IHRydWUsXG4gICAgICAgICAgICBrZXl3b3JkczogS0VZV09SRFMsXG4gICAgICAgICAgICBpbGxlZ2FsOiAvW1wiJ10vXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgXVxuICB9O1xufVxuXG5leHBvcnQgeyBnbyBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsiZ28iLCJobGpzIiwiTElURVJBTFMiLCJCVUlMVF9JTlMiLCJUWVBFUyIsIktXUyIsIktFWVdPUkRTIiwia2V5d29yZCIsInR5cGUiLCJsaXRlcmFsIiwiYnVpbHRfaW4iLCJuYW1lIiwiYWxpYXNlcyIsImtleXdvcmRzIiwiaWxsZWdhbCIsImNvbnRhaW5zIiwiQ19MSU5FX0NPTU1FTlRfTU9ERSIsIkNfQkxPQ0tfQ09NTUVOVF9NT0RFIiwiY2xhc3NOYW1lIiwidmFyaWFudHMiLCJRVU9URV9TVFJJTkdfTU9ERSIsIkFQT1NfU1RSSU5HX01PREUiLCJiZWdpbiIsImVuZCIsIm1hdGNoIiwicmVsZXZhbmNlIiwiYmVnaW5LZXl3b3JkcyIsImV4Y2x1ZGVFbmQiLCJUSVRMRV9NT0RFIiwiZW5kc1BhcmVudCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/go.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/graphql.js":
/*!***********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/graphql.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ graphql)\n/* harmony export */ });\n/*\n Language: GraphQL\n Author: John Foster (GH jf990), and others\n Description: GraphQL is a query language for APIs\n Category: web, common\n*/ /** @type LanguageFn */ function graphql(hljs) {\n    const regex = hljs.regex;\n    const GQL_NAME = /[_A-Za-z][_0-9A-Za-z]*/;\n    return {\n        name: \"GraphQL\",\n        aliases: [\n            \"gql\"\n        ],\n        case_insensitive: true,\n        disableAutodetect: false,\n        keywords: {\n            keyword: [\n                \"query\",\n                \"mutation\",\n                \"subscription\",\n                \"type\",\n                \"input\",\n                \"schema\",\n                \"directive\",\n                \"interface\",\n                \"union\",\n                \"scalar\",\n                \"fragment\",\n                \"enum\",\n                \"on\"\n            ],\n            literal: [\n                \"true\",\n                \"false\",\n                \"null\"\n            ]\n        },\n        contains: [\n            hljs.HASH_COMMENT_MODE,\n            hljs.QUOTE_STRING_MODE,\n            hljs.NUMBER_MODE,\n            {\n                scope: \"punctuation\",\n                match: /[.]{3}/,\n                relevance: 0\n            },\n            {\n                scope: \"punctuation\",\n                begin: /[\\!\\(\\)\\:\\=\\[\\]\\{\\|\\}]{1}/,\n                relevance: 0\n            },\n            {\n                scope: \"variable\",\n                begin: /\\$/,\n                end: /\\W/,\n                excludeEnd: true,\n                relevance: 0\n            },\n            {\n                scope: \"meta\",\n                match: /@\\w+/,\n                excludeEnd: true\n            },\n            {\n                scope: \"symbol\",\n                begin: regex.concat(GQL_NAME, regex.lookahead(/\\s*:/)),\n                relevance: 0\n            }\n        ],\n        illegal: [\n            /[;<']/,\n            /BEGIN/\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9ncmFwaHFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7QUFLQSxHQUVBLHFCQUFxQixHQUNyQixTQUFTQSxRQUFRQyxJQUFJO0lBQ25CLE1BQU1DLFFBQVFELEtBQUtDLEtBQUs7SUFDeEIsTUFBTUMsV0FBVztJQUNqQixPQUFPO1FBQ0xDLE1BQU07UUFDTkMsU0FBUztZQUFFO1NBQU87UUFDbEJDLGtCQUFrQjtRQUNsQkMsbUJBQW1CO1FBQ25CQyxVQUFVO1lBQ1JDLFNBQVM7Z0JBQ1A7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7YUFDRDtZQUNEQyxTQUFTO2dCQUNQO2dCQUNBO2dCQUNBO2FBQ0Q7UUFDSDtRQUNBQyxVQUFVO1lBQ1JWLEtBQUtXLGlCQUFpQjtZQUN0QlgsS0FBS1ksaUJBQWlCO1lBQ3RCWixLQUFLYSxXQUFXO1lBQ2hCO2dCQUNFQyxPQUFPO2dCQUNQQyxPQUFPO2dCQUNQQyxXQUFXO1lBQ2I7WUFDQTtnQkFDRUYsT0FBTztnQkFDUEcsT0FBTztnQkFDUEQsV0FBVztZQUNiO1lBQ0E7Z0JBQ0VGLE9BQU87Z0JBQ1BHLE9BQU87Z0JBQ1BDLEtBQUs7Z0JBQ0xDLFlBQVk7Z0JBQ1pILFdBQVc7WUFDYjtZQUNBO2dCQUNFRixPQUFPO2dCQUNQQyxPQUFPO2dCQUNQSSxZQUFZO1lBQ2Q7WUFDQTtnQkFDRUwsT0FBTztnQkFDUEcsT0FBT2hCLE1BQU1tQixNQUFNLENBQUNsQixVQUFVRCxNQUFNb0IsU0FBUyxDQUFDO2dCQUM5Q0wsV0FBVztZQUNiO1NBQ0Q7UUFDRE0sU0FBUztZQUNQO1lBQ0E7U0FDRDtJQUNIO0FBQ0Y7QUFFOEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYXJkd2FyZS1kb2MtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9oaWdobGlnaHQuanMvZXMvbGFuZ3VhZ2VzL2dyYXBocWwuanM/YmYwYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuIExhbmd1YWdlOiBHcmFwaFFMXG4gQXV0aG9yOiBKb2huIEZvc3RlciAoR0ggamY5OTApLCBhbmQgb3RoZXJzXG4gRGVzY3JpcHRpb246IEdyYXBoUUwgaXMgYSBxdWVyeSBsYW5ndWFnZSBmb3IgQVBJc1xuIENhdGVnb3J5OiB3ZWIsIGNvbW1vblxuKi9cblxuLyoqIEB0eXBlIExhbmd1YWdlRm4gKi9cbmZ1bmN0aW9uIGdyYXBocWwoaGxqcykge1xuICBjb25zdCByZWdleCA9IGhsanMucmVnZXg7XG4gIGNvbnN0IEdRTF9OQU1FID0gL1tfQS1aYS16XVtfMC05QS1aYS16XSovO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IFwiR3JhcGhRTFwiLFxuICAgIGFsaWFzZXM6IFsgXCJncWxcIiBdLFxuICAgIGNhc2VfaW5zZW5zaXRpdmU6IHRydWUsXG4gICAgZGlzYWJsZUF1dG9kZXRlY3Q6IGZhbHNlLFxuICAgIGtleXdvcmRzOiB7XG4gICAgICBrZXl3b3JkOiBbXG4gICAgICAgIFwicXVlcnlcIixcbiAgICAgICAgXCJtdXRhdGlvblwiLFxuICAgICAgICBcInN1YnNjcmlwdGlvblwiLFxuICAgICAgICBcInR5cGVcIixcbiAgICAgICAgXCJpbnB1dFwiLFxuICAgICAgICBcInNjaGVtYVwiLFxuICAgICAgICBcImRpcmVjdGl2ZVwiLFxuICAgICAgICBcImludGVyZmFjZVwiLFxuICAgICAgICBcInVuaW9uXCIsXG4gICAgICAgIFwic2NhbGFyXCIsXG4gICAgICAgIFwiZnJhZ21lbnRcIixcbiAgICAgICAgXCJlbnVtXCIsXG4gICAgICAgIFwib25cIlxuICAgICAgXSxcbiAgICAgIGxpdGVyYWw6IFtcbiAgICAgICAgXCJ0cnVlXCIsXG4gICAgICAgIFwiZmFsc2VcIixcbiAgICAgICAgXCJudWxsXCJcbiAgICAgIF1cbiAgICB9LFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICBobGpzLkhBU0hfQ09NTUVOVF9NT0RFLFxuICAgICAgaGxqcy5RVU9URV9TVFJJTkdfTU9ERSxcbiAgICAgIGhsanMuTlVNQkVSX01PREUsXG4gICAgICB7XG4gICAgICAgIHNjb3BlOiBcInB1bmN0dWF0aW9uXCIsXG4gICAgICAgIG1hdGNoOiAvWy5dezN9LyxcbiAgICAgICAgcmVsZXZhbmNlOiAwXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzY29wZTogXCJwdW5jdHVhdGlvblwiLFxuICAgICAgICBiZWdpbjogL1tcXCFcXChcXClcXDpcXD1cXFtcXF1cXHtcXHxcXH1dezF9LyxcbiAgICAgICAgcmVsZXZhbmNlOiAwXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzY29wZTogXCJ2YXJpYWJsZVwiLFxuICAgICAgICBiZWdpbjogL1xcJC8sXG4gICAgICAgIGVuZDogL1xcVy8sXG4gICAgICAgIGV4Y2x1ZGVFbmQ6IHRydWUsXG4gICAgICAgIHJlbGV2YW5jZTogMFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc2NvcGU6IFwibWV0YVwiLFxuICAgICAgICBtYXRjaDogL0BcXHcrLyxcbiAgICAgICAgZXhjbHVkZUVuZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc2NvcGU6IFwic3ltYm9sXCIsXG4gICAgICAgIGJlZ2luOiByZWdleC5jb25jYXQoR1FMX05BTUUsIHJlZ2V4Lmxvb2thaGVhZCgvXFxzKjovKSksXG4gICAgICAgIHJlbGV2YW5jZTogMFxuICAgICAgfVxuICAgIF0sXG4gICAgaWxsZWdhbDogW1xuICAgICAgL1s7PCddLyxcbiAgICAgIC9CRUdJTi9cbiAgICBdXG4gIH07XG59XG5cbmV4cG9ydCB7IGdyYXBocWwgYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbImdyYXBocWwiLCJobGpzIiwicmVnZXgiLCJHUUxfTkFNRSIsIm5hbWUiLCJhbGlhc2VzIiwiY2FzZV9pbnNlbnNpdGl2ZSIsImRpc2FibGVBdXRvZGV0ZWN0Iiwia2V5d29yZHMiLCJrZXl3b3JkIiwibGl0ZXJhbCIsImNvbnRhaW5zIiwiSEFTSF9DT01NRU5UX01PREUiLCJRVU9URV9TVFJJTkdfTU9ERSIsIk5VTUJFUl9NT0RFIiwic2NvcGUiLCJtYXRjaCIsInJlbGV2YW5jZSIsImJlZ2luIiwiZW5kIiwiZXhjbHVkZUVuZCIsImNvbmNhdCIsImxvb2thaGVhZCIsImlsbGVnYWwiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/graphql.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/ini.js":
/*!*******************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/ini.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ini)\n/* harmony export */ });\n/*\nLanguage: TOML, also INI\nDescription: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.\nContributors: Guillaume Gomez <guillaume1.gomez@gmail.com>\nCategory: common, config\nWebsite: https://github.com/toml-lang/toml\n*/ function ini(hljs) {\n    const regex = hljs.regex;\n    const NUMBERS = {\n        className: \"number\",\n        relevance: 0,\n        variants: [\n            {\n                begin: /([+-]+)?[\\d]+_[\\d_]+/\n            },\n            {\n                begin: hljs.NUMBER_RE\n            }\n        ]\n    };\n    const COMMENTS = hljs.COMMENT();\n    COMMENTS.variants = [\n        {\n            begin: /;/,\n            end: /$/\n        },\n        {\n            begin: /#/,\n            end: /$/\n        }\n    ];\n    const VARIABLES = {\n        className: \"variable\",\n        variants: [\n            {\n                begin: /\\$[\\w\\d\"][\\w\\d_]*/\n            },\n            {\n                begin: /\\$\\{(.*?)\\}/\n            }\n        ]\n    };\n    const LITERALS = {\n        className: \"literal\",\n        begin: /\\bon|off|true|false|yes|no\\b/\n    };\n    const STRINGS = {\n        className: \"string\",\n        contains: [\n            hljs.BACKSLASH_ESCAPE\n        ],\n        variants: [\n            {\n                begin: \"'''\",\n                end: \"'''\",\n                relevance: 10\n            },\n            {\n                begin: '\"\"\"',\n                end: '\"\"\"',\n                relevance: 10\n            },\n            {\n                begin: '\"',\n                end: '\"'\n            },\n            {\n                begin: \"'\",\n                end: \"'\"\n            }\n        ]\n    };\n    const ARRAY = {\n        begin: /\\[/,\n        end: /\\]/,\n        contains: [\n            COMMENTS,\n            LITERALS,\n            VARIABLES,\n            STRINGS,\n            NUMBERS,\n            \"self\"\n        ],\n        relevance: 0\n    };\n    const BARE_KEY = /[A-Za-z0-9_-]+/;\n    const QUOTED_KEY_DOUBLE_QUOTE = /\"(\\\\\"|[^\"])*\"/;\n    const QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;\n    const ANY_KEY = regex.either(BARE_KEY, QUOTED_KEY_DOUBLE_QUOTE, QUOTED_KEY_SINGLE_QUOTE);\n    const DOTTED_KEY = regex.concat(ANY_KEY, \"(\\\\s*\\\\.\\\\s*\", ANY_KEY, \")*\", regex.lookahead(/\\s*=\\s*[^#\\s]/));\n    return {\n        name: \"TOML, also INI\",\n        aliases: [\n            \"toml\"\n        ],\n        case_insensitive: true,\n        illegal: /\\S/,\n        contains: [\n            COMMENTS,\n            {\n                className: \"section\",\n                begin: /\\[+/,\n                end: /\\]+/\n            },\n            {\n                begin: DOTTED_KEY,\n                className: \"attr\",\n                starts: {\n                    end: /$/,\n                    contains: [\n                        COMMENTS,\n                        ARRAY,\n                        LITERALS,\n                        VARIABLES,\n                        STRINGS,\n                        NUMBERS\n                    ]\n                }\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9pbmkuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7QUFNQSxHQUVBLFNBQVNBLElBQUlDLElBQUk7SUFDZixNQUFNQyxRQUFRRCxLQUFLQyxLQUFLO0lBQ3hCLE1BQU1DLFVBQVU7UUFDZEMsV0FBVztRQUNYQyxXQUFXO1FBQ1hDLFVBQVU7WUFDUjtnQkFBRUMsT0FBTztZQUF1QjtZQUNoQztnQkFBRUEsT0FBT04sS0FBS08sU0FBUztZQUFDO1NBQ3pCO0lBQ0g7SUFDQSxNQUFNQyxXQUFXUixLQUFLUyxPQUFPO0lBQzdCRCxTQUFTSCxRQUFRLEdBQUc7UUFDbEI7WUFDRUMsT0FBTztZQUNQSSxLQUFLO1FBQ1A7UUFDQTtZQUNFSixPQUFPO1lBQ1BJLEtBQUs7UUFDUDtLQUNEO0lBQ0QsTUFBTUMsWUFBWTtRQUNoQlIsV0FBVztRQUNYRSxVQUFVO1lBQ1I7Z0JBQUVDLE9BQU87WUFBb0I7WUFDN0I7Z0JBQUVBLE9BQU87WUFBYztTQUN4QjtJQUNIO0lBQ0EsTUFBTU0sV0FBVztRQUNmVCxXQUFXO1FBQ1hHLE9BQU87SUFDVDtJQUNBLE1BQU1PLFVBQVU7UUFDZFYsV0FBVztRQUNYVyxVQUFVO1lBQUVkLEtBQUtlLGdCQUFnQjtTQUFFO1FBQ25DVixVQUFVO1lBQ1I7Z0JBQ0VDLE9BQU87Z0JBQ1BJLEtBQUs7Z0JBQ0xOLFdBQVc7WUFDYjtZQUNBO2dCQUNFRSxPQUFPO2dCQUNQSSxLQUFLO2dCQUNMTixXQUFXO1lBQ2I7WUFDQTtnQkFDRUUsT0FBTztnQkFDUEksS0FBSztZQUNQO1lBQ0E7Z0JBQ0VKLE9BQU87Z0JBQ1BJLEtBQUs7WUFDUDtTQUNEO0lBQ0g7SUFDQSxNQUFNTSxRQUFRO1FBQ1pWLE9BQU87UUFDUEksS0FBSztRQUNMSSxVQUFVO1lBQ1JOO1lBQ0FJO1lBQ0FEO1lBQ0FFO1lBQ0FYO1lBQ0E7U0FDRDtRQUNERSxXQUFXO0lBQ2I7SUFFQSxNQUFNYSxXQUFXO0lBQ2pCLE1BQU1DLDBCQUEwQjtJQUNoQyxNQUFNQywwQkFBMEI7SUFDaEMsTUFBTUMsVUFBVW5CLE1BQU1vQixNQUFNLENBQzFCSixVQUFVQyx5QkFBeUJDO0lBRXJDLE1BQU1HLGFBQWFyQixNQUFNc0IsTUFBTSxDQUM3QkgsU0FBUyxnQkFBZ0JBLFNBQVMsTUFDbENuQixNQUFNdUIsU0FBUyxDQUFDO0lBR2xCLE9BQU87UUFDTEMsTUFBTTtRQUNOQyxTQUFTO1lBQUU7U0FBUTtRQUNuQkMsa0JBQWtCO1FBQ2xCQyxTQUFTO1FBQ1RkLFVBQVU7WUFDUk47WUFDQTtnQkFDRUwsV0FBVztnQkFDWEcsT0FBTztnQkFDUEksS0FBSztZQUNQO1lBQ0E7Z0JBQ0VKLE9BQU9nQjtnQkFDUG5CLFdBQVc7Z0JBQ1gwQixRQUFRO29CQUNObkIsS0FBSztvQkFDTEksVUFBVTt3QkFDUk47d0JBQ0FRO3dCQUNBSjt3QkFDQUQ7d0JBQ0FFO3dCQUNBWDtxQkFDRDtnQkFDSDtZQUNGO1NBQ0Q7SUFDSDtBQUNGO0FBRTBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFyZHdhcmUtZG9jLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9pbmkuanM/MTdhZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTGFuZ3VhZ2U6IFRPTUwsIGFsc28gSU5JXG5EZXNjcmlwdGlvbjogVE9NTCBhaW1zIHRvIGJlIGEgbWluaW1hbCBjb25maWd1cmF0aW9uIGZpbGUgZm9ybWF0IHRoYXQncyBlYXN5IHRvIHJlYWQgZHVlIHRvIG9idmlvdXMgc2VtYW50aWNzLlxuQ29udHJpYnV0b3JzOiBHdWlsbGF1bWUgR29tZXogPGd1aWxsYXVtZTEuZ29tZXpAZ21haWwuY29tPlxuQ2F0ZWdvcnk6IGNvbW1vbiwgY29uZmlnXG5XZWJzaXRlOiBodHRwczovL2dpdGh1Yi5jb20vdG9tbC1sYW5nL3RvbWxcbiovXG5cbmZ1bmN0aW9uIGluaShobGpzKSB7XG4gIGNvbnN0IHJlZ2V4ID0gaGxqcy5yZWdleDtcbiAgY29uc3QgTlVNQkVSUyA9IHtcbiAgICBjbGFzc05hbWU6ICdudW1iZXInLFxuICAgIHJlbGV2YW5jZTogMCxcbiAgICB2YXJpYW50czogW1xuICAgICAgeyBiZWdpbjogLyhbKy1dKyk/W1xcZF0rX1tcXGRfXSsvIH0sXG4gICAgICB7IGJlZ2luOiBobGpzLk5VTUJFUl9SRSB9XG4gICAgXVxuICB9O1xuICBjb25zdCBDT01NRU5UUyA9IGhsanMuQ09NTUVOVCgpO1xuICBDT01NRU5UUy52YXJpYW50cyA9IFtcbiAgICB7XG4gICAgICBiZWdpbjogLzsvLFxuICAgICAgZW5kOiAvJC9cbiAgICB9LFxuICAgIHtcbiAgICAgIGJlZ2luOiAvIy8sXG4gICAgICBlbmQ6IC8kL1xuICAgIH1cbiAgXTtcbiAgY29uc3QgVkFSSUFCTEVTID0ge1xuICAgIGNsYXNzTmFtZTogJ3ZhcmlhYmxlJyxcbiAgICB2YXJpYW50czogW1xuICAgICAgeyBiZWdpbjogL1xcJFtcXHdcXGRcIl1bXFx3XFxkX10qLyB9LFxuICAgICAgeyBiZWdpbjogL1xcJFxceyguKj8pXFx9LyB9XG4gICAgXVxuICB9O1xuICBjb25zdCBMSVRFUkFMUyA9IHtcbiAgICBjbGFzc05hbWU6ICdsaXRlcmFsJyxcbiAgICBiZWdpbjogL1xcYm9ufG9mZnx0cnVlfGZhbHNlfHllc3xub1xcYi9cbiAgfTtcbiAgY29uc3QgU1RSSU5HUyA9IHtcbiAgICBjbGFzc05hbWU6IFwic3RyaW5nXCIsXG4gICAgY29udGFpbnM6IFsgaGxqcy5CQUNLU0xBU0hfRVNDQVBFIF0sXG4gICAgdmFyaWFudHM6IFtcbiAgICAgIHtcbiAgICAgICAgYmVnaW46IFwiJycnXCIsXG4gICAgICAgIGVuZDogXCInJydcIixcbiAgICAgICAgcmVsZXZhbmNlOiAxMFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYmVnaW46ICdcIlwiXCInLFxuICAgICAgICBlbmQ6ICdcIlwiXCInLFxuICAgICAgICByZWxldmFuY2U6IDEwXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBiZWdpbjogJ1wiJyxcbiAgICAgICAgZW5kOiAnXCInXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBiZWdpbjogXCInXCIsXG4gICAgICAgIGVuZDogXCInXCJcbiAgICAgIH1cbiAgICBdXG4gIH07XG4gIGNvbnN0IEFSUkFZID0ge1xuICAgIGJlZ2luOiAvXFxbLyxcbiAgICBlbmQ6IC9cXF0vLFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICBDT01NRU5UUyxcbiAgICAgIExJVEVSQUxTLFxuICAgICAgVkFSSUFCTEVTLFxuICAgICAgU1RSSU5HUyxcbiAgICAgIE5VTUJFUlMsXG4gICAgICAnc2VsZidcbiAgICBdLFxuICAgIHJlbGV2YW5jZTogMFxuICB9O1xuXG4gIGNvbnN0IEJBUkVfS0VZID0gL1tBLVphLXowLTlfLV0rLztcbiAgY29uc3QgUVVPVEVEX0tFWV9ET1VCTEVfUVVPVEUgPSAvXCIoXFxcXFwifFteXCJdKSpcIi87XG4gIGNvbnN0IFFVT1RFRF9LRVlfU0lOR0xFX1FVT1RFID0gLydbXiddKicvO1xuICBjb25zdCBBTllfS0VZID0gcmVnZXguZWl0aGVyKFxuICAgIEJBUkVfS0VZLCBRVU9URURfS0VZX0RPVUJMRV9RVU9URSwgUVVPVEVEX0tFWV9TSU5HTEVfUVVPVEVcbiAgKTtcbiAgY29uc3QgRE9UVEVEX0tFWSA9IHJlZ2V4LmNvbmNhdChcbiAgICBBTllfS0VZLCAnKFxcXFxzKlxcXFwuXFxcXHMqJywgQU5ZX0tFWSwgJykqJyxcbiAgICByZWdleC5sb29rYWhlYWQoL1xccyo9XFxzKlteI1xcc10vKVxuICApO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ1RPTUwsIGFsc28gSU5JJyxcbiAgICBhbGlhc2VzOiBbICd0b21sJyBdLFxuICAgIGNhc2VfaW5zZW5zaXRpdmU6IHRydWUsXG4gICAgaWxsZWdhbDogL1xcUy8sXG4gICAgY29udGFpbnM6IFtcbiAgICAgIENPTU1FTlRTLFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6ICdzZWN0aW9uJyxcbiAgICAgICAgYmVnaW46IC9cXFsrLyxcbiAgICAgICAgZW5kOiAvXFxdKy9cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGJlZ2luOiBET1RURURfS0VZLFxuICAgICAgICBjbGFzc05hbWU6ICdhdHRyJyxcbiAgICAgICAgc3RhcnRzOiB7XG4gICAgICAgICAgZW5kOiAvJC8sXG4gICAgICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgICAgIENPTU1FTlRTLFxuICAgICAgICAgICAgQVJSQVksXG4gICAgICAgICAgICBMSVRFUkFMUyxcbiAgICAgICAgICAgIFZBUklBQkxFUyxcbiAgICAgICAgICAgIFNUUklOR1MsXG4gICAgICAgICAgICBOVU1CRVJTXG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgXVxuICB9O1xufVxuXG5leHBvcnQgeyBpbmkgYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbImluaSIsImhsanMiLCJyZWdleCIsIk5VTUJFUlMiLCJjbGFzc05hbWUiLCJyZWxldmFuY2UiLCJ2YXJpYW50cyIsImJlZ2luIiwiTlVNQkVSX1JFIiwiQ09NTUVOVFMiLCJDT01NRU5UIiwiZW5kIiwiVkFSSUFCTEVTIiwiTElURVJBTFMiLCJTVFJJTkdTIiwiY29udGFpbnMiLCJCQUNLU0xBU0hfRVNDQVBFIiwiQVJSQVkiLCJCQVJFX0tFWSIsIlFVT1RFRF9LRVlfRE9VQkxFX1FVT1RFIiwiUVVPVEVEX0tFWV9TSU5HTEVfUVVPVEUiLCJBTllfS0VZIiwiZWl0aGVyIiwiRE9UVEVEX0tFWSIsImNvbmNhdCIsImxvb2thaGVhZCIsIm5hbWUiLCJhbGlhc2VzIiwiY2FzZV9pbnNlbnNpdGl2ZSIsImlsbGVnYWwiLCJzdGFydHMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/ini.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/java.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/java.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ java)\n/* harmony export */ });\n// https://docs.oracle.com/javase/specs/jls/se15/html/jls-3.html#jls-3.10\nvar decimalDigits = \"[0-9](_*[0-9])*\";\nvar frac = `\\\\.(${decimalDigits})`;\nvar hexDigits = \"[0-9a-fA-F](_*[0-9a-fA-F])*\";\nvar NUMERIC = {\n    className: \"number\",\n    variants: [\n        // DecimalFloatingPointLiteral\n        // including ExponentPart\n        {\n            begin: `(\\\\b(${decimalDigits})((${frac})|\\\\.)?|(${frac}))` + `[eE][+-]?(${decimalDigits})[fFdD]?\\\\b`\n        },\n        // excluding ExponentPart\n        {\n            begin: `\\\\b(${decimalDigits})((${frac})[fFdD]?\\\\b|\\\\.([fFdD]\\\\b)?)`\n        },\n        {\n            begin: `(${frac})[fFdD]?\\\\b`\n        },\n        {\n            begin: `\\\\b(${decimalDigits})[fFdD]\\\\b`\n        },\n        // HexadecimalFloatingPointLiteral\n        {\n            begin: `\\\\b0[xX]((${hexDigits})\\\\.?|(${hexDigits})?\\\\.(${hexDigits}))` + `[pP][+-]?(${decimalDigits})[fFdD]?\\\\b`\n        },\n        // DecimalIntegerLiteral\n        {\n            begin: \"\\\\b(0|[1-9](_*[0-9])*)[lL]?\\\\b\"\n        },\n        // HexIntegerLiteral\n        {\n            begin: `\\\\b0[xX](${hexDigits})[lL]?\\\\b`\n        },\n        // OctalIntegerLiteral\n        {\n            begin: \"\\\\b0(_*[0-7])*[lL]?\\\\b\"\n        },\n        // BinaryIntegerLiteral\n        {\n            begin: \"\\\\b0[bB][01](_*[01])*[lL]?\\\\b\"\n        }\n    ],\n    relevance: 0\n};\n/*\nLanguage: Java\nAuthor: Vsevolod Solovyov <vsevolod.solovyov@gmail.com>\nCategory: common, enterprise\nWebsite: https://www.java.com/\n*/ /**\n * Allows recursive regex expressions to a given depth\n *\n * ie: recurRegex(\"(abc~~~)\", /~~~/g, 2) becomes:\n * (abc(abc(abc)))\n *\n * @param {string} re\n * @param {RegExp} substitution (should be a g mode regex)\n * @param {number} depth\n * @returns {string}``\n */ function recurRegex(re, substitution, depth) {\n    if (depth === -1) return \"\";\n    return re.replace(substitution, (_)=>{\n        return recurRegex(re, substitution, depth - 1);\n    });\n}\n/** @type LanguageFn */ function java(hljs) {\n    const regex = hljs.regex;\n    const JAVA_IDENT_RE = \"[\\xc0-ʸa-zA-Z_$][\\xc0-ʸa-zA-Z_$0-9]*\";\n    const GENERIC_IDENT_RE = JAVA_IDENT_RE + recurRegex(\"(?:<\" + JAVA_IDENT_RE + \"~~~(?:\\\\s*,\\\\s*\" + JAVA_IDENT_RE + \"~~~)*>)?\", /~~~/g, 2);\n    const MAIN_KEYWORDS = [\n        \"synchronized\",\n        \"abstract\",\n        \"private\",\n        \"var\",\n        \"static\",\n        \"if\",\n        \"const \",\n        \"for\",\n        \"while\",\n        \"strictfp\",\n        \"finally\",\n        \"protected\",\n        \"import\",\n        \"native\",\n        \"final\",\n        \"void\",\n        \"enum\",\n        \"else\",\n        \"break\",\n        \"transient\",\n        \"catch\",\n        \"instanceof\",\n        \"volatile\",\n        \"case\",\n        \"assert\",\n        \"package\",\n        \"default\",\n        \"public\",\n        \"try\",\n        \"switch\",\n        \"continue\",\n        \"throws\",\n        \"protected\",\n        \"public\",\n        \"private\",\n        \"module\",\n        \"requires\",\n        \"exports\",\n        \"do\",\n        \"sealed\",\n        \"yield\",\n        \"permits\",\n        \"goto\",\n        \"when\"\n    ];\n    const BUILT_INS = [\n        \"super\",\n        \"this\"\n    ];\n    const LITERALS = [\n        \"false\",\n        \"true\",\n        \"null\"\n    ];\n    const TYPES = [\n        \"char\",\n        \"boolean\",\n        \"long\",\n        \"float\",\n        \"int\",\n        \"byte\",\n        \"short\",\n        \"double\"\n    ];\n    const KEYWORDS = {\n        keyword: MAIN_KEYWORDS,\n        literal: LITERALS,\n        type: TYPES,\n        built_in: BUILT_INS\n    };\n    const ANNOTATION = {\n        className: \"meta\",\n        begin: \"@\" + JAVA_IDENT_RE,\n        contains: [\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                contains: [\n                    \"self\"\n                ] // allow nested () inside our annotation\n            }\n        ]\n    };\n    const PARAMS = {\n        className: \"params\",\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: KEYWORDS,\n        relevance: 0,\n        contains: [\n            hljs.C_BLOCK_COMMENT_MODE\n        ],\n        endsParent: true\n    };\n    return {\n        name: \"Java\",\n        aliases: [\n            \"jsp\"\n        ],\n        keywords: KEYWORDS,\n        illegal: /<\\/|#/,\n        contains: [\n            hljs.COMMENT(\"/\\\\*\\\\*\", \"\\\\*/\", {\n                relevance: 0,\n                contains: [\n                    {\n                        // eat up @'s in emails to prevent them to be recognized as doctags\n                        begin: /\\w+@/,\n                        relevance: 0\n                    },\n                    {\n                        className: \"doctag\",\n                        begin: \"@[A-Za-z]+\"\n                    }\n                ]\n            }),\n            // relevance boost\n            {\n                begin: /import java\\.[a-z]+\\./,\n                keywords: \"import\",\n                relevance: 2\n            },\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            {\n                begin: /\"\"\"/,\n                end: /\"\"\"/,\n                className: \"string\",\n                contains: [\n                    hljs.BACKSLASH_ESCAPE\n                ]\n            },\n            hljs.APOS_STRING_MODE,\n            hljs.QUOTE_STRING_MODE,\n            {\n                match: [\n                    /\\b(?:class|interface|enum|extends|implements|new)/,\n                    /\\s+/,\n                    JAVA_IDENT_RE\n                ],\n                className: {\n                    1: \"keyword\",\n                    3: \"title.class\"\n                }\n            },\n            {\n                // Exceptions for hyphenated keywords\n                match: /non-sealed/,\n                scope: \"keyword\"\n            },\n            {\n                begin: [\n                    regex.concat(/(?!else)/, JAVA_IDENT_RE),\n                    /\\s+/,\n                    JAVA_IDENT_RE,\n                    /\\s+/,\n                    /=(?!=)/\n                ],\n                className: {\n                    1: \"type\",\n                    3: \"variable\",\n                    5: \"operator\"\n                }\n            },\n            {\n                begin: [\n                    /record/,\n                    /\\s+/,\n                    JAVA_IDENT_RE\n                ],\n                className: {\n                    1: \"keyword\",\n                    3: \"title.class\"\n                },\n                contains: [\n                    PARAMS,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            {\n                // Expression keywords prevent 'keyword Name(...)' from being\n                // recognized as a function definition\n                beginKeywords: \"new throw return else\",\n                relevance: 0\n            },\n            {\n                begin: [\n                    \"(?:\" + GENERIC_IDENT_RE + \"\\\\s+)\",\n                    hljs.UNDERSCORE_IDENT_RE,\n                    /\\s*(?=\\()/\n                ],\n                className: {\n                    2: \"title.function\"\n                },\n                keywords: KEYWORDS,\n                contains: [\n                    {\n                        className: \"params\",\n                        begin: /\\(/,\n                        end: /\\)/,\n                        keywords: KEYWORDS,\n                        relevance: 0,\n                        contains: [\n                            ANNOTATION,\n                            hljs.APOS_STRING_MODE,\n                            hljs.QUOTE_STRING_MODE,\n                            NUMERIC,\n                            hljs.C_BLOCK_COMMENT_MODE\n                        ]\n                    },\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            NUMERIC,\n            ANNOTATION\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/java.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/javascript.js":
/*!**************************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/javascript.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ javascript)\n/* harmony export */ });\nconst IDENT_RE = \"[A-Za-z$_][0-9A-Za-z$_]*\";\nconst KEYWORDS = [\n    \"as\",\n    \"in\",\n    \"of\",\n    \"if\",\n    \"for\",\n    \"while\",\n    \"finally\",\n    \"var\",\n    \"new\",\n    \"function\",\n    \"do\",\n    \"return\",\n    \"void\",\n    \"else\",\n    \"break\",\n    \"catch\",\n    \"instanceof\",\n    \"with\",\n    \"throw\",\n    \"case\",\n    \"default\",\n    \"try\",\n    \"switch\",\n    \"continue\",\n    \"typeof\",\n    \"delete\",\n    \"let\",\n    \"yield\",\n    \"const\",\n    \"class\",\n    // JS handles these with a special rule\n    // \"get\",\n    // \"set\",\n    \"debugger\",\n    \"async\",\n    \"await\",\n    \"static\",\n    \"import\",\n    \"from\",\n    \"export\",\n    \"extends\",\n    // It's reached stage 3, which is \"recommended for implementation\":\n    \"using\"\n];\nconst LITERALS = [\n    \"true\",\n    \"false\",\n    \"null\",\n    \"undefined\",\n    \"NaN\",\n    \"Infinity\"\n];\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\nconst TYPES = [\n    // Fundamental objects\n    \"Object\",\n    \"Function\",\n    \"Boolean\",\n    \"Symbol\",\n    // numbers and dates\n    \"Math\",\n    \"Date\",\n    \"Number\",\n    \"BigInt\",\n    // text\n    \"String\",\n    \"RegExp\",\n    // Indexed collections\n    \"Array\",\n    \"Float32Array\",\n    \"Float64Array\",\n    \"Int8Array\",\n    \"Uint8Array\",\n    \"Uint8ClampedArray\",\n    \"Int16Array\",\n    \"Int32Array\",\n    \"Uint16Array\",\n    \"Uint32Array\",\n    \"BigInt64Array\",\n    \"BigUint64Array\",\n    // Keyed collections\n    \"Set\",\n    \"Map\",\n    \"WeakSet\",\n    \"WeakMap\",\n    // Structured data\n    \"ArrayBuffer\",\n    \"SharedArrayBuffer\",\n    \"Atomics\",\n    \"DataView\",\n    \"JSON\",\n    // Control abstraction objects\n    \"Promise\",\n    \"Generator\",\n    \"GeneratorFunction\",\n    \"AsyncFunction\",\n    // Reflection\n    \"Reflect\",\n    \"Proxy\",\n    // Internationalization\n    \"Intl\",\n    // WebAssembly\n    \"WebAssembly\"\n];\nconst ERROR_TYPES = [\n    \"Error\",\n    \"EvalError\",\n    \"InternalError\",\n    \"RangeError\",\n    \"ReferenceError\",\n    \"SyntaxError\",\n    \"TypeError\",\n    \"URIError\"\n];\nconst BUILT_IN_GLOBALS = [\n    \"setInterval\",\n    \"setTimeout\",\n    \"clearInterval\",\n    \"clearTimeout\",\n    \"require\",\n    \"exports\",\n    \"eval\",\n    \"isFinite\",\n    \"isNaN\",\n    \"parseFloat\",\n    \"parseInt\",\n    \"decodeURI\",\n    \"decodeURIComponent\",\n    \"encodeURI\",\n    \"encodeURIComponent\",\n    \"escape\",\n    \"unescape\"\n];\nconst BUILT_IN_VARIABLES = [\n    \"arguments\",\n    \"this\",\n    \"super\",\n    \"console\",\n    \"window\",\n    \"document\",\n    \"localStorage\",\n    \"sessionStorage\",\n    \"module\",\n    \"global\" // Node.js\n];\nconst BUILT_INS = [].concat(BUILT_IN_GLOBALS, TYPES, ERROR_TYPES);\n/*\nLanguage: JavaScript\nDescription: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.\nCategory: common, scripting, web\nWebsite: https://developer.mozilla.org/en-US/docs/Web/JavaScript\n*/ /** @type LanguageFn */ function javascript(hljs) {\n    const regex = hljs.regex;\n    /**\n   * Takes a string like \"<Booger\" and checks to see\n   * if we can find a matching \"</Booger\" later in the\n   * content.\n   * @param {RegExpMatchArray} match\n   * @param {{after:number}} param1\n   */ const hasClosingTag = (match, { after })=>{\n        const tag = \"</\" + match[0].slice(1);\n        const pos = match.input.indexOf(tag, after);\n        return pos !== -1;\n    };\n    const IDENT_RE$1 = IDENT_RE;\n    const FRAGMENT = {\n        begin: \"<>\",\n        end: \"</>\"\n    };\n    // to avoid some special cases inside isTrulyOpeningTag\n    const XML_SELF_CLOSING = /<[A-Za-z0-9\\\\._:-]+\\s*\\/>/;\n    const XML_TAG = {\n        begin: /<[A-Za-z0-9\\\\._:-]+/,\n        end: /\\/[A-Za-z0-9\\\\._:-]+>|\\/>/,\n        /**\n     * @param {RegExpMatchArray} match\n     * @param {CallbackResponse} response\n     */ isTrulyOpeningTag: (match, response)=>{\n            const afterMatchIndex = match[0].length + match.index;\n            const nextChar = match.input[afterMatchIndex];\n            if (// HTML should not include another raw `<` inside a tag\n            // nested type?\n            // `<Array<Array<number>>`, etc.\n            nextChar === \"<\" || // the , gives away that this is not HTML\n            // `<T, A extends keyof T, V>`\n            nextChar === \",\") {\n                response.ignoreMatch();\n                return;\n            }\n            // `<something>`\n            // Quite possibly a tag, lets look for a matching closing tag...\n            if (nextChar === \">\") {\n                // if we cannot find a matching closing tag, then we\n                // will ignore it\n                if (!hasClosingTag(match, {\n                    after: afterMatchIndex\n                })) {\n                    response.ignoreMatch();\n                }\n            }\n            // `<blah />` (self-closing)\n            // handled by simpleSelfClosing rule\n            let m;\n            const afterMatch = match.input.substring(afterMatchIndex);\n            // some more template typing stuff\n            //  <T = any>(key?: string) => Modify<\n            if (m = afterMatch.match(/^\\s*=/)) {\n                response.ignoreMatch();\n                return;\n            }\n            // `<From extends string>`\n            // technically this could be HTML, but it smells like a type\n            // NOTE: This is ugh, but added specifically for https://github.com/highlightjs/highlight.js/issues/3276\n            if (m = afterMatch.match(/^\\s+extends\\s+/)) {\n                if (m.index === 0) {\n                    response.ignoreMatch();\n                    // eslint-disable-next-line no-useless-return\n                    return;\n                }\n            }\n        }\n    };\n    const KEYWORDS$1 = {\n        $pattern: IDENT_RE,\n        keyword: KEYWORDS,\n        literal: LITERALS,\n        built_in: BUILT_INS,\n        \"variable.language\": BUILT_IN_VARIABLES\n    };\n    // https://tc39.es/ecma262/#sec-literals-numeric-literals\n    const decimalDigits = \"[0-9](_?[0-9])*\";\n    const frac = `\\\\.(${decimalDigits})`;\n    // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral\n    // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n    const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;\n    const NUMBER = {\n        className: \"number\",\n        variants: [\n            // DecimalLiteral\n            {\n                begin: `(\\\\b(${decimalInteger})((${frac})|\\\\.)?|(${frac}))` + `[eE][+-]?(${decimalDigits})\\\\b`\n            },\n            {\n                begin: `\\\\b(${decimalInteger})\\\\b((${frac})\\\\b|\\\\.)?|(${frac})\\\\b`\n            },\n            // DecimalBigIntegerLiteral\n            {\n                begin: `\\\\b(0|[1-9](_?[0-9])*)n\\\\b`\n            },\n            // NonDecimalIntegerLiteral\n            {\n                begin: \"\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[bB][0-1](_?[0-1])*n?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[oO][0-7](_?[0-7])*n?\\\\b\"\n            },\n            // LegacyOctalIntegerLiteral (does not include underscore separators)\n            // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n            {\n                begin: \"\\\\b0[0-7]+n?\\\\b\"\n            }\n        ],\n        relevance: 0\n    };\n    const SUBST = {\n        className: \"subst\",\n        begin: \"\\\\$\\\\{\",\n        end: \"\\\\}\",\n        keywords: KEYWORDS$1,\n        contains: [] // defined later\n    };\n    const HTML_TEMPLATE = {\n        begin: \".?html`\",\n        end: \"\",\n        starts: {\n            end: \"`\",\n            returnEnd: false,\n            contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n            ],\n            subLanguage: \"xml\"\n        }\n    };\n    const CSS_TEMPLATE = {\n        begin: \".?css`\",\n        end: \"\",\n        starts: {\n            end: \"`\",\n            returnEnd: false,\n            contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n            ],\n            subLanguage: \"css\"\n        }\n    };\n    const GRAPHQL_TEMPLATE = {\n        begin: \".?gql`\",\n        end: \"\",\n        starts: {\n            end: \"`\",\n            returnEnd: false,\n            contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n            ],\n            subLanguage: \"graphql\"\n        }\n    };\n    const TEMPLATE_STRING = {\n        className: \"string\",\n        begin: \"`\",\n        end: \"`\",\n        contains: [\n            hljs.BACKSLASH_ESCAPE,\n            SUBST\n        ]\n    };\n    const JSDOC_COMMENT = hljs.COMMENT(/\\/\\*\\*(?!\\/)/, \"\\\\*/\", {\n        relevance: 0,\n        contains: [\n            {\n                begin: \"(?=@[A-Za-z]+)\",\n                relevance: 0,\n                contains: [\n                    {\n                        className: \"doctag\",\n                        begin: \"@[A-Za-z]+\"\n                    },\n                    {\n                        className: \"type\",\n                        begin: \"\\\\{\",\n                        end: \"\\\\}\",\n                        excludeEnd: true,\n                        excludeBegin: true,\n                        relevance: 0\n                    },\n                    {\n                        className: \"variable\",\n                        begin: IDENT_RE$1 + \"(?=\\\\s*(-)|$)\",\n                        endsParent: true,\n                        relevance: 0\n                    },\n                    // eat spaces (not newlines) so we can find\n                    // types or variables\n                    {\n                        begin: /(?=[^\\n])\\s/,\n                        relevance: 0\n                    }\n                ]\n            }\n        ]\n    });\n    const COMMENT = {\n        className: \"comment\",\n        variants: [\n            JSDOC_COMMENT,\n            hljs.C_BLOCK_COMMENT_MODE,\n            hljs.C_LINE_COMMENT_MODE\n        ]\n    };\n    const SUBST_INTERNALS = [\n        hljs.APOS_STRING_MODE,\n        hljs.QUOTE_STRING_MODE,\n        HTML_TEMPLATE,\n        CSS_TEMPLATE,\n        GRAPHQL_TEMPLATE,\n        TEMPLATE_STRING,\n        // Skip numbers when they are part of a variable name\n        {\n            match: /\\$\\d+/\n        },\n        NUMBER\n    ];\n    SUBST.contains = SUBST_INTERNALS.concat({\n        // we need to pair up {} inside our subst to prevent\n        // it from ending too early by matching another }\n        begin: /\\{/,\n        end: /\\}/,\n        keywords: KEYWORDS$1,\n        contains: [\n            \"self\"\n        ].concat(SUBST_INTERNALS)\n    });\n    const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);\n    const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([\n        // eat recursive parens in sub expressions\n        {\n            begin: /(\\s*)\\(/,\n            end: /\\)/,\n            keywords: KEYWORDS$1,\n            contains: [\n                \"self\"\n            ].concat(SUBST_AND_COMMENTS)\n        }\n    ]);\n    const PARAMS = {\n        className: \"params\",\n        // convert this to negative lookbehind in v12\n        begin: /(\\s*)\\(/,\n        end: /\\)/,\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: KEYWORDS$1,\n        contains: PARAMS_CONTAINS\n    };\n    // ES6 classes\n    const CLASS_OR_EXTENDS = {\n        variants: [\n            // class Car extends vehicle\n            {\n                match: [\n                    /class/,\n                    /\\s+/,\n                    IDENT_RE$1,\n                    /\\s+/,\n                    /extends/,\n                    /\\s+/,\n                    regex.concat(IDENT_RE$1, \"(\", regex.concat(/\\./, IDENT_RE$1), \")*\")\n                ],\n                scope: {\n                    1: \"keyword\",\n                    3: \"title.class\",\n                    5: \"keyword\",\n                    7: \"title.class.inherited\"\n                }\n            },\n            // class Car\n            {\n                match: [\n                    /class/,\n                    /\\s+/,\n                    IDENT_RE$1\n                ],\n                scope: {\n                    1: \"keyword\",\n                    3: \"title.class\"\n                }\n            }\n        ]\n    };\n    const CLASS_REFERENCE = {\n        relevance: 0,\n        match: regex.either(// Hard coded exceptions\n        /\\bJSON/, // Float32Array, OutT\n        /\\b[A-Z][a-z]+([A-Z][a-z]*|\\d)*/, // CSSFactory, CSSFactoryT\n        /\\b[A-Z]{2,}([A-Z][a-z]+|\\d)+([A-Z][a-z]*)*/, // FPs, FPsT\n        /\\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\\d)*([A-Z][a-z]*)*/),\n        className: \"title.class\",\n        keywords: {\n            _: [\n                // se we still get relevance credit for JS library classes\n                ...TYPES,\n                ...ERROR_TYPES\n            ]\n        }\n    };\n    const USE_STRICT = {\n        label: \"use_strict\",\n        className: \"meta\",\n        relevance: 10,\n        begin: /^\\s*['\"]use (strict|asm)['\"]/\n    };\n    const FUNCTION_DEFINITION = {\n        variants: [\n            {\n                match: [\n                    /function/,\n                    /\\s+/,\n                    IDENT_RE$1,\n                    /(?=\\s*\\()/\n                ]\n            },\n            // anonymous function\n            {\n                match: [\n                    /function/,\n                    /\\s*(?=\\()/\n                ]\n            }\n        ],\n        className: {\n            1: \"keyword\",\n            3: \"title.function\"\n        },\n        label: \"func.def\",\n        contains: [\n            PARAMS\n        ],\n        illegal: /%/\n    };\n    const UPPER_CASE_CONSTANT = {\n        relevance: 0,\n        match: /\\b[A-Z][A-Z_0-9]+\\b/,\n        className: \"variable.constant\"\n    };\n    function noneOf(list) {\n        return regex.concat(\"(?!\", list.join(\"|\"), \")\");\n    }\n    const FUNCTION_CALL = {\n        match: regex.concat(/\\b/, noneOf([\n            ...BUILT_IN_GLOBALS,\n            \"super\",\n            \"import\"\n        ].map((x)=>`${x}\\\\s*\\\\(`)), IDENT_RE$1, regex.lookahead(/\\s*\\(/)),\n        className: \"title.function\",\n        relevance: 0\n    };\n    const PROPERTY_ACCESS = {\n        begin: regex.concat(/\\./, regex.lookahead(regex.concat(IDENT_RE$1, /(?![0-9A-Za-z$_(])/))),\n        end: IDENT_RE$1,\n        excludeBegin: true,\n        keywords: \"prototype\",\n        className: \"property\",\n        relevance: 0\n    };\n    const GETTER_OR_SETTER = {\n        match: [\n            /get|set/,\n            /\\s+/,\n            IDENT_RE$1,\n            /(?=\\()/\n        ],\n        className: {\n            1: \"keyword\",\n            3: \"title.function\"\n        },\n        contains: [\n            {\n                begin: /\\(\\)/\n            },\n            PARAMS\n        ]\n    };\n    const FUNC_LEAD_IN_RE = \"(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*\" + \"\\\\)[^()]*)*\" + \"\\\\)[^()]*)*\" + \"\\\\)|\" + hljs.UNDERSCORE_IDENT_RE + \")\\\\s*=>\";\n    const FUNCTION_VARIABLE = {\n        match: [\n            /const|var|let/,\n            /\\s+/,\n            IDENT_RE$1,\n            /\\s*/,\n            /=\\s*/,\n            /(async\\s*)?/,\n            regex.lookahead(FUNC_LEAD_IN_RE)\n        ],\n        keywords: \"async\",\n        className: {\n            1: \"keyword\",\n            3: \"title.function\"\n        },\n        contains: [\n            PARAMS\n        ]\n    };\n    return {\n        name: \"JavaScript\",\n        aliases: [\n            \"js\",\n            \"jsx\",\n            \"mjs\",\n            \"cjs\"\n        ],\n        keywords: KEYWORDS$1,\n        // this will be extended by TypeScript\n        exports: {\n            PARAMS_CONTAINS,\n            CLASS_REFERENCE\n        },\n        illegal: /#(?![$_A-z])/,\n        contains: [\n            hljs.SHEBANG({\n                label: \"shebang\",\n                binary: \"node\",\n                relevance: 5\n            }),\n            USE_STRICT,\n            hljs.APOS_STRING_MODE,\n            hljs.QUOTE_STRING_MODE,\n            HTML_TEMPLATE,\n            CSS_TEMPLATE,\n            GRAPHQL_TEMPLATE,\n            TEMPLATE_STRING,\n            COMMENT,\n            // Skip numbers when they are part of a variable name\n            {\n                match: /\\$\\d+/\n            },\n            NUMBER,\n            CLASS_REFERENCE,\n            {\n                scope: \"attr\",\n                match: IDENT_RE$1 + regex.lookahead(\":\"),\n                relevance: 0\n            },\n            FUNCTION_VARIABLE,\n            {\n                begin: \"(\" + hljs.RE_STARTERS_RE + \"|\\\\b(case|return|throw)\\\\b)\\\\s*\",\n                keywords: \"return throw case\",\n                relevance: 0,\n                contains: [\n                    COMMENT,\n                    hljs.REGEXP_MODE,\n                    {\n                        className: \"function\",\n                        // we have to count the parens to make sure we actually have the\n                        // correct bounding ( ) before the =>.  There could be any number of\n                        // sub-expressions inside also surrounded by parens.\n                        begin: FUNC_LEAD_IN_RE,\n                        returnBegin: true,\n                        end: \"\\\\s*=>\",\n                        contains: [\n                            {\n                                className: \"params\",\n                                variants: [\n                                    {\n                                        begin: hljs.UNDERSCORE_IDENT_RE,\n                                        relevance: 0\n                                    },\n                                    {\n                                        className: null,\n                                        begin: /\\(\\s*\\)/,\n                                        skip: true\n                                    },\n                                    {\n                                        begin: /(\\s*)\\(/,\n                                        end: /\\)/,\n                                        excludeBegin: true,\n                                        excludeEnd: true,\n                                        keywords: KEYWORDS$1,\n                                        contains: PARAMS_CONTAINS\n                                    }\n                                ]\n                            }\n                        ]\n                    },\n                    {\n                        begin: /,/,\n                        relevance: 0\n                    },\n                    {\n                        match: /\\s+/,\n                        relevance: 0\n                    },\n                    {\n                        variants: [\n                            {\n                                begin: FRAGMENT.begin,\n                                end: FRAGMENT.end\n                            },\n                            {\n                                match: XML_SELF_CLOSING\n                            },\n                            {\n                                begin: XML_TAG.begin,\n                                // we carefully check the opening tag to see if it truly\n                                // is a tag and not a false positive\n                                \"on:begin\": XML_TAG.isTrulyOpeningTag,\n                                end: XML_TAG.end\n                            }\n                        ],\n                        subLanguage: \"xml\",\n                        contains: [\n                            {\n                                begin: XML_TAG.begin,\n                                end: XML_TAG.end,\n                                skip: true,\n                                contains: [\n                                    \"self\"\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            },\n            FUNCTION_DEFINITION,\n            {\n                // prevent this from getting swallowed up by function\n                // since they appear \"function like\"\n                beginKeywords: \"while if switch catch for\"\n            },\n            {\n                // we have to count the parens to make sure we actually have the correct\n                // bounding ( ).  There could be any number of sub-expressions inside\n                // also surrounded by parens.\n                begin: \"\\\\b(?!function)\" + hljs.UNDERSCORE_IDENT_RE + \"\\\\(\" + // first parens\n                \"[^()]*(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*\" + \"\\\\)[^()]*)*\" + \"\\\\)[^()]*)*\" + \"\\\\)\\\\s*\\\\{\",\n                returnBegin: true,\n                label: \"func.def\",\n                contains: [\n                    PARAMS,\n                    hljs.inherit(hljs.TITLE_MODE, {\n                        begin: IDENT_RE$1,\n                        className: \"title.function\"\n                    })\n                ]\n            },\n            // catch ... so it won't trigger the property rule below\n            {\n                match: /\\.\\.\\./,\n                relevance: 0\n            },\n            PROPERTY_ACCESS,\n            // hack: prevents detection of keywords in some circumstances\n            // .keyword()\n            // $keyword = x\n            {\n                match: \"\\\\$\" + IDENT_RE$1,\n                relevance: 0\n            },\n            {\n                match: [\n                    /\\bconstructor(?=\\s*\\()/\n                ],\n                className: {\n                    1: \"title.function\"\n                },\n                contains: [\n                    PARAMS\n                ]\n            },\n            FUNCTION_CALL,\n            UPPER_CASE_CONSTANT,\n            CLASS_OR_EXTENDS,\n            GETTER_OR_SETTER,\n            {\n                match: /\\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/javascript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/json.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/json.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ json)\n/* harmony export */ });\n/*\nLanguage: JSON\nDescription: JSON (JavaScript Object Notation) is a lightweight data-interchange format.\nAuthor: Ivan Sagalaev <maniac@softwaremaniacs.org>\nWebsite: http://www.json.org\nCategory: common, protocols, web\n*/ function json(hljs) {\n    const ATTRIBUTE = {\n        className: \"attr\",\n        begin: /\"(\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n        relevance: 1.01\n    };\n    const PUNCTUATION = {\n        match: /[{}[\\],:]/,\n        className: \"punctuation\",\n        relevance: 0\n    };\n    const LITERALS = [\n        \"true\",\n        \"false\",\n        \"null\"\n    ];\n    // NOTE: normally we would rely on `keywords` for this but using a mode here allows us\n    // - to use the very tight `illegal: \\S` rule later to flag any other character\n    // - as illegal indicating that despite looking like JSON we do not truly have\n    // - JSON and thus improve false-positively greatly since JSON will try and claim\n    // - all sorts of JSON looking stuff\n    const LITERALS_MODE = {\n        scope: \"literal\",\n        beginKeywords: LITERALS.join(\" \")\n    };\n    return {\n        name: \"JSON\",\n        aliases: [\n            \"jsonc\"\n        ],\n        keywords: {\n            literal: LITERALS\n        },\n        contains: [\n            ATTRIBUTE,\n            PUNCTUATION,\n            hljs.QUOTE_STRING_MODE,\n            LITERALS_MODE,\n            hljs.C_NUMBER_MODE,\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE\n        ],\n        illegal: \"\\\\S\"\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9qc29uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7O0FBTUEsR0FFQSxTQUFTQSxLQUFLQyxJQUFJO0lBQ2hCLE1BQU1DLFlBQVk7UUFDaEJDLFdBQVc7UUFDWEMsT0FBTztRQUNQQyxXQUFXO0lBQ2I7SUFDQSxNQUFNQyxjQUFjO1FBQ2xCQyxPQUFPO1FBQ1BKLFdBQVc7UUFDWEUsV0FBVztJQUNiO0lBQ0EsTUFBTUcsV0FBVztRQUNmO1FBQ0E7UUFDQTtLQUNEO0lBQ0Qsc0ZBQXNGO0lBQ3RGLCtFQUErRTtJQUMvRSw4RUFBOEU7SUFDOUUsaUZBQWlGO0lBQ2pGLG9DQUFvQztJQUNwQyxNQUFNQyxnQkFBZ0I7UUFDcEJDLE9BQU87UUFDUEMsZUFBZUgsU0FBU0ksSUFBSSxDQUFDO0lBQy9CO0lBRUEsT0FBTztRQUNMQyxNQUFNO1FBQ05DLFNBQVM7WUFBQztTQUFRO1FBQ2xCQyxVQUFTO1lBQ1BDLFNBQVNSO1FBQ1g7UUFDQVMsVUFBVTtZQUNSZjtZQUNBSTtZQUNBTCxLQUFLaUIsaUJBQWlCO1lBQ3RCVDtZQUNBUixLQUFLa0IsYUFBYTtZQUNsQmxCLEtBQUttQixtQkFBbUI7WUFDeEJuQixLQUFLb0Isb0JBQW9CO1NBQzFCO1FBQ0RDLFNBQVM7SUFDWDtBQUNGO0FBRTJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFyZHdhcmUtZG9jLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9qc29uLmpzP2ZiYTkiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbkxhbmd1YWdlOiBKU09OXG5EZXNjcmlwdGlvbjogSlNPTiAoSmF2YVNjcmlwdCBPYmplY3QgTm90YXRpb24pIGlzIGEgbGlnaHR3ZWlnaHQgZGF0YS1pbnRlcmNoYW5nZSBmb3JtYXQuXG5BdXRob3I6IEl2YW4gU2FnYWxhZXYgPG1hbmlhY0Bzb2Z0d2FyZW1hbmlhY3Mub3JnPlxuV2Vic2l0ZTogaHR0cDovL3d3dy5qc29uLm9yZ1xuQ2F0ZWdvcnk6IGNvbW1vbiwgcHJvdG9jb2xzLCB3ZWJcbiovXG5cbmZ1bmN0aW9uIGpzb24oaGxqcykge1xuICBjb25zdCBBVFRSSUJVVEUgPSB7XG4gICAgY2xhc3NOYW1lOiAnYXR0cicsXG4gICAgYmVnaW46IC9cIihcXFxcLnxbXlxcXFxcIlxcclxcbl0pKlwiKD89XFxzKjopLyxcbiAgICByZWxldmFuY2U6IDEuMDFcbiAgfTtcbiAgY29uc3QgUFVOQ1RVQVRJT04gPSB7XG4gICAgbWF0Y2g6IC9be31bXFxdLDpdLyxcbiAgICBjbGFzc05hbWU6IFwicHVuY3R1YXRpb25cIixcbiAgICByZWxldmFuY2U6IDBcbiAgfTtcbiAgY29uc3QgTElURVJBTFMgPSBbXG4gICAgXCJ0cnVlXCIsXG4gICAgXCJmYWxzZVwiLFxuICAgIFwibnVsbFwiXG4gIF07XG4gIC8vIE5PVEU6IG5vcm1hbGx5IHdlIHdvdWxkIHJlbHkgb24gYGtleXdvcmRzYCBmb3IgdGhpcyBidXQgdXNpbmcgYSBtb2RlIGhlcmUgYWxsb3dzIHVzXG4gIC8vIC0gdG8gdXNlIHRoZSB2ZXJ5IHRpZ2h0IGBpbGxlZ2FsOiBcXFNgIHJ1bGUgbGF0ZXIgdG8gZmxhZyBhbnkgb3RoZXIgY2hhcmFjdGVyXG4gIC8vIC0gYXMgaWxsZWdhbCBpbmRpY2F0aW5nIHRoYXQgZGVzcGl0ZSBsb29raW5nIGxpa2UgSlNPTiB3ZSBkbyBub3QgdHJ1bHkgaGF2ZVxuICAvLyAtIEpTT04gYW5kIHRodXMgaW1wcm92ZSBmYWxzZS1wb3NpdGl2ZWx5IGdyZWF0bHkgc2luY2UgSlNPTiB3aWxsIHRyeSBhbmQgY2xhaW1cbiAgLy8gLSBhbGwgc29ydHMgb2YgSlNPTiBsb29raW5nIHN0dWZmXG4gIGNvbnN0IExJVEVSQUxTX01PREUgPSB7XG4gICAgc2NvcGU6IFwibGl0ZXJhbFwiLFxuICAgIGJlZ2luS2V5d29yZHM6IExJVEVSQUxTLmpvaW4oXCIgXCIpLFxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ0pTT04nLFxuICAgIGFsaWFzZXM6IFsnanNvbmMnXSxcbiAgICBrZXl3b3Jkczp7XG4gICAgICBsaXRlcmFsOiBMSVRFUkFMUyxcbiAgICB9LFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICBBVFRSSUJVVEUsXG4gICAgICBQVU5DVFVBVElPTixcbiAgICAgIGhsanMuUVVPVEVfU1RSSU5HX01PREUsXG4gICAgICBMSVRFUkFMU19NT0RFLFxuICAgICAgaGxqcy5DX05VTUJFUl9NT0RFLFxuICAgICAgaGxqcy5DX0xJTkVfQ09NTUVOVF9NT0RFLFxuICAgICAgaGxqcy5DX0JMT0NLX0NPTU1FTlRfTU9ERVxuICAgIF0sXG4gICAgaWxsZWdhbDogJ1xcXFxTJ1xuICB9O1xufVxuXG5leHBvcnQgeyBqc29uIGFzIGRlZmF1bHQgfTtcbiJdLCJuYW1lcyI6WyJqc29uIiwiaGxqcyIsIkFUVFJJQlVURSIsImNsYXNzTmFtZSIsImJlZ2luIiwicmVsZXZhbmNlIiwiUFVOQ1RVQVRJT04iLCJtYXRjaCIsIkxJVEVSQUxTIiwiTElURVJBTFNfTU9ERSIsInNjb3BlIiwiYmVnaW5LZXl3b3JkcyIsImpvaW4iLCJuYW1lIiwiYWxpYXNlcyIsImtleXdvcmRzIiwibGl0ZXJhbCIsImNvbnRhaW5zIiwiUVVPVEVfU1RSSU5HX01PREUiLCJDX05VTUJFUl9NT0RFIiwiQ19MSU5FX0NPTU1FTlRfTU9ERSIsIkNfQkxPQ0tfQ09NTUVOVF9NT0RFIiwiaWxsZWdhbCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/json.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/kotlin.js":
/*!**********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/kotlin.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ kotlin)\n/* harmony export */ });\n// https://docs.oracle.com/javase/specs/jls/se15/html/jls-3.html#jls-3.10\nvar decimalDigits = \"[0-9](_*[0-9])*\";\nvar frac = `\\\\.(${decimalDigits})`;\nvar hexDigits = \"[0-9a-fA-F](_*[0-9a-fA-F])*\";\nvar NUMERIC = {\n    className: \"number\",\n    variants: [\n        // DecimalFloatingPointLiteral\n        // including ExponentPart\n        {\n            begin: `(\\\\b(${decimalDigits})((${frac})|\\\\.)?|(${frac}))` + `[eE][+-]?(${decimalDigits})[fFdD]?\\\\b`\n        },\n        // excluding ExponentPart\n        {\n            begin: `\\\\b(${decimalDigits})((${frac})[fFdD]?\\\\b|\\\\.([fFdD]\\\\b)?)`\n        },\n        {\n            begin: `(${frac})[fFdD]?\\\\b`\n        },\n        {\n            begin: `\\\\b(${decimalDigits})[fFdD]\\\\b`\n        },\n        // HexadecimalFloatingPointLiteral\n        {\n            begin: `\\\\b0[xX]((${hexDigits})\\\\.?|(${hexDigits})?\\\\.(${hexDigits}))` + `[pP][+-]?(${decimalDigits})[fFdD]?\\\\b`\n        },\n        // DecimalIntegerLiteral\n        {\n            begin: \"\\\\b(0|[1-9](_*[0-9])*)[lL]?\\\\b\"\n        },\n        // HexIntegerLiteral\n        {\n            begin: `\\\\b0[xX](${hexDigits})[lL]?\\\\b`\n        },\n        // OctalIntegerLiteral\n        {\n            begin: \"\\\\b0(_*[0-7])*[lL]?\\\\b\"\n        },\n        // BinaryIntegerLiteral\n        {\n            begin: \"\\\\b0[bB][01](_*[01])*[lL]?\\\\b\"\n        }\n    ],\n    relevance: 0\n};\n/*\n Language: Kotlin\n Description: Kotlin is an OSS statically typed programming language that targets the JVM, Android, JavaScript and Native.\n Author: Sergey Mashkov <cy6erGn0m@gmail.com>\n Website: https://kotlinlang.org\n Category: common\n */ function kotlin(hljs) {\n    const KEYWORDS = {\n        keyword: \"abstract as val var vararg get set class object open private protected public noinline \" + \"crossinline dynamic final enum if else do while for when throw try catch finally \" + \"import package is in fun override companion reified inline lateinit init \" + \"interface annotation data sealed internal infix operator out by constructor super \" + \"tailrec where const inner suspend typealias external expect actual\",\n        built_in: \"Byte Short Char Int Long Boolean Float Double Void Unit Nothing\",\n        literal: \"true false null\"\n    };\n    const KEYWORDS_WITH_LABEL = {\n        className: \"keyword\",\n        begin: /\\b(break|continue|return|this)\\b/,\n        starts: {\n            contains: [\n                {\n                    className: \"symbol\",\n                    begin: /@\\w+/\n                }\n            ]\n        }\n    };\n    const LABEL = {\n        className: \"symbol\",\n        begin: hljs.UNDERSCORE_IDENT_RE + \"@\"\n    };\n    // for string templates\n    const SUBST = {\n        className: \"subst\",\n        begin: /\\$\\{/,\n        end: /\\}/,\n        contains: [\n            hljs.C_NUMBER_MODE\n        ]\n    };\n    const VARIABLE = {\n        className: \"variable\",\n        begin: \"\\\\$\" + hljs.UNDERSCORE_IDENT_RE\n    };\n    const STRING = {\n        className: \"string\",\n        variants: [\n            {\n                begin: '\"\"\"',\n                end: '\"\"\"(?=[^\"])',\n                contains: [\n                    VARIABLE,\n                    SUBST\n                ]\n            },\n            // Can't use built-in modes easily, as we want to use STRING in the meta\n            // context as 'meta-string' and there's no syntax to remove explicitly set\n            // classNames in built-in modes.\n            {\n                begin: \"'\",\n                end: \"'\",\n                illegal: /\\n/,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE\n                ]\n            },\n            {\n                begin: '\"',\n                end: '\"',\n                illegal: /\\n/,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE,\n                    VARIABLE,\n                    SUBST\n                ]\n            }\n        ]\n    };\n    SUBST.contains.push(STRING);\n    const ANNOTATION_USE_SITE = {\n        className: \"meta\",\n        begin: \"@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\\\s*:(?:\\\\s*\" + hljs.UNDERSCORE_IDENT_RE + \")?\"\n    };\n    const ANNOTATION = {\n        className: \"meta\",\n        begin: \"@\" + hljs.UNDERSCORE_IDENT_RE,\n        contains: [\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                contains: [\n                    hljs.inherit(STRING, {\n                        className: \"string\"\n                    }),\n                    \"self\"\n                ]\n            }\n        ]\n    };\n    // https://kotlinlang.org/docs/reference/whatsnew11.html#underscores-in-numeric-literals\n    // According to the doc above, the number mode of kotlin is the same as java 8,\n    // so the code below is copied from java.js\n    const KOTLIN_NUMBER_MODE = NUMERIC;\n    const KOTLIN_NESTED_COMMENT = hljs.COMMENT(\"/\\\\*\", \"\\\\*/\", {\n        contains: [\n            hljs.C_BLOCK_COMMENT_MODE\n        ]\n    });\n    const KOTLIN_PAREN_TYPE = {\n        variants: [\n            {\n                className: \"type\",\n                begin: hljs.UNDERSCORE_IDENT_RE\n            },\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                contains: [] // defined later\n            }\n        ]\n    };\n    const KOTLIN_PAREN_TYPE2 = KOTLIN_PAREN_TYPE;\n    KOTLIN_PAREN_TYPE2.variants[1].contains = [\n        KOTLIN_PAREN_TYPE\n    ];\n    KOTLIN_PAREN_TYPE.variants[1].contains = [\n        KOTLIN_PAREN_TYPE2\n    ];\n    return {\n        name: \"Kotlin\",\n        aliases: [\n            \"kt\",\n            \"kts\"\n        ],\n        keywords: KEYWORDS,\n        contains: [\n            hljs.COMMENT(\"/\\\\*\\\\*\", \"\\\\*/\", {\n                relevance: 0,\n                contains: [\n                    {\n                        className: \"doctag\",\n                        begin: \"@[A-Za-z]+\"\n                    }\n                ]\n            }),\n            hljs.C_LINE_COMMENT_MODE,\n            KOTLIN_NESTED_COMMENT,\n            KEYWORDS_WITH_LABEL,\n            LABEL,\n            ANNOTATION_USE_SITE,\n            ANNOTATION,\n            {\n                className: \"function\",\n                beginKeywords: \"fun\",\n                end: \"[(]|$\",\n                returnBegin: true,\n                excludeEnd: true,\n                keywords: KEYWORDS,\n                relevance: 5,\n                contains: [\n                    {\n                        begin: hljs.UNDERSCORE_IDENT_RE + \"\\\\s*\\\\(\",\n                        returnBegin: true,\n                        relevance: 0,\n                        contains: [\n                            hljs.UNDERSCORE_TITLE_MODE\n                        ]\n                    },\n                    {\n                        className: \"type\",\n                        begin: /</,\n                        end: />/,\n                        keywords: \"reified\",\n                        relevance: 0\n                    },\n                    {\n                        className: \"params\",\n                        begin: /\\(/,\n                        end: /\\)/,\n                        endsParent: true,\n                        keywords: KEYWORDS,\n                        relevance: 0,\n                        contains: [\n                            {\n                                begin: /:/,\n                                end: /[=,\\/]/,\n                                endsWithParent: true,\n                                contains: [\n                                    KOTLIN_PAREN_TYPE,\n                                    hljs.C_LINE_COMMENT_MODE,\n                                    KOTLIN_NESTED_COMMENT\n                                ],\n                                relevance: 0\n                            },\n                            hljs.C_LINE_COMMENT_MODE,\n                            KOTLIN_NESTED_COMMENT,\n                            ANNOTATION_USE_SITE,\n                            ANNOTATION,\n                            STRING,\n                            hljs.C_NUMBER_MODE\n                        ]\n                    },\n                    KOTLIN_NESTED_COMMENT\n                ]\n            },\n            {\n                begin: [\n                    /class|interface|trait/,\n                    /\\s+/,\n                    hljs.UNDERSCORE_IDENT_RE\n                ],\n                beginScope: {\n                    3: \"title.class\"\n                },\n                keywords: \"class interface trait\",\n                end: /[:\\{(]|$/,\n                excludeEnd: true,\n                illegal: \"extends implements\",\n                contains: [\n                    {\n                        beginKeywords: \"public protected internal private constructor\"\n                    },\n                    hljs.UNDERSCORE_TITLE_MODE,\n                    {\n                        className: \"type\",\n                        begin: /</,\n                        end: />/,\n                        excludeBegin: true,\n                        excludeEnd: true,\n                        relevance: 0\n                    },\n                    {\n                        className: \"type\",\n                        begin: /[,:]\\s*/,\n                        end: /[<\\(,){\\s]|$/,\n                        excludeBegin: true,\n                        returnEnd: true\n                    },\n                    ANNOTATION_USE_SITE,\n                    ANNOTATION\n                ]\n            },\n            STRING,\n            {\n                className: \"meta\",\n                begin: \"^#!/usr/bin/env\",\n                end: \"$\",\n                illegal: \"\\n\"\n            },\n            KOTLIN_NUMBER_MODE\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/kotlin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/less.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/less.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ less)\n/* harmony export */ });\nconst MODES = (hljs)=>{\n    return {\n        IMPORTANT: {\n            scope: \"meta\",\n            begin: \"!important\"\n        },\n        BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,\n        HEXCOLOR: {\n            scope: \"number\",\n            begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\\b/\n        },\n        FUNCTION_DISPATCH: {\n            className: \"built_in\",\n            begin: /[\\w-]+(?=\\()/\n        },\n        ATTRIBUTE_SELECTOR_MODE: {\n            scope: \"selector-attr\",\n            begin: /\\[/,\n            end: /\\]/,\n            illegal: \"$\",\n            contains: [\n                hljs.APOS_STRING_MODE,\n                hljs.QUOTE_STRING_MODE\n            ]\n        },\n        CSS_NUMBER_MODE: {\n            scope: \"number\",\n            begin: hljs.NUMBER_RE + \"(\" + \"%|em|ex|ch|rem\" + \"|vw|vh|vmin|vmax\" + \"|cm|mm|in|pt|pc|px\" + \"|deg|grad|rad|turn\" + \"|s|ms\" + \"|Hz|kHz\" + \"|dpi|dpcm|dppx\" + \")?\",\n            relevance: 0\n        },\n        CSS_VARIABLE: {\n            className: \"attr\",\n            begin: /--[A-Za-z_][A-Za-z0-9_-]*/\n        }\n    };\n};\nconst HTML_TAGS = [\n    \"a\",\n    \"abbr\",\n    \"address\",\n    \"article\",\n    \"aside\",\n    \"audio\",\n    \"b\",\n    \"blockquote\",\n    \"body\",\n    \"button\",\n    \"canvas\",\n    \"caption\",\n    \"cite\",\n    \"code\",\n    \"dd\",\n    \"del\",\n    \"details\",\n    \"dfn\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"em\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"header\",\n    \"hgroup\",\n    \"html\",\n    \"i\",\n    \"iframe\",\n    \"img\",\n    \"input\",\n    \"ins\",\n    \"kbd\",\n    \"label\",\n    \"legend\",\n    \"li\",\n    \"main\",\n    \"mark\",\n    \"menu\",\n    \"nav\",\n    \"object\",\n    \"ol\",\n    \"optgroup\",\n    \"option\",\n    \"p\",\n    \"picture\",\n    \"q\",\n    \"quote\",\n    \"samp\",\n    \"section\",\n    \"select\",\n    \"source\",\n    \"span\",\n    \"strong\",\n    \"summary\",\n    \"sup\",\n    \"table\",\n    \"tbody\",\n    \"td\",\n    \"textarea\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"time\",\n    \"tr\",\n    \"ul\",\n    \"var\",\n    \"video\"\n];\nconst SVG_TAGS = [\n    \"defs\",\n    \"g\",\n    \"marker\",\n    \"mask\",\n    \"pattern\",\n    \"svg\",\n    \"switch\",\n    \"symbol\",\n    \"feBlend\",\n    \"feColorMatrix\",\n    \"feComponentTransfer\",\n    \"feComposite\",\n    \"feConvolveMatrix\",\n    \"feDiffuseLighting\",\n    \"feDisplacementMap\",\n    \"feFlood\",\n    \"feGaussianBlur\",\n    \"feImage\",\n    \"feMerge\",\n    \"feMorphology\",\n    \"feOffset\",\n    \"feSpecularLighting\",\n    \"feTile\",\n    \"feTurbulence\",\n    \"linearGradient\",\n    \"radialGradient\",\n    \"stop\",\n    \"circle\",\n    \"ellipse\",\n    \"image\",\n    \"line\",\n    \"path\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"text\",\n    \"use\",\n    \"textPath\",\n    \"tspan\",\n    \"foreignObject\",\n    \"clipPath\"\n];\nconst TAGS = [\n    ...HTML_TAGS,\n    ...SVG_TAGS\n];\n// Sorting, then reversing makes sure longer attributes/elements like\n// `font-weight` are matched fully instead of getting false positives on say `font`\nconst MEDIA_FEATURES = [\n    \"any-hover\",\n    \"any-pointer\",\n    \"aspect-ratio\",\n    \"color\",\n    \"color-gamut\",\n    \"color-index\",\n    \"device-aspect-ratio\",\n    \"device-height\",\n    \"device-width\",\n    \"display-mode\",\n    \"forced-colors\",\n    \"grid\",\n    \"height\",\n    \"hover\",\n    \"inverted-colors\",\n    \"monochrome\",\n    \"orientation\",\n    \"overflow-block\",\n    \"overflow-inline\",\n    \"pointer\",\n    \"prefers-color-scheme\",\n    \"prefers-contrast\",\n    \"prefers-reduced-motion\",\n    \"prefers-reduced-transparency\",\n    \"resolution\",\n    \"scan\",\n    \"scripting\",\n    \"update\",\n    \"width\",\n    // TODO: find a better solution?\n    \"min-width\",\n    \"max-width\",\n    \"min-height\",\n    \"max-height\"\n].sort().reverse();\n// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\nconst PSEUDO_CLASSES = [\n    \"active\",\n    \"any-link\",\n    \"blank\",\n    \"checked\",\n    \"current\",\n    \"default\",\n    \"defined\",\n    \"dir\",\n    \"disabled\",\n    \"drop\",\n    \"empty\",\n    \"enabled\",\n    \"first\",\n    \"first-child\",\n    \"first-of-type\",\n    \"fullscreen\",\n    \"future\",\n    \"focus\",\n    \"focus-visible\",\n    \"focus-within\",\n    \"has\",\n    \"host\",\n    \"host-context\",\n    \"hover\",\n    \"indeterminate\",\n    \"in-range\",\n    \"invalid\",\n    \"is\",\n    \"lang\",\n    \"last-child\",\n    \"last-of-type\",\n    \"left\",\n    \"link\",\n    \"local-link\",\n    \"not\",\n    \"nth-child\",\n    \"nth-col\",\n    \"nth-last-child\",\n    \"nth-last-col\",\n    \"nth-last-of-type\",\n    \"nth-of-type\",\n    \"only-child\",\n    \"only-of-type\",\n    \"optional\",\n    \"out-of-range\",\n    \"past\",\n    \"placeholder-shown\",\n    \"read-only\",\n    \"read-write\",\n    \"required\",\n    \"right\",\n    \"root\",\n    \"scope\",\n    \"target\",\n    \"target-within\",\n    \"user-invalid\",\n    \"valid\",\n    \"visited\",\n    \"where\" // where()\n].sort().reverse();\n// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements\nconst PSEUDO_ELEMENTS = [\n    \"after\",\n    \"backdrop\",\n    \"before\",\n    \"cue\",\n    \"cue-region\",\n    \"first-letter\",\n    \"first-line\",\n    \"grammar-error\",\n    \"marker\",\n    \"part\",\n    \"placeholder\",\n    \"selection\",\n    \"slotted\",\n    \"spelling-error\"\n].sort().reverse();\nconst ATTRIBUTES = [\n    \"accent-color\",\n    \"align-content\",\n    \"align-items\",\n    \"align-self\",\n    \"alignment-baseline\",\n    \"all\",\n    \"anchor-name\",\n    \"animation\",\n    \"animation-composition\",\n    \"animation-delay\",\n    \"animation-direction\",\n    \"animation-duration\",\n    \"animation-fill-mode\",\n    \"animation-iteration-count\",\n    \"animation-name\",\n    \"animation-play-state\",\n    \"animation-range\",\n    \"animation-range-end\",\n    \"animation-range-start\",\n    \"animation-timeline\",\n    \"animation-timing-function\",\n    \"appearance\",\n    \"aspect-ratio\",\n    \"backdrop-filter\",\n    \"backface-visibility\",\n    \"background\",\n    \"background-attachment\",\n    \"background-blend-mode\",\n    \"background-clip\",\n    \"background-color\",\n    \"background-image\",\n    \"background-origin\",\n    \"background-position\",\n    \"background-position-x\",\n    \"background-position-y\",\n    \"background-repeat\",\n    \"background-size\",\n    \"baseline-shift\",\n    \"block-size\",\n    \"border\",\n    \"border-block\",\n    \"border-block-color\",\n    \"border-block-end\",\n    \"border-block-end-color\",\n    \"border-block-end-style\",\n    \"border-block-end-width\",\n    \"border-block-start\",\n    \"border-block-start-color\",\n    \"border-block-start-style\",\n    \"border-block-start-width\",\n    \"border-block-style\",\n    \"border-block-width\",\n    \"border-bottom\",\n    \"border-bottom-color\",\n    \"border-bottom-left-radius\",\n    \"border-bottom-right-radius\",\n    \"border-bottom-style\",\n    \"border-bottom-width\",\n    \"border-collapse\",\n    \"border-color\",\n    \"border-end-end-radius\",\n    \"border-end-start-radius\",\n    \"border-image\",\n    \"border-image-outset\",\n    \"border-image-repeat\",\n    \"border-image-slice\",\n    \"border-image-source\",\n    \"border-image-width\",\n    \"border-inline\",\n    \"border-inline-color\",\n    \"border-inline-end\",\n    \"border-inline-end-color\",\n    \"border-inline-end-style\",\n    \"border-inline-end-width\",\n    \"border-inline-start\",\n    \"border-inline-start-color\",\n    \"border-inline-start-style\",\n    \"border-inline-start-width\",\n    \"border-inline-style\",\n    \"border-inline-width\",\n    \"border-left\",\n    \"border-left-color\",\n    \"border-left-style\",\n    \"border-left-width\",\n    \"border-radius\",\n    \"border-right\",\n    \"border-right-color\",\n    \"border-right-style\",\n    \"border-right-width\",\n    \"border-spacing\",\n    \"border-start-end-radius\",\n    \"border-start-start-radius\",\n    \"border-style\",\n    \"border-top\",\n    \"border-top-color\",\n    \"border-top-left-radius\",\n    \"border-top-right-radius\",\n    \"border-top-style\",\n    \"border-top-width\",\n    \"border-width\",\n    \"bottom\",\n    \"box-align\",\n    \"box-decoration-break\",\n    \"box-direction\",\n    \"box-flex\",\n    \"box-flex-group\",\n    \"box-lines\",\n    \"box-ordinal-group\",\n    \"box-orient\",\n    \"box-pack\",\n    \"box-shadow\",\n    \"box-sizing\",\n    \"break-after\",\n    \"break-before\",\n    \"break-inside\",\n    \"caption-side\",\n    \"caret-color\",\n    \"clear\",\n    \"clip\",\n    \"clip-path\",\n    \"clip-rule\",\n    \"color\",\n    \"color-interpolation\",\n    \"color-interpolation-filters\",\n    \"color-profile\",\n    \"color-rendering\",\n    \"color-scheme\",\n    \"column-count\",\n    \"column-fill\",\n    \"column-gap\",\n    \"column-rule\",\n    \"column-rule-color\",\n    \"column-rule-style\",\n    \"column-rule-width\",\n    \"column-span\",\n    \"column-width\",\n    \"columns\",\n    \"contain\",\n    \"contain-intrinsic-block-size\",\n    \"contain-intrinsic-height\",\n    \"contain-intrinsic-inline-size\",\n    \"contain-intrinsic-size\",\n    \"contain-intrinsic-width\",\n    \"container\",\n    \"container-name\",\n    \"container-type\",\n    \"content\",\n    \"content-visibility\",\n    \"counter-increment\",\n    \"counter-reset\",\n    \"counter-set\",\n    \"cue\",\n    \"cue-after\",\n    \"cue-before\",\n    \"cursor\",\n    \"cx\",\n    \"cy\",\n    \"direction\",\n    \"display\",\n    \"dominant-baseline\",\n    \"empty-cells\",\n    \"enable-background\",\n    \"field-sizing\",\n    \"fill\",\n    \"fill-opacity\",\n    \"fill-rule\",\n    \"filter\",\n    \"flex\",\n    \"flex-basis\",\n    \"flex-direction\",\n    \"flex-flow\",\n    \"flex-grow\",\n    \"flex-shrink\",\n    \"flex-wrap\",\n    \"float\",\n    \"flood-color\",\n    \"flood-opacity\",\n    \"flow\",\n    \"font\",\n    \"font-display\",\n    \"font-family\",\n    \"font-feature-settings\",\n    \"font-kerning\",\n    \"font-language-override\",\n    \"font-optical-sizing\",\n    \"font-palette\",\n    \"font-size\",\n    \"font-size-adjust\",\n    \"font-smooth\",\n    \"font-smoothing\",\n    \"font-stretch\",\n    \"font-style\",\n    \"font-synthesis\",\n    \"font-synthesis-position\",\n    \"font-synthesis-small-caps\",\n    \"font-synthesis-style\",\n    \"font-synthesis-weight\",\n    \"font-variant\",\n    \"font-variant-alternates\",\n    \"font-variant-caps\",\n    \"font-variant-east-asian\",\n    \"font-variant-emoji\",\n    \"font-variant-ligatures\",\n    \"font-variant-numeric\",\n    \"font-variant-position\",\n    \"font-variation-settings\",\n    \"font-weight\",\n    \"forced-color-adjust\",\n    \"gap\",\n    \"glyph-orientation-horizontal\",\n    \"glyph-orientation-vertical\",\n    \"grid\",\n    \"grid-area\",\n    \"grid-auto-columns\",\n    \"grid-auto-flow\",\n    \"grid-auto-rows\",\n    \"grid-column\",\n    \"grid-column-end\",\n    \"grid-column-start\",\n    \"grid-gap\",\n    \"grid-row\",\n    \"grid-row-end\",\n    \"grid-row-start\",\n    \"grid-template\",\n    \"grid-template-areas\",\n    \"grid-template-columns\",\n    \"grid-template-rows\",\n    \"hanging-punctuation\",\n    \"height\",\n    \"hyphenate-character\",\n    \"hyphenate-limit-chars\",\n    \"hyphens\",\n    \"icon\",\n    \"image-orientation\",\n    \"image-rendering\",\n    \"image-resolution\",\n    \"ime-mode\",\n    \"initial-letter\",\n    \"initial-letter-align\",\n    \"inline-size\",\n    \"inset\",\n    \"inset-area\",\n    \"inset-block\",\n    \"inset-block-end\",\n    \"inset-block-start\",\n    \"inset-inline\",\n    \"inset-inline-end\",\n    \"inset-inline-start\",\n    \"isolation\",\n    \"justify-content\",\n    \"justify-items\",\n    \"justify-self\",\n    \"kerning\",\n    \"left\",\n    \"letter-spacing\",\n    \"lighting-color\",\n    \"line-break\",\n    \"line-height\",\n    \"line-height-step\",\n    \"list-style\",\n    \"list-style-image\",\n    \"list-style-position\",\n    \"list-style-type\",\n    \"margin\",\n    \"margin-block\",\n    \"margin-block-end\",\n    \"margin-block-start\",\n    \"margin-bottom\",\n    \"margin-inline\",\n    \"margin-inline-end\",\n    \"margin-inline-start\",\n    \"margin-left\",\n    \"margin-right\",\n    \"margin-top\",\n    \"margin-trim\",\n    \"marker\",\n    \"marker-end\",\n    \"marker-mid\",\n    \"marker-start\",\n    \"marks\",\n    \"mask\",\n    \"mask-border\",\n    \"mask-border-mode\",\n    \"mask-border-outset\",\n    \"mask-border-repeat\",\n    \"mask-border-slice\",\n    \"mask-border-source\",\n    \"mask-border-width\",\n    \"mask-clip\",\n    \"mask-composite\",\n    \"mask-image\",\n    \"mask-mode\",\n    \"mask-origin\",\n    \"mask-position\",\n    \"mask-repeat\",\n    \"mask-size\",\n    \"mask-type\",\n    \"masonry-auto-flow\",\n    \"math-depth\",\n    \"math-shift\",\n    \"math-style\",\n    \"max-block-size\",\n    \"max-height\",\n    \"max-inline-size\",\n    \"max-width\",\n    \"min-block-size\",\n    \"min-height\",\n    \"min-inline-size\",\n    \"min-width\",\n    \"mix-blend-mode\",\n    \"nav-down\",\n    \"nav-index\",\n    \"nav-left\",\n    \"nav-right\",\n    \"nav-up\",\n    \"none\",\n    \"normal\",\n    \"object-fit\",\n    \"object-position\",\n    \"offset\",\n    \"offset-anchor\",\n    \"offset-distance\",\n    \"offset-path\",\n    \"offset-position\",\n    \"offset-rotate\",\n    \"opacity\",\n    \"order\",\n    \"orphans\",\n    \"outline\",\n    \"outline-color\",\n    \"outline-offset\",\n    \"outline-style\",\n    \"outline-width\",\n    \"overflow\",\n    \"overflow-anchor\",\n    \"overflow-block\",\n    \"overflow-clip-margin\",\n    \"overflow-inline\",\n    \"overflow-wrap\",\n    \"overflow-x\",\n    \"overflow-y\",\n    \"overlay\",\n    \"overscroll-behavior\",\n    \"overscroll-behavior-block\",\n    \"overscroll-behavior-inline\",\n    \"overscroll-behavior-x\",\n    \"overscroll-behavior-y\",\n    \"padding\",\n    \"padding-block\",\n    \"padding-block-end\",\n    \"padding-block-start\",\n    \"padding-bottom\",\n    \"padding-inline\",\n    \"padding-inline-end\",\n    \"padding-inline-start\",\n    \"padding-left\",\n    \"padding-right\",\n    \"padding-top\",\n    \"page\",\n    \"page-break-after\",\n    \"page-break-before\",\n    \"page-break-inside\",\n    \"paint-order\",\n    \"pause\",\n    \"pause-after\",\n    \"pause-before\",\n    \"perspective\",\n    \"perspective-origin\",\n    \"place-content\",\n    \"place-items\",\n    \"place-self\",\n    \"pointer-events\",\n    \"position\",\n    \"position-anchor\",\n    \"position-visibility\",\n    \"print-color-adjust\",\n    \"quotes\",\n    \"r\",\n    \"resize\",\n    \"rest\",\n    \"rest-after\",\n    \"rest-before\",\n    \"right\",\n    \"rotate\",\n    \"row-gap\",\n    \"ruby-align\",\n    \"ruby-position\",\n    \"scale\",\n    \"scroll-behavior\",\n    \"scroll-margin\",\n    \"scroll-margin-block\",\n    \"scroll-margin-block-end\",\n    \"scroll-margin-block-start\",\n    \"scroll-margin-bottom\",\n    \"scroll-margin-inline\",\n    \"scroll-margin-inline-end\",\n    \"scroll-margin-inline-start\",\n    \"scroll-margin-left\",\n    \"scroll-margin-right\",\n    \"scroll-margin-top\",\n    \"scroll-padding\",\n    \"scroll-padding-block\",\n    \"scroll-padding-block-end\",\n    \"scroll-padding-block-start\",\n    \"scroll-padding-bottom\",\n    \"scroll-padding-inline\",\n    \"scroll-padding-inline-end\",\n    \"scroll-padding-inline-start\",\n    \"scroll-padding-left\",\n    \"scroll-padding-right\",\n    \"scroll-padding-top\",\n    \"scroll-snap-align\",\n    \"scroll-snap-stop\",\n    \"scroll-snap-type\",\n    \"scroll-timeline\",\n    \"scroll-timeline-axis\",\n    \"scroll-timeline-name\",\n    \"scrollbar-color\",\n    \"scrollbar-gutter\",\n    \"scrollbar-width\",\n    \"shape-image-threshold\",\n    \"shape-margin\",\n    \"shape-outside\",\n    \"shape-rendering\",\n    \"speak\",\n    \"speak-as\",\n    \"src\",\n    \"stop-color\",\n    \"stop-opacity\",\n    \"stroke\",\n    \"stroke-dasharray\",\n    \"stroke-dashoffset\",\n    \"stroke-linecap\",\n    \"stroke-linejoin\",\n    \"stroke-miterlimit\",\n    \"stroke-opacity\",\n    \"stroke-width\",\n    \"tab-size\",\n    \"table-layout\",\n    \"text-align\",\n    \"text-align-all\",\n    \"text-align-last\",\n    \"text-anchor\",\n    \"text-combine-upright\",\n    \"text-decoration\",\n    \"text-decoration-color\",\n    \"text-decoration-line\",\n    \"text-decoration-skip\",\n    \"text-decoration-skip-ink\",\n    \"text-decoration-style\",\n    \"text-decoration-thickness\",\n    \"text-emphasis\",\n    \"text-emphasis-color\",\n    \"text-emphasis-position\",\n    \"text-emphasis-style\",\n    \"text-indent\",\n    \"text-justify\",\n    \"text-orientation\",\n    \"text-overflow\",\n    \"text-rendering\",\n    \"text-shadow\",\n    \"text-size-adjust\",\n    \"text-transform\",\n    \"text-underline-offset\",\n    \"text-underline-position\",\n    \"text-wrap\",\n    \"text-wrap-mode\",\n    \"text-wrap-style\",\n    \"timeline-scope\",\n    \"top\",\n    \"touch-action\",\n    \"transform\",\n    \"transform-box\",\n    \"transform-origin\",\n    \"transform-style\",\n    \"transition\",\n    \"transition-behavior\",\n    \"transition-delay\",\n    \"transition-duration\",\n    \"transition-property\",\n    \"transition-timing-function\",\n    \"translate\",\n    \"unicode-bidi\",\n    \"user-modify\",\n    \"user-select\",\n    \"vector-effect\",\n    \"vertical-align\",\n    \"view-timeline\",\n    \"view-timeline-axis\",\n    \"view-timeline-inset\",\n    \"view-timeline-name\",\n    \"view-transition-name\",\n    \"visibility\",\n    \"voice-balance\",\n    \"voice-duration\",\n    \"voice-family\",\n    \"voice-pitch\",\n    \"voice-range\",\n    \"voice-rate\",\n    \"voice-stress\",\n    \"voice-volume\",\n    \"white-space\",\n    \"white-space-collapse\",\n    \"widows\",\n    \"width\",\n    \"will-change\",\n    \"word-break\",\n    \"word-spacing\",\n    \"word-wrap\",\n    \"writing-mode\",\n    \"x\",\n    \"y\",\n    \"z-index\",\n    \"zoom\"\n].sort().reverse();\n// some grammars use them all as a single group\nconst PSEUDO_SELECTORS = PSEUDO_CLASSES.concat(PSEUDO_ELEMENTS).sort().reverse();\n/*\nLanguage: Less\nDescription: It's CSS, with just a little more.\nAuthor:   Max Mikhailov <seven.phases.max@gmail.com>\nWebsite: http://lesscss.org\nCategory: common, css, web\n*/ /** @type LanguageFn */ function less(hljs) {\n    const modes = MODES(hljs);\n    const PSEUDO_SELECTORS$1 = PSEUDO_SELECTORS;\n    const AT_MODIFIERS = \"and or not only\";\n    const IDENT_RE = \"[\\\\w-]+\"; // yes, Less identifiers may begin with a digit\n    const INTERP_IDENT_RE = \"(\" + IDENT_RE + \"|@\\\\{\" + IDENT_RE + \"\\\\})\";\n    /* Generic Modes */ const RULES = [];\n    const VALUE_MODES = []; // forward def. for recursive modes\n    const STRING_MODE = function(c) {\n        return {\n            // Less strings are not multiline (also include '~' for more consistent coloring of \"escaped\" strings)\n            className: \"string\",\n            begin: \"~?\" + c + \".*?\" + c\n        };\n    };\n    const IDENT_MODE = function(name, begin, relevance) {\n        return {\n            className: name,\n            begin: begin,\n            relevance: relevance\n        };\n    };\n    const AT_KEYWORDS = {\n        $pattern: /[a-z-]+/,\n        keyword: AT_MODIFIERS,\n        attribute: MEDIA_FEATURES.join(\" \")\n    };\n    const PARENS_MODE = {\n        // used only to properly balance nested parens inside mixin call, def. arg list\n        begin: \"\\\\(\",\n        end: \"\\\\)\",\n        contains: VALUE_MODES,\n        keywords: AT_KEYWORDS,\n        relevance: 0\n    };\n    // generic Less highlighter (used almost everywhere except selectors):\n    VALUE_MODES.push(hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRING_MODE(\"'\"), STRING_MODE('\"'), modes.CSS_NUMBER_MODE, {\n        begin: \"(url|data-uri)\\\\(\",\n        starts: {\n            className: \"string\",\n            end: \"[\\\\)\\\\n]\",\n            excludeEnd: true\n        }\n    }, modes.HEXCOLOR, PARENS_MODE, IDENT_MODE(\"variable\", \"@@?\" + IDENT_RE, 10), IDENT_MODE(\"variable\", \"@\\\\{\" + IDENT_RE + \"\\\\}\"), IDENT_MODE(\"built_in\", \"~?`[^`]*?`\"), {\n        className: \"attribute\",\n        begin: IDENT_RE + \"\\\\s*:\",\n        end: \":\",\n        returnBegin: true,\n        excludeEnd: true\n    }, modes.IMPORTANT, {\n        beginKeywords: \"and not\"\n    }, modes.FUNCTION_DISPATCH);\n    const VALUE_WITH_RULESETS = VALUE_MODES.concat({\n        begin: /\\{/,\n        end: /\\}/,\n        contains: RULES\n    });\n    const MIXIN_GUARD_MODE = {\n        beginKeywords: \"when\",\n        endsWithParent: true,\n        contains: [\n            {\n                beginKeywords: \"and not\"\n            }\n        ].concat(VALUE_MODES) // using this form to override VALUE’s 'function' match\n    };\n    /* Rule-Level Modes */ const RULE_MODE = {\n        begin: INTERP_IDENT_RE + \"\\\\s*:\",\n        returnBegin: true,\n        end: /[;}]/,\n        relevance: 0,\n        contains: [\n            {\n                begin: /-(webkit|moz|ms|o)-/\n            },\n            modes.CSS_VARIABLE,\n            {\n                className: \"attribute\",\n                begin: \"\\\\b(\" + ATTRIBUTES.join(\"|\") + \")\\\\b\",\n                end: /(?=:)/,\n                starts: {\n                    endsWithParent: true,\n                    illegal: \"[<=$]\",\n                    relevance: 0,\n                    contains: VALUE_MODES\n                }\n            }\n        ]\n    };\n    const AT_RULE_MODE = {\n        className: \"keyword\",\n        begin: \"@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\\\b\",\n        starts: {\n            end: \"[;{}]\",\n            keywords: AT_KEYWORDS,\n            returnEnd: true,\n            contains: VALUE_MODES,\n            relevance: 0\n        }\n    };\n    // variable definitions and calls\n    const VAR_RULE_MODE = {\n        className: \"variable\",\n        variants: [\n            // using more strict pattern for higher relevance to increase chances of Less detection.\n            // this is *the only* Less specific statement used in most of the sources, so...\n            // (we’ll still often loose to the css-parser unless there's '//' comment,\n            // simply because 1 variable just can't beat 99 properties :)\n            {\n                begin: \"@\" + IDENT_RE + \"\\\\s*:\",\n                relevance: 15\n            },\n            {\n                begin: \"@\" + IDENT_RE\n            }\n        ],\n        starts: {\n            end: \"[;}]\",\n            returnEnd: true,\n            contains: VALUE_WITH_RULESETS\n        }\n    };\n    const SELECTOR_MODE = {\n        // first parse unambiguous selectors (i.e. those not starting with tag)\n        // then fall into the scary lookahead-discriminator variant.\n        // this mode also handles mixin definitions and calls\n        variants: [\n            {\n                begin: \"[\\\\.#:&\\\\[>]\",\n                end: \"[;{}]\" // mixin calls end with ';'\n            },\n            {\n                begin: INTERP_IDENT_RE,\n                end: /\\{/\n            }\n        ],\n        returnBegin: true,\n        returnEnd: true,\n        illegal: \"[<='$\\\"]\",\n        relevance: 0,\n        contains: [\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            MIXIN_GUARD_MODE,\n            IDENT_MODE(\"keyword\", \"all\\\\b\"),\n            IDENT_MODE(\"variable\", \"@\\\\{\" + IDENT_RE + \"\\\\}\"),\n            {\n                begin: \"\\\\b(\" + TAGS.join(\"|\") + \")\\\\b\",\n                className: \"selector-tag\"\n            },\n            modes.CSS_NUMBER_MODE,\n            IDENT_MODE(\"selector-tag\", INTERP_IDENT_RE, 0),\n            IDENT_MODE(\"selector-id\", \"#\" + INTERP_IDENT_RE),\n            IDENT_MODE(\"selector-class\", \"\\\\.\" + INTERP_IDENT_RE, 0),\n            IDENT_MODE(\"selector-tag\", \"&\", 0),\n            modes.ATTRIBUTE_SELECTOR_MODE,\n            {\n                className: \"selector-pseudo\",\n                begin: \":(\" + PSEUDO_CLASSES.join(\"|\") + \")\"\n            },\n            {\n                className: \"selector-pseudo\",\n                begin: \":(:)?(\" + PSEUDO_ELEMENTS.join(\"|\") + \")\"\n            },\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                relevance: 0,\n                contains: VALUE_WITH_RULESETS\n            },\n            {\n                begin: \"!important\"\n            },\n            modes.FUNCTION_DISPATCH\n        ]\n    };\n    const PSEUDO_SELECTOR_MODE = {\n        begin: IDENT_RE + \":(:)?\" + `(${PSEUDO_SELECTORS$1.join(\"|\")})`,\n        returnBegin: true,\n        contains: [\n            SELECTOR_MODE\n        ]\n    };\n    RULES.push(hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, AT_RULE_MODE, VAR_RULE_MODE, PSEUDO_SELECTOR_MODE, RULE_MODE, SELECTOR_MODE, MIXIN_GUARD_MODE, modes.FUNCTION_DISPATCH);\n    return {\n        name: \"Less\",\n        case_insensitive: true,\n        illegal: \"[=>'/<($\\\"]\",\n        contains: RULES\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/less.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/lua.js":
/*!*******************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/lua.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ lua)\n/* harmony export */ });\n/*\nLanguage: Lua\nDescription: Lua is a powerful, efficient, lightweight, embeddable scripting language.\nAuthor: Andrew Fedorov <dmmdrs@mail.ru>\nCategory: common, gaming, scripting\nWebsite: https://www.lua.org\n*/ function lua(hljs) {\n    const OPENING_LONG_BRACKET = \"\\\\[=*\\\\[\";\n    const CLOSING_LONG_BRACKET = \"\\\\]=*\\\\]\";\n    const LONG_BRACKETS = {\n        begin: OPENING_LONG_BRACKET,\n        end: CLOSING_LONG_BRACKET,\n        contains: [\n            \"self\"\n        ]\n    };\n    const COMMENTS = [\n        hljs.COMMENT(\"--(?!\" + OPENING_LONG_BRACKET + \")\", \"$\"),\n        hljs.COMMENT(\"--\" + OPENING_LONG_BRACKET, CLOSING_LONG_BRACKET, {\n            contains: [\n                LONG_BRACKETS\n            ],\n            relevance: 10\n        })\n    ];\n    return {\n        name: \"Lua\",\n        aliases: [\n            \"pluto\"\n        ],\n        keywords: {\n            $pattern: hljs.UNDERSCORE_IDENT_RE,\n            literal: \"true false nil\",\n            keyword: \"and break do else elseif end for goto if in local not or repeat return then until while\",\n            built_in: // Metatags and globals:\n            \"_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len \" + \"__gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert \" + \"collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring \" + \"module next pairs pcall print rawequal rawget rawset require select setfenv \" + \"setmetatable tonumber tostring type unpack xpcall arg self \" + \"coroutine resume yield status wrap create running debug getupvalue \" + \"debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv \" + \"io lines write close flush open output type read stderr stdin input stdout popen tmpfile \" + \"math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan \" + \"os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall \" + \"string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower \" + \"table setn insert getn foreachi maxn foreach concat sort remove\"\n        },\n        contains: COMMENTS.concat([\n            {\n                className: \"function\",\n                beginKeywords: \"function\",\n                end: \"\\\\)\",\n                contains: [\n                    hljs.inherit(hljs.TITLE_MODE, {\n                        begin: \"([_a-zA-Z]\\\\w*\\\\.)*([_a-zA-Z]\\\\w*:)?[_a-zA-Z]\\\\w*\"\n                    }),\n                    {\n                        className: \"params\",\n                        begin: \"\\\\(\",\n                        endsWithParent: true,\n                        contains: COMMENTS\n                    }\n                ].concat(COMMENTS)\n            },\n            hljs.C_NUMBER_MODE,\n            hljs.APOS_STRING_MODE,\n            hljs.QUOTE_STRING_MODE,\n            {\n                className: \"string\",\n                begin: OPENING_LONG_BRACKET,\n                end: CLOSING_LONG_BRACKET,\n                contains: [\n                    LONG_BRACKETS\n                ],\n                relevance: 5\n            }\n        ])\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9sdWEuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7QUFNQSxHQUVBLFNBQVNBLElBQUlDLElBQUk7SUFDZixNQUFNQyx1QkFBdUI7SUFDN0IsTUFBTUMsdUJBQXVCO0lBQzdCLE1BQU1DLGdCQUFnQjtRQUNwQkMsT0FBT0g7UUFDUEksS0FBS0g7UUFDTEksVUFBVTtZQUFFO1NBQVE7SUFDdEI7SUFDQSxNQUFNQyxXQUFXO1FBQ2ZQLEtBQUtRLE9BQU8sQ0FBQyxVQUFVUCx1QkFBdUIsS0FBSztRQUNuREQsS0FBS1EsT0FBTyxDQUNWLE9BQU9QLHNCQUNQQyxzQkFDQTtZQUNFSSxVQUFVO2dCQUFFSDthQUFlO1lBQzNCTSxXQUFXO1FBQ2I7S0FFSDtJQUNELE9BQU87UUFDTEMsTUFBTTtRQUNOQyxTQUFTO1lBQUM7U0FBUTtRQUNsQkMsVUFBVTtZQUNSQyxVQUFVYixLQUFLYyxtQkFBbUI7WUFDbENDLFNBQVM7WUFDVEMsU0FBUztZQUNUQyxVQUNFLHdCQUF3QjtZQUN4QixvRkFDRSxtRkFFQSxzRkFDQSxpRkFDQSxnRUFFQSx3RUFDQSxnSUFDQSw4RkFDQSxvS0FDQSxxSkFDQSwrRkFDQTtRQUNOO1FBQ0FYLFVBQVVDLFNBQVNXLE1BQU0sQ0FBQztZQUN4QjtnQkFDRUMsV0FBVztnQkFDWEMsZUFBZTtnQkFDZmYsS0FBSztnQkFDTEMsVUFBVTtvQkFDUk4sS0FBS3FCLE9BQU8sQ0FBQ3JCLEtBQUtzQixVQUFVLEVBQUU7d0JBQUVsQixPQUFPO29CQUFvRDtvQkFDM0Y7d0JBQ0VlLFdBQVc7d0JBQ1hmLE9BQU87d0JBQ1BtQixnQkFBZ0I7d0JBQ2hCakIsVUFBVUM7b0JBQ1o7aUJBQ0QsQ0FBQ1csTUFBTSxDQUFDWDtZQUNYO1lBQ0FQLEtBQUt3QixhQUFhO1lBQ2xCeEIsS0FBS3lCLGdCQUFnQjtZQUNyQnpCLEtBQUswQixpQkFBaUI7WUFDdEI7Z0JBQ0VQLFdBQVc7Z0JBQ1hmLE9BQU9IO2dCQUNQSSxLQUFLSDtnQkFDTEksVUFBVTtvQkFBRUg7aUJBQWU7Z0JBQzNCTSxXQUFXO1lBQ2I7U0FDRDtJQUNIO0FBQ0Y7QUFFMEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYXJkd2FyZS1kb2MtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9oaWdobGlnaHQuanMvZXMvbGFuZ3VhZ2VzL2x1YS5qcz9jZThiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5MYW5ndWFnZTogTHVhXG5EZXNjcmlwdGlvbjogTHVhIGlzIGEgcG93ZXJmdWwsIGVmZmljaWVudCwgbGlnaHR3ZWlnaHQsIGVtYmVkZGFibGUgc2NyaXB0aW5nIGxhbmd1YWdlLlxuQXV0aG9yOiBBbmRyZXcgRmVkb3JvdiA8ZG1tZHJzQG1haWwucnU+XG5DYXRlZ29yeTogY29tbW9uLCBnYW1pbmcsIHNjcmlwdGluZ1xuV2Vic2l0ZTogaHR0cHM6Ly93d3cubHVhLm9yZ1xuKi9cblxuZnVuY3Rpb24gbHVhKGhsanMpIHtcbiAgY29uc3QgT1BFTklOR19MT05HX0JSQUNLRVQgPSAnXFxcXFs9KlxcXFxbJztcbiAgY29uc3QgQ0xPU0lOR19MT05HX0JSQUNLRVQgPSAnXFxcXF09KlxcXFxdJztcbiAgY29uc3QgTE9OR19CUkFDS0VUUyA9IHtcbiAgICBiZWdpbjogT1BFTklOR19MT05HX0JSQUNLRVQsXG4gICAgZW5kOiBDTE9TSU5HX0xPTkdfQlJBQ0tFVCxcbiAgICBjb250YWluczogWyAnc2VsZicgXVxuICB9O1xuICBjb25zdCBDT01NRU5UUyA9IFtcbiAgICBobGpzLkNPTU1FTlQoJy0tKD8hJyArIE9QRU5JTkdfTE9OR19CUkFDS0VUICsgJyknLCAnJCcpLFxuICAgIGhsanMuQ09NTUVOVChcbiAgICAgICctLScgKyBPUEVOSU5HX0xPTkdfQlJBQ0tFVCxcbiAgICAgIENMT1NJTkdfTE9OR19CUkFDS0VULFxuICAgICAge1xuICAgICAgICBjb250YWluczogWyBMT05HX0JSQUNLRVRTIF0sXG4gICAgICAgIHJlbGV2YW5jZTogMTBcbiAgICAgIH1cbiAgICApXG4gIF07XG4gIHJldHVybiB7XG4gICAgbmFtZTogJ0x1YScsXG4gICAgYWxpYXNlczogWydwbHV0byddLFxuICAgIGtleXdvcmRzOiB7XG4gICAgICAkcGF0dGVybjogaGxqcy5VTkRFUlNDT1JFX0lERU5UX1JFLFxuICAgICAgbGl0ZXJhbDogXCJ0cnVlIGZhbHNlIG5pbFwiLFxuICAgICAga2V5d29yZDogXCJhbmQgYnJlYWsgZG8gZWxzZSBlbHNlaWYgZW5kIGZvciBnb3RvIGlmIGluIGxvY2FsIG5vdCBvciByZXBlYXQgcmV0dXJuIHRoZW4gdW50aWwgd2hpbGVcIixcbiAgICAgIGJ1aWx0X2luOlxuICAgICAgICAvLyBNZXRhdGFncyBhbmQgZ2xvYmFsczpcbiAgICAgICAgJ19HIF9FTlYgX1ZFUlNJT04gX19pbmRleCBfX25ld2luZGV4IF9fbW9kZSBfX2NhbGwgX19tZXRhdGFibGUgX190b3N0cmluZyBfX2xlbiAnXG4gICAgICAgICsgJ19fZ2MgX19hZGQgX19zdWIgX19tdWwgX19kaXYgX19tb2QgX19wb3cgX19jb25jYXQgX191bm0gX19lcSBfX2x0IF9fbGUgYXNzZXJ0ICdcbiAgICAgICAgLy8gU3RhbmRhcmQgbWV0aG9kcyBhbmQgcHJvcGVydGllczpcbiAgICAgICAgKyAnY29sbGVjdGdhcmJhZ2UgZG9maWxlIGVycm9yIGdldGZlbnYgZ2V0bWV0YXRhYmxlIGlwYWlycyBsb2FkIGxvYWRmaWxlIGxvYWRzdHJpbmcgJ1xuICAgICAgICArICdtb2R1bGUgbmV4dCBwYWlycyBwY2FsbCBwcmludCByYXdlcXVhbCByYXdnZXQgcmF3c2V0IHJlcXVpcmUgc2VsZWN0IHNldGZlbnYgJ1xuICAgICAgICArICdzZXRtZXRhdGFibGUgdG9udW1iZXIgdG9zdHJpbmcgdHlwZSB1bnBhY2sgeHBjYWxsIGFyZyBzZWxmICdcbiAgICAgICAgLy8gTGlicmFyeSBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzIChvbmUgbGluZSBwZXIgbGlicmFyeSk6XG4gICAgICAgICsgJ2Nvcm91dGluZSByZXN1bWUgeWllbGQgc3RhdHVzIHdyYXAgY3JlYXRlIHJ1bm5pbmcgZGVidWcgZ2V0dXB2YWx1ZSAnXG4gICAgICAgICsgJ2RlYnVnIHNldGhvb2sgZ2V0bWV0YXRhYmxlIGdldGhvb2sgc2V0bWV0YXRhYmxlIHNldGxvY2FsIHRyYWNlYmFjayBzZXRmZW52IGdldGluZm8gc2V0dXB2YWx1ZSBnZXRsb2NhbCBnZXRyZWdpc3RyeSBnZXRmZW52ICdcbiAgICAgICAgKyAnaW8gbGluZXMgd3JpdGUgY2xvc2UgZmx1c2ggb3BlbiBvdXRwdXQgdHlwZSByZWFkIHN0ZGVyciBzdGRpbiBpbnB1dCBzdGRvdXQgcG9wZW4gdG1wZmlsZSAnXG4gICAgICAgICsgJ21hdGggbG9nIG1heCBhY29zIGh1Z2UgbGRleHAgcGkgY29zIHRhbmggcG93IGRlZyB0YW4gY29zaCBzaW5oIHJhbmRvbSByYW5kb21zZWVkIGZyZXhwIGNlaWwgZmxvb3IgcmFkIGFicyBzcXJ0IG1vZGYgYXNpbiBtaW4gbW9kIGZtb2QgbG9nMTAgYXRhbjIgZXhwIHNpbiBhdGFuICdcbiAgICAgICAgKyAnb3MgZXhpdCBzZXRsb2NhbGUgZGF0ZSBnZXRlbnYgZGlmZnRpbWUgcmVtb3ZlIHRpbWUgY2xvY2sgdG1wbmFtZSByZW5hbWUgZXhlY3V0ZSBwYWNrYWdlIHByZWxvYWQgbG9hZGxpYiBsb2FkZWQgbG9hZGVycyBjcGF0aCBjb25maWcgcGF0aCBzZWVhbGwgJ1xuICAgICAgICArICdzdHJpbmcgc3ViIHVwcGVyIGxlbiBnZmluZCByZXAgZmluZCBtYXRjaCBjaGFyIGR1bXAgZ21hdGNoIHJldmVyc2UgYnl0ZSBmb3JtYXQgZ3N1YiBsb3dlciAnXG4gICAgICAgICsgJ3RhYmxlIHNldG4gaW5zZXJ0IGdldG4gZm9yZWFjaGkgbWF4biBmb3JlYWNoIGNvbmNhdCBzb3J0IHJlbW92ZSdcbiAgICB9LFxuICAgIGNvbnRhaW5zOiBDT01NRU5UUy5jb25jYXQoW1xuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6ICdmdW5jdGlvbicsXG4gICAgICAgIGJlZ2luS2V5d29yZHM6ICdmdW5jdGlvbicsXG4gICAgICAgIGVuZDogJ1xcXFwpJyxcbiAgICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgICBobGpzLmluaGVyaXQoaGxqcy5USVRMRV9NT0RFLCB7IGJlZ2luOiAnKFtfYS16QS1aXVxcXFx3KlxcXFwuKSooW19hLXpBLVpdXFxcXHcqOik/W19hLXpBLVpdXFxcXHcqJyB9KSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICdwYXJhbXMnLFxuICAgICAgICAgICAgYmVnaW46ICdcXFxcKCcsXG4gICAgICAgICAgICBlbmRzV2l0aFBhcmVudDogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRhaW5zOiBDT01NRU5UU1xuICAgICAgICAgIH1cbiAgICAgICAgXS5jb25jYXQoQ09NTUVOVFMpXG4gICAgICB9LFxuICAgICAgaGxqcy5DX05VTUJFUl9NT0RFLFxuICAgICAgaGxqcy5BUE9TX1NUUklOR19NT0RFLFxuICAgICAgaGxqcy5RVU9URV9TVFJJTkdfTU9ERSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnc3RyaW5nJyxcbiAgICAgICAgYmVnaW46IE9QRU5JTkdfTE9OR19CUkFDS0VULFxuICAgICAgICBlbmQ6IENMT1NJTkdfTE9OR19CUkFDS0VULFxuICAgICAgICBjb250YWluczogWyBMT05HX0JSQUNLRVRTIF0sXG4gICAgICAgIHJlbGV2YW5jZTogNVxuICAgICAgfVxuICAgIF0pXG4gIH07XG59XG5cbmV4cG9ydCB7IGx1YSBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsibHVhIiwiaGxqcyIsIk9QRU5JTkdfTE9OR19CUkFDS0VUIiwiQ0xPU0lOR19MT05HX0JSQUNLRVQiLCJMT05HX0JSQUNLRVRTIiwiYmVnaW4iLCJlbmQiLCJjb250YWlucyIsIkNPTU1FTlRTIiwiQ09NTUVOVCIsInJlbGV2YW5jZSIsIm5hbWUiLCJhbGlhc2VzIiwia2V5d29yZHMiLCIkcGF0dGVybiIsIlVOREVSU0NPUkVfSURFTlRfUkUiLCJsaXRlcmFsIiwia2V5d29yZCIsImJ1aWx0X2luIiwiY29uY2F0IiwiY2xhc3NOYW1lIiwiYmVnaW5LZXl3b3JkcyIsImluaGVyaXQiLCJUSVRMRV9NT0RFIiwiZW5kc1dpdGhQYXJlbnQiLCJDX05VTUJFUl9NT0RFIiwiQVBPU19TVFJJTkdfTU9ERSIsIlFVT1RFX1NUUklOR19NT0RFIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/lua.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/makefile.js":
/*!************************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/makefile.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ makefile)\n/* harmony export */ });\n/*\nLanguage: Makefile\nAuthor: Ivan Sagalaev <maniac@softwaremaniacs.org>\nContributors: Joël Porquet <joel@porquet.org>\nWebsite: https://www.gnu.org/software/make/manual/html_node/Introduction.html\nCategory: common, build-system\n*/ function makefile(hljs) {\n    /* Variables: simple (eg $(var)) and special (eg $@) */ const VARIABLE = {\n        className: \"variable\",\n        variants: [\n            {\n                begin: \"\\\\$\\\\(\" + hljs.UNDERSCORE_IDENT_RE + \"\\\\)\",\n                contains: [\n                    hljs.BACKSLASH_ESCAPE\n                ]\n            },\n            {\n                begin: /\\$[@%<?\\^\\+\\*]/\n            }\n        ]\n    };\n    /* Quoted string with variables inside */ const QUOTE_STRING = {\n        className: \"string\",\n        begin: /\"/,\n        end: /\"/,\n        contains: [\n            hljs.BACKSLASH_ESCAPE,\n            VARIABLE\n        ]\n    };\n    /* Function: $(func arg,...) */ const FUNC = {\n        className: \"variable\",\n        begin: /\\$\\([\\w-]+\\s/,\n        end: /\\)/,\n        keywords: {\n            built_in: \"subst patsubst strip findstring filter filter-out sort \" + \"word wordlist firstword lastword dir notdir suffix basename \" + \"addsuffix addprefix join wildcard realpath abspath error warning \" + \"shell origin flavor foreach if or and call eval file value\"\n        },\n        contains: [\n            VARIABLE,\n            QUOTE_STRING // Added QUOTE_STRING as they can be a part of functions\n        ]\n    };\n    /* Variable assignment */ const ASSIGNMENT = {\n        begin: \"^\" + hljs.UNDERSCORE_IDENT_RE + \"\\\\s*(?=[:+?]?=)\"\n    };\n    /* Meta targets (.PHONY) */ const META = {\n        className: \"meta\",\n        begin: /^\\.PHONY:/,\n        end: /$/,\n        keywords: {\n            $pattern: /[\\.\\w]+/,\n            keyword: \".PHONY\"\n        }\n    };\n    /* Targets */ const TARGET = {\n        className: \"section\",\n        begin: /^[^\\s]+:/,\n        end: /$/,\n        contains: [\n            VARIABLE\n        ]\n    };\n    return {\n        name: \"Makefile\",\n        aliases: [\n            \"mk\",\n            \"mak\",\n            \"make\"\n        ],\n        keywords: {\n            $pattern: /[\\w-]+/,\n            keyword: \"define endef undefine ifdef ifndef ifeq ifneq else endif \" + \"include -include sinclude override export unexport private vpath\"\n        },\n        contains: [\n            hljs.HASH_COMMENT_MODE,\n            VARIABLE,\n            QUOTE_STRING,\n            FUNC,\n            ASSIGNMENT,\n            META,\n            TARGET\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9tYWtlZmlsZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7OztBQU1BLEdBRUEsU0FBU0EsU0FBU0MsSUFBSTtJQUNwQixxREFBcUQsR0FDckQsTUFBTUMsV0FBVztRQUNmQyxXQUFXO1FBQ1hDLFVBQVU7WUFDUjtnQkFDRUMsT0FBTyxXQUFXSixLQUFLSyxtQkFBbUIsR0FBRztnQkFDN0NDLFVBQVU7b0JBQUVOLEtBQUtPLGdCQUFnQjtpQkFBRTtZQUNyQztZQUNBO2dCQUFFSCxPQUFPO1lBQWlCO1NBQzNCO0lBQ0g7SUFDQSx1Q0FBdUMsR0FDdkMsTUFBTUksZUFBZTtRQUNuQk4sV0FBVztRQUNYRSxPQUFPO1FBQ1BLLEtBQUs7UUFDTEgsVUFBVTtZQUNSTixLQUFLTyxnQkFBZ0I7WUFDckJOO1NBQ0Q7SUFDSDtJQUNBLDZCQUE2QixHQUM3QixNQUFNUyxPQUFPO1FBQ1hSLFdBQVc7UUFDWEUsT0FBTztRQUNQSyxLQUFLO1FBQ0xFLFVBQVU7WUFBRUMsVUFDUiw0REFDRSxpRUFDQSxzRUFDQTtRQUE2RDtRQUNuRU4sVUFBVTtZQUNSTDtZQUNBTyxhQUFhLHdEQUF3RDtTQUN0RTtJQUNIO0lBQ0EsdUJBQXVCLEdBQ3ZCLE1BQU1LLGFBQWE7UUFBRVQsT0FBTyxNQUFNSixLQUFLSyxtQkFBbUIsR0FBRztJQUFrQjtJQUMvRSx5QkFBeUIsR0FDekIsTUFBTVMsT0FBTztRQUNYWixXQUFXO1FBQ1hFLE9BQU87UUFDUEssS0FBSztRQUNMRSxVQUFVO1lBQ1JJLFVBQVU7WUFDVkMsU0FBUztRQUNYO0lBQ0Y7SUFDQSxXQUFXLEdBQ1gsTUFBTUMsU0FBUztRQUNiZixXQUFXO1FBQ1hFLE9BQU87UUFDUEssS0FBSztRQUNMSCxVQUFVO1lBQUVMO1NBQVU7SUFDeEI7SUFDQSxPQUFPO1FBQ0xpQixNQUFNO1FBQ05DLFNBQVM7WUFDUDtZQUNBO1lBQ0E7U0FDRDtRQUNEUixVQUFVO1lBQ1JJLFVBQVU7WUFDVkMsU0FBUyw4REFDUDtRQUNKO1FBQ0FWLFVBQVU7WUFDUk4sS0FBS29CLGlCQUFpQjtZQUN0Qm5CO1lBQ0FPO1lBQ0FFO1lBQ0FHO1lBQ0FDO1lBQ0FHO1NBQ0Q7SUFDSDtBQUNGO0FBRStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFyZHdhcmUtZG9jLWNoYXRib3QvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9tYWtlZmlsZS5qcz82ZTZlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5MYW5ndWFnZTogTWFrZWZpbGVcbkF1dGhvcjogSXZhbiBTYWdhbGFldiA8bWFuaWFjQHNvZnR3YXJlbWFuaWFjcy5vcmc+XG5Db250cmlidXRvcnM6IEpvw6tsIFBvcnF1ZXQgPGpvZWxAcG9ycXVldC5vcmc+XG5XZWJzaXRlOiBodHRwczovL3d3dy5nbnUub3JnL3NvZnR3YXJlL21ha2UvbWFudWFsL2h0bWxfbm9kZS9JbnRyb2R1Y3Rpb24uaHRtbFxuQ2F0ZWdvcnk6IGNvbW1vbiwgYnVpbGQtc3lzdGVtXG4qL1xuXG5mdW5jdGlvbiBtYWtlZmlsZShobGpzKSB7XG4gIC8qIFZhcmlhYmxlczogc2ltcGxlIChlZyAkKHZhcikpIGFuZCBzcGVjaWFsIChlZyAkQCkgKi9cbiAgY29uc3QgVkFSSUFCTEUgPSB7XG4gICAgY2xhc3NOYW1lOiAndmFyaWFibGUnLFxuICAgIHZhcmlhbnRzOiBbXG4gICAgICB7XG4gICAgICAgIGJlZ2luOiAnXFxcXCRcXFxcKCcgKyBobGpzLlVOREVSU0NPUkVfSURFTlRfUkUgKyAnXFxcXCknLFxuICAgICAgICBjb250YWluczogWyBobGpzLkJBQ0tTTEFTSF9FU0NBUEUgXVxuICAgICAgfSxcbiAgICAgIHsgYmVnaW46IC9cXCRbQCU8P1xcXlxcK1xcKl0vIH1cbiAgICBdXG4gIH07XG4gIC8qIFF1b3RlZCBzdHJpbmcgd2l0aCB2YXJpYWJsZXMgaW5zaWRlICovXG4gIGNvbnN0IFFVT1RFX1NUUklORyA9IHtcbiAgICBjbGFzc05hbWU6ICdzdHJpbmcnLFxuICAgIGJlZ2luOiAvXCIvLFxuICAgIGVuZDogL1wiLyxcbiAgICBjb250YWluczogW1xuICAgICAgaGxqcy5CQUNLU0xBU0hfRVNDQVBFLFxuICAgICAgVkFSSUFCTEVcbiAgICBdXG4gIH07XG4gIC8qIEZ1bmN0aW9uOiAkKGZ1bmMgYXJnLC4uLikgKi9cbiAgY29uc3QgRlVOQyA9IHtcbiAgICBjbGFzc05hbWU6ICd2YXJpYWJsZScsXG4gICAgYmVnaW46IC9cXCRcXChbXFx3LV0rXFxzLyxcbiAgICBlbmQ6IC9cXCkvLFxuICAgIGtleXdvcmRzOiB7IGJ1aWx0X2luOlxuICAgICAgICAnc3Vic3QgcGF0c3Vic3Qgc3RyaXAgZmluZHN0cmluZyBmaWx0ZXIgZmlsdGVyLW91dCBzb3J0ICdcbiAgICAgICAgKyAnd29yZCB3b3JkbGlzdCBmaXJzdHdvcmQgbGFzdHdvcmQgZGlyIG5vdGRpciBzdWZmaXggYmFzZW5hbWUgJ1xuICAgICAgICArICdhZGRzdWZmaXggYWRkcHJlZml4IGpvaW4gd2lsZGNhcmQgcmVhbHBhdGggYWJzcGF0aCBlcnJvciB3YXJuaW5nICdcbiAgICAgICAgKyAnc2hlbGwgb3JpZ2luIGZsYXZvciBmb3JlYWNoIGlmIG9yIGFuZCBjYWxsIGV2YWwgZmlsZSB2YWx1ZScgfSxcbiAgICBjb250YWluczogWyBcbiAgICAgIFZBUklBQkxFLFxuICAgICAgUVVPVEVfU1RSSU5HIC8vIEFkZGVkIFFVT1RFX1NUUklORyBhcyB0aGV5IGNhbiBiZSBhIHBhcnQgb2YgZnVuY3Rpb25zXG4gICAgXVxuICB9O1xuICAvKiBWYXJpYWJsZSBhc3NpZ25tZW50ICovXG4gIGNvbnN0IEFTU0lHTk1FTlQgPSB7IGJlZ2luOiAnXicgKyBobGpzLlVOREVSU0NPUkVfSURFTlRfUkUgKyAnXFxcXHMqKD89WzorP10/PSknIH07XG4gIC8qIE1ldGEgdGFyZ2V0cyAoLlBIT05ZKSAqL1xuICBjb25zdCBNRVRBID0ge1xuICAgIGNsYXNzTmFtZTogJ21ldGEnLFxuICAgIGJlZ2luOiAvXlxcLlBIT05ZOi8sXG4gICAgZW5kOiAvJC8sXG4gICAga2V5d29yZHM6IHtcbiAgICAgICRwYXR0ZXJuOiAvW1xcLlxcd10rLyxcbiAgICAgIGtleXdvcmQ6ICcuUEhPTlknXG4gICAgfVxuICB9O1xuICAvKiBUYXJnZXRzICovXG4gIGNvbnN0IFRBUkdFVCA9IHtcbiAgICBjbGFzc05hbWU6ICdzZWN0aW9uJyxcbiAgICBiZWdpbjogL15bXlxcc10rOi8sXG4gICAgZW5kOiAvJC8sXG4gICAgY29udGFpbnM6IFsgVkFSSUFCTEUgXVxuICB9O1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdNYWtlZmlsZScsXG4gICAgYWxpYXNlczogW1xuICAgICAgJ21rJyxcbiAgICAgICdtYWsnLFxuICAgICAgJ21ha2UnLFxuICAgIF0sXG4gICAga2V5d29yZHM6IHtcbiAgICAgICRwYXR0ZXJuOiAvW1xcdy1dKy8sXG4gICAgICBrZXl3b3JkOiAnZGVmaW5lIGVuZGVmIHVuZGVmaW5lIGlmZGVmIGlmbmRlZiBpZmVxIGlmbmVxIGVsc2UgZW5kaWYgJ1xuICAgICAgKyAnaW5jbHVkZSAtaW5jbHVkZSBzaW5jbHVkZSBvdmVycmlkZSBleHBvcnQgdW5leHBvcnQgcHJpdmF0ZSB2cGF0aCdcbiAgICB9LFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICBobGpzLkhBU0hfQ09NTUVOVF9NT0RFLFxuICAgICAgVkFSSUFCTEUsXG4gICAgICBRVU9URV9TVFJJTkcsXG4gICAgICBGVU5DLFxuICAgICAgQVNTSUdOTUVOVCxcbiAgICAgIE1FVEEsXG4gICAgICBUQVJHRVRcbiAgICBdXG4gIH07XG59XG5cbmV4cG9ydCB7IG1ha2VmaWxlIGFzIGRlZmF1bHQgfTtcbiJdLCJuYW1lcyI6WyJtYWtlZmlsZSIsImhsanMiLCJWQVJJQUJMRSIsImNsYXNzTmFtZSIsInZhcmlhbnRzIiwiYmVnaW4iLCJVTkRFUlNDT1JFX0lERU5UX1JFIiwiY29udGFpbnMiLCJCQUNLU0xBU0hfRVNDQVBFIiwiUVVPVEVfU1RSSU5HIiwiZW5kIiwiRlVOQyIsImtleXdvcmRzIiwiYnVpbHRfaW4iLCJBU1NJR05NRU5UIiwiTUVUQSIsIiRwYXR0ZXJuIiwia2V5d29yZCIsIlRBUkdFVCIsIm5hbWUiLCJhbGlhc2VzIiwiSEFTSF9DT01NRU5UX01PREUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/makefile.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/markdown.js":
/*!************************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/markdown.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ markdown)\n/* harmony export */ });\n/*\nLanguage: Markdown\nRequires: xml.js\nAuthor: John Crepezzi <john.crepezzi@gmail.com>\nWebsite: https://daringfireball.net/projects/markdown/\nCategory: common, markup\n*/ function markdown(hljs) {\n    const regex = hljs.regex;\n    const INLINE_HTML = {\n        begin: /<\\/?[A-Za-z_]/,\n        end: \">\",\n        subLanguage: \"xml\",\n        relevance: 0\n    };\n    const HORIZONTAL_RULE = {\n        begin: \"^[-\\\\*]{3,}\",\n        end: \"$\"\n    };\n    const CODE = {\n        className: \"code\",\n        variants: [\n            // TODO: fix to allow these to work with sublanguage also\n            {\n                begin: \"(`{3,})[^`](.|\\\\n)*?\\\\1`*[ ]*\"\n            },\n            {\n                begin: \"(~{3,})[^~](.|\\\\n)*?\\\\1~*[ ]*\"\n            },\n            // needed to allow markdown as a sublanguage to work\n            {\n                begin: \"```\",\n                end: \"```+[ ]*$\"\n            },\n            {\n                begin: \"~~~\",\n                end: \"~~~+[ ]*$\"\n            },\n            {\n                begin: \"`.+?`\"\n            },\n            {\n                begin: \"(?=^( {4}|\\\\t))\",\n                // use contains to gobble up multiple lines to allow the block to be whatever size\n                // but only have a single open/close tag vs one per line\n                contains: [\n                    {\n                        begin: \"^( {4}|\\\\t)\",\n                        end: \"(\\\\n)$\"\n                    }\n                ],\n                relevance: 0\n            }\n        ]\n    };\n    const LIST = {\n        className: \"bullet\",\n        begin: \"^[ \t]*([*+-]|(\\\\d+\\\\.))(?=\\\\s+)\",\n        end: \"\\\\s+\",\n        excludeEnd: true\n    };\n    const LINK_REFERENCE = {\n        begin: /^\\[[^\\n]+\\]:/,\n        returnBegin: true,\n        contains: [\n            {\n                className: \"symbol\",\n                begin: /\\[/,\n                end: /\\]/,\n                excludeBegin: true,\n                excludeEnd: true\n            },\n            {\n                className: \"link\",\n                begin: /:\\s*/,\n                end: /$/,\n                excludeBegin: true\n            }\n        ]\n    };\n    const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;\n    const LINK = {\n        variants: [\n            // too much like nested array access in so many languages\n            // to have any real relevance\n            {\n                begin: /\\[.+?\\]\\[.*?\\]/,\n                relevance: 0\n            },\n            // popular internet URLs\n            {\n                begin: /\\[.+?\\]\\(((data|javascript|mailto):|(?:http|ftp)s?:\\/\\/).*?\\)/,\n                relevance: 2\n            },\n            {\n                begin: regex.concat(/\\[.+?\\]\\(/, URL_SCHEME, /:\\/\\/.*?\\)/),\n                relevance: 2\n            },\n            // relative urls\n            {\n                begin: /\\[.+?\\]\\([./?&#].*?\\)/,\n                relevance: 1\n            },\n            // whatever else, lower relevance (might not be a link at all)\n            {\n                begin: /\\[.*?\\]\\(.*?\\)/,\n                relevance: 0\n            }\n        ],\n        returnBegin: true,\n        contains: [\n            {\n                // empty strings for alt or link text\n                match: /\\[(?=\\])/\n            },\n            {\n                className: \"string\",\n                relevance: 0,\n                begin: \"\\\\[\",\n                end: \"\\\\]\",\n                excludeBegin: true,\n                returnEnd: true\n            },\n            {\n                className: \"link\",\n                relevance: 0,\n                begin: \"\\\\]\\\\(\",\n                end: \"\\\\)\",\n                excludeBegin: true,\n                excludeEnd: true\n            },\n            {\n                className: \"symbol\",\n                relevance: 0,\n                begin: \"\\\\]\\\\[\",\n                end: \"\\\\]\",\n                excludeBegin: true,\n                excludeEnd: true\n            }\n        ]\n    };\n    const BOLD = {\n        className: \"strong\",\n        contains: [],\n        variants: [\n            {\n                begin: /_{2}(?!\\s)/,\n                end: /_{2}/\n            },\n            {\n                begin: /\\*{2}(?!\\s)/,\n                end: /\\*{2}/\n            }\n        ]\n    };\n    const ITALIC = {\n        className: \"emphasis\",\n        contains: [],\n        variants: [\n            {\n                begin: /\\*(?![*\\s])/,\n                end: /\\*/\n            },\n            {\n                begin: /_(?![_\\s])/,\n                end: /_/,\n                relevance: 0\n            }\n        ]\n    };\n    // 3 level deep nesting is not allowed because it would create confusion\n    // in cases like `***testing***` because where we don't know if the last\n    // `***` is starting a new bold/italic or finishing the last one\n    const BOLD_WITHOUT_ITALIC = hljs.inherit(BOLD, {\n        contains: []\n    });\n    const ITALIC_WITHOUT_BOLD = hljs.inherit(ITALIC, {\n        contains: []\n    });\n    BOLD.contains.push(ITALIC_WITHOUT_BOLD);\n    ITALIC.contains.push(BOLD_WITHOUT_ITALIC);\n    let CONTAINABLE = [\n        INLINE_HTML,\n        LINK\n    ];\n    [\n        BOLD,\n        ITALIC,\n        BOLD_WITHOUT_ITALIC,\n        ITALIC_WITHOUT_BOLD\n    ].forEach((m)=>{\n        m.contains = m.contains.concat(CONTAINABLE);\n    });\n    CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);\n    const HEADER = {\n        className: \"section\",\n        variants: [\n            {\n                begin: \"^#{1,6}\",\n                end: \"$\",\n                contains: CONTAINABLE\n            },\n            {\n                begin: \"(?=^.+?\\\\n[=-]{2,}$)\",\n                contains: [\n                    {\n                        begin: \"^[=-]*$\"\n                    },\n                    {\n                        begin: \"^\",\n                        end: \"\\\\n\",\n                        contains: CONTAINABLE\n                    }\n                ]\n            }\n        ]\n    };\n    const BLOCKQUOTE = {\n        className: \"quote\",\n        begin: \"^>\\\\s+\",\n        contains: CONTAINABLE,\n        end: \"$\"\n    };\n    const ENTITY = {\n        //https://spec.commonmark.org/0.31.2/#entity-references\n        scope: \"literal\",\n        match: /&([a-zA-Z0-9]+|#[0-9]{1,7}|#[Xx][0-9a-fA-F]{1,6});/\n    };\n    return {\n        name: \"Markdown\",\n        aliases: [\n            \"md\",\n            \"mkdown\",\n            \"mkd\"\n        ],\n        contains: [\n            HEADER,\n            INLINE_HTML,\n            LIST,\n            BOLD,\n            ITALIC,\n            BLOCKQUOTE,\n            CODE,\n            HORIZONTAL_RULE,\n            LINK,\n            LINK_REFERENCE,\n            ENTITY\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/markdown.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/objectivec.js":
/*!**************************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/objectivec.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ objectivec)\n/* harmony export */ });\n/*\nLanguage: Objective-C\nAuthor: Valerii Hiora <valerii.hiora@gmail.com>\nContributors: Angel G. Olloqui <angelgarcia.mail@gmail.com>, Matt Diephouse <matt@diephouse.com>, Andrew Farmer <ahfarmer@gmail.com>, Minh Nguyễn <mxn@1ec5.org>\nWebsite: https://developer.apple.com/documentation/objectivec\nCategory: common\n*/ function objectivec(hljs) {\n    const API_CLASS = {\n        className: \"built_in\",\n        begin: \"\\\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\\\w+\"\n    };\n    const IDENTIFIER_RE = /[a-zA-Z@][a-zA-Z0-9_]*/;\n    const TYPES = [\n        \"int\",\n        \"float\",\n        \"char\",\n        \"unsigned\",\n        \"signed\",\n        \"short\",\n        \"long\",\n        \"double\",\n        \"wchar_t\",\n        \"unichar\",\n        \"void\",\n        \"bool\",\n        \"BOOL\",\n        \"id|0\",\n        \"_Bool\"\n    ];\n    const KWS = [\n        \"while\",\n        \"export\",\n        \"sizeof\",\n        \"typedef\",\n        \"const\",\n        \"struct\",\n        \"for\",\n        \"union\",\n        \"volatile\",\n        \"static\",\n        \"mutable\",\n        \"if\",\n        \"do\",\n        \"return\",\n        \"goto\",\n        \"enum\",\n        \"else\",\n        \"break\",\n        \"extern\",\n        \"asm\",\n        \"case\",\n        \"default\",\n        \"register\",\n        \"explicit\",\n        \"typename\",\n        \"switch\",\n        \"continue\",\n        \"inline\",\n        \"readonly\",\n        \"assign\",\n        \"readwrite\",\n        \"self\",\n        \"@synchronized\",\n        \"id\",\n        \"typeof\",\n        \"nonatomic\",\n        \"IBOutlet\",\n        \"IBAction\",\n        \"strong\",\n        \"weak\",\n        \"copy\",\n        \"in\",\n        \"out\",\n        \"inout\",\n        \"bycopy\",\n        \"byref\",\n        \"oneway\",\n        \"__strong\",\n        \"__weak\",\n        \"__block\",\n        \"__autoreleasing\",\n        \"@private\",\n        \"@protected\",\n        \"@public\",\n        \"@try\",\n        \"@property\",\n        \"@end\",\n        \"@throw\",\n        \"@catch\",\n        \"@finally\",\n        \"@autoreleasepool\",\n        \"@synthesize\",\n        \"@dynamic\",\n        \"@selector\",\n        \"@optional\",\n        \"@required\",\n        \"@encode\",\n        \"@package\",\n        \"@import\",\n        \"@defs\",\n        \"@compatibility_alias\",\n        \"__bridge\",\n        \"__bridge_transfer\",\n        \"__bridge_retained\",\n        \"__bridge_retain\",\n        \"__covariant\",\n        \"__contravariant\",\n        \"__kindof\",\n        \"_Nonnull\",\n        \"_Nullable\",\n        \"_Null_unspecified\",\n        \"__FUNCTION__\",\n        \"__PRETTY_FUNCTION__\",\n        \"__attribute__\",\n        \"getter\",\n        \"setter\",\n        \"retain\",\n        \"unsafe_unretained\",\n        \"nonnull\",\n        \"nullable\",\n        \"null_unspecified\",\n        \"null_resettable\",\n        \"class\",\n        \"instancetype\",\n        \"NS_DESIGNATED_INITIALIZER\",\n        \"NS_UNAVAILABLE\",\n        \"NS_REQUIRES_SUPER\",\n        \"NS_RETURNS_INNER_POINTER\",\n        \"NS_INLINE\",\n        \"NS_AVAILABLE\",\n        \"NS_DEPRECATED\",\n        \"NS_ENUM\",\n        \"NS_OPTIONS\",\n        \"NS_SWIFT_UNAVAILABLE\",\n        \"NS_ASSUME_NONNULL_BEGIN\",\n        \"NS_ASSUME_NONNULL_END\",\n        \"NS_REFINED_FOR_SWIFT\",\n        \"NS_SWIFT_NAME\",\n        \"NS_SWIFT_NOTHROW\",\n        \"NS_DURING\",\n        \"NS_HANDLER\",\n        \"NS_ENDHANDLER\",\n        \"NS_VALUERETURN\",\n        \"NS_VOIDRETURN\"\n    ];\n    const LITERALS = [\n        \"false\",\n        \"true\",\n        \"FALSE\",\n        \"TRUE\",\n        \"nil\",\n        \"YES\",\n        \"NO\",\n        \"NULL\"\n    ];\n    const BUILT_INS = [\n        \"dispatch_once_t\",\n        \"dispatch_queue_t\",\n        \"dispatch_sync\",\n        \"dispatch_async\",\n        \"dispatch_once\"\n    ];\n    const KEYWORDS = {\n        \"variable.language\": [\n            \"this\",\n            \"super\"\n        ],\n        $pattern: IDENTIFIER_RE,\n        keyword: KWS,\n        literal: LITERALS,\n        built_in: BUILT_INS,\n        type: TYPES\n    };\n    const CLASS_KEYWORDS = {\n        $pattern: IDENTIFIER_RE,\n        keyword: [\n            \"@interface\",\n            \"@class\",\n            \"@protocol\",\n            \"@implementation\"\n        ]\n    };\n    return {\n        name: \"Objective-C\",\n        aliases: [\n            \"mm\",\n            \"objc\",\n            \"obj-c\",\n            \"obj-c++\",\n            \"objective-c++\"\n        ],\n        keywords: KEYWORDS,\n        illegal: \"</\",\n        contains: [\n            API_CLASS,\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            hljs.C_NUMBER_MODE,\n            hljs.QUOTE_STRING_MODE,\n            hljs.APOS_STRING_MODE,\n            {\n                className: \"string\",\n                variants: [\n                    {\n                        begin: '@\"',\n                        end: '\"',\n                        illegal: \"\\\\n\",\n                        contains: [\n                            hljs.BACKSLASH_ESCAPE\n                        ]\n                    }\n                ]\n            },\n            {\n                className: \"meta\",\n                begin: /#\\s*[a-z]+\\b/,\n                end: /$/,\n                keywords: {\n                    keyword: \"if else elif endif define undef warning error line \" + \"pragma ifdef ifndef include\"\n                },\n                contains: [\n                    {\n                        begin: /\\\\\\n/,\n                        relevance: 0\n                    },\n                    hljs.inherit(hljs.QUOTE_STRING_MODE, {\n                        className: \"string\"\n                    }),\n                    {\n                        className: \"string\",\n                        begin: /<.*?>/,\n                        end: /$/,\n                        illegal: \"\\\\n\"\n                    },\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            {\n                className: \"class\",\n                begin: \"(\" + CLASS_KEYWORDS.keyword.join(\"|\") + \")\\\\b\",\n                end: /(\\{|$)/,\n                excludeEnd: true,\n                keywords: CLASS_KEYWORDS,\n                contains: [\n                    hljs.UNDERSCORE_TITLE_MODE\n                ]\n            },\n            {\n                begin: \"\\\\.\" + hljs.UNDERSCORE_IDENT_RE,\n                relevance: 0\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/objectivec.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/perl.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/perl.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ perl)\n/* harmony export */ });\n/*\nLanguage: Perl\nAuthor: Peter Leonov <gojpeg@yandex.ru>\nWebsite: https://www.perl.org\nCategory: common\n*/ /** @type LanguageFn */ function perl(hljs) {\n    const regex = hljs.regex;\n    const KEYWORDS = [\n        \"abs\",\n        \"accept\",\n        \"alarm\",\n        \"and\",\n        \"atan2\",\n        \"bind\",\n        \"binmode\",\n        \"bless\",\n        \"break\",\n        \"caller\",\n        \"chdir\",\n        \"chmod\",\n        \"chomp\",\n        \"chop\",\n        \"chown\",\n        \"chr\",\n        \"chroot\",\n        \"class\",\n        \"close\",\n        \"closedir\",\n        \"connect\",\n        \"continue\",\n        \"cos\",\n        \"crypt\",\n        \"dbmclose\",\n        \"dbmopen\",\n        \"defined\",\n        \"delete\",\n        \"die\",\n        \"do\",\n        \"dump\",\n        \"each\",\n        \"else\",\n        \"elsif\",\n        \"endgrent\",\n        \"endhostent\",\n        \"endnetent\",\n        \"endprotoent\",\n        \"endpwent\",\n        \"endservent\",\n        \"eof\",\n        \"eval\",\n        \"exec\",\n        \"exists\",\n        \"exit\",\n        \"exp\",\n        \"fcntl\",\n        \"field\",\n        \"fileno\",\n        \"flock\",\n        \"for\",\n        \"foreach\",\n        \"fork\",\n        \"format\",\n        \"formline\",\n        \"getc\",\n        \"getgrent\",\n        \"getgrgid\",\n        \"getgrnam\",\n        \"gethostbyaddr\",\n        \"gethostbyname\",\n        \"gethostent\",\n        \"getlogin\",\n        \"getnetbyaddr\",\n        \"getnetbyname\",\n        \"getnetent\",\n        \"getpeername\",\n        \"getpgrp\",\n        \"getpriority\",\n        \"getprotobyname\",\n        \"getprotobynumber\",\n        \"getprotoent\",\n        \"getpwent\",\n        \"getpwnam\",\n        \"getpwuid\",\n        \"getservbyname\",\n        \"getservbyport\",\n        \"getservent\",\n        \"getsockname\",\n        \"getsockopt\",\n        \"given\",\n        \"glob\",\n        \"gmtime\",\n        \"goto\",\n        \"grep\",\n        \"gt\",\n        \"hex\",\n        \"if\",\n        \"index\",\n        \"int\",\n        \"ioctl\",\n        \"join\",\n        \"keys\",\n        \"kill\",\n        \"last\",\n        \"lc\",\n        \"lcfirst\",\n        \"length\",\n        \"link\",\n        \"listen\",\n        \"local\",\n        \"localtime\",\n        \"log\",\n        \"lstat\",\n        \"lt\",\n        \"ma\",\n        \"map\",\n        \"method\",\n        \"mkdir\",\n        \"msgctl\",\n        \"msgget\",\n        \"msgrcv\",\n        \"msgsnd\",\n        \"my\",\n        \"ne\",\n        \"next\",\n        \"no\",\n        \"not\",\n        \"oct\",\n        \"open\",\n        \"opendir\",\n        \"or\",\n        \"ord\",\n        \"our\",\n        \"pack\",\n        \"package\",\n        \"pipe\",\n        \"pop\",\n        \"pos\",\n        \"print\",\n        \"printf\",\n        \"prototype\",\n        \"push\",\n        \"q|0\",\n        \"qq\",\n        \"quotemeta\",\n        \"qw\",\n        \"qx\",\n        \"rand\",\n        \"read\",\n        \"readdir\",\n        \"readline\",\n        \"readlink\",\n        \"readpipe\",\n        \"recv\",\n        \"redo\",\n        \"ref\",\n        \"rename\",\n        \"require\",\n        \"reset\",\n        \"return\",\n        \"reverse\",\n        \"rewinddir\",\n        \"rindex\",\n        \"rmdir\",\n        \"say\",\n        \"scalar\",\n        \"seek\",\n        \"seekdir\",\n        \"select\",\n        \"semctl\",\n        \"semget\",\n        \"semop\",\n        \"send\",\n        \"setgrent\",\n        \"sethostent\",\n        \"setnetent\",\n        \"setpgrp\",\n        \"setpriority\",\n        \"setprotoent\",\n        \"setpwent\",\n        \"setservent\",\n        \"setsockopt\",\n        \"shift\",\n        \"shmctl\",\n        \"shmget\",\n        \"shmread\",\n        \"shmwrite\",\n        \"shutdown\",\n        \"sin\",\n        \"sleep\",\n        \"socket\",\n        \"socketpair\",\n        \"sort\",\n        \"splice\",\n        \"split\",\n        \"sprintf\",\n        \"sqrt\",\n        \"srand\",\n        \"stat\",\n        \"state\",\n        \"study\",\n        \"sub\",\n        \"substr\",\n        \"symlink\",\n        \"syscall\",\n        \"sysopen\",\n        \"sysread\",\n        \"sysseek\",\n        \"system\",\n        \"syswrite\",\n        \"tell\",\n        \"telldir\",\n        \"tie\",\n        \"tied\",\n        \"time\",\n        \"times\",\n        \"tr\",\n        \"truncate\",\n        \"uc\",\n        \"ucfirst\",\n        \"umask\",\n        \"undef\",\n        \"unless\",\n        \"unlink\",\n        \"unpack\",\n        \"unshift\",\n        \"untie\",\n        \"until\",\n        \"use\",\n        \"utime\",\n        \"values\",\n        \"vec\",\n        \"wait\",\n        \"waitpid\",\n        \"wantarray\",\n        \"warn\",\n        \"when\",\n        \"while\",\n        \"write\",\n        \"x|0\",\n        \"xor\",\n        \"y|0\"\n    ];\n    // https://perldoc.perl.org/perlre#Modifiers\n    const REGEX_MODIFIERS = /[dualxmsipngr]{0,12}/; // aa and xx are valid, making max length 12\n    const PERL_KEYWORDS = {\n        $pattern: /[\\w.]+/,\n        keyword: KEYWORDS.join(\" \")\n    };\n    const SUBST = {\n        className: \"subst\",\n        begin: \"[$@]\\\\{\",\n        end: \"\\\\}\",\n        keywords: PERL_KEYWORDS\n    };\n    const METHOD = {\n        begin: /->\\{/,\n        end: /\\}/\n    };\n    const ATTR = {\n        scope: \"attr\",\n        match: /\\s+:\\s*\\w+(\\s*\\(.*?\\))?/\n    };\n    const VAR = {\n        scope: \"variable\",\n        variants: [\n            {\n                begin: /\\$\\d/\n            },\n            {\n                begin: regex.concat(/[$%@](?!\")(\\^\\w\\b|#\\w+(::\\w+)*|\\{\\w+\\}|\\w+(::\\w*)*)/, // negative look-ahead tries to avoid matching patterns that are not\n                // Perl at all like $ident$, @ident@, etc.\n                `(?![A-Za-z])(?![@$%])`)\n            },\n            {\n                // Only $= is a special Perl variable and one can't declare @= or %=.\n                begin: /[$%@](?!\")[^\\s\\w{=]|\\$=/,\n                relevance: 0\n            }\n        ],\n        contains: [\n            ATTR\n        ]\n    };\n    const NUMBER = {\n        className: \"number\",\n        variants: [\n            // decimal numbers:\n            // include the case where a number starts with a dot (eg. .9), and\n            // the leading 0? avoids mixing the first and second match on 0.x cases\n            {\n                match: /0?\\.[0-9][0-9_]+\\b/\n            },\n            // include the special versioned number (eg. v5.38)\n            {\n                match: /\\bv?(0|[1-9][0-9_]*(\\.[0-9_]+)?|[1-9][0-9_]*)\\b/\n            },\n            // non-decimal numbers:\n            {\n                match: /\\b0[0-7][0-7_]*\\b/\n            },\n            {\n                match: /\\b0x[0-9a-fA-F][0-9a-fA-F_]*\\b/\n            },\n            {\n                match: /\\b0b[0-1][0-1_]*\\b/\n            }\n        ],\n        relevance: 0\n    };\n    const STRING_CONTAINS = [\n        hljs.BACKSLASH_ESCAPE,\n        SUBST,\n        VAR\n    ];\n    const REGEX_DELIMS = [\n        /!/,\n        /\\//,\n        /\\|/,\n        /\\?/,\n        /'/,\n        /\"/,\n        /#/ // valid but infrequent and weird\n    ];\n    /**\n   * @param {string|RegExp} prefix\n   * @param {string|RegExp} open\n   * @param {string|RegExp} close\n   */ const PAIRED_DOUBLE_RE = (prefix, open, close = \"\\\\1\")=>{\n        const middle = close === \"\\\\1\" ? close : regex.concat(close, open);\n        return regex.concat(regex.concat(\"(?:\", prefix, \")\"), open, /(?:\\\\.|[^\\\\\\/])*?/, middle, /(?:\\\\.|[^\\\\\\/])*?/, close, REGEX_MODIFIERS);\n    };\n    /**\n   * @param {string|RegExp} prefix\n   * @param {string|RegExp} open\n   * @param {string|RegExp} close\n   */ const PAIRED_RE = (prefix, open, close)=>{\n        return regex.concat(regex.concat(\"(?:\", prefix, \")\"), open, /(?:\\\\.|[^\\\\\\/])*?/, close, REGEX_MODIFIERS);\n    };\n    const PERL_DEFAULT_CONTAINS = [\n        VAR,\n        hljs.HASH_COMMENT_MODE,\n        hljs.COMMENT(/^=\\w/, /=cut/, {\n            endsWithParent: true\n        }),\n        METHOD,\n        {\n            className: \"string\",\n            contains: STRING_CONTAINS,\n            variants: [\n                {\n                    begin: \"q[qwxr]?\\\\s*\\\\(\",\n                    end: \"\\\\)\",\n                    relevance: 5\n                },\n                {\n                    begin: \"q[qwxr]?\\\\s*\\\\[\",\n                    end: \"\\\\]\",\n                    relevance: 5\n                },\n                {\n                    begin: \"q[qwxr]?\\\\s*\\\\{\",\n                    end: \"\\\\}\",\n                    relevance: 5\n                },\n                {\n                    begin: \"q[qwxr]?\\\\s*\\\\|\",\n                    end: \"\\\\|\",\n                    relevance: 5\n                },\n                {\n                    begin: \"q[qwxr]?\\\\s*<\",\n                    end: \">\",\n                    relevance: 5\n                },\n                {\n                    begin: \"qw\\\\s+q\",\n                    end: \"q\",\n                    relevance: 5\n                },\n                {\n                    begin: \"'\",\n                    end: \"'\",\n                    contains: [\n                        hljs.BACKSLASH_ESCAPE\n                    ]\n                },\n                {\n                    begin: '\"',\n                    end: '\"'\n                },\n                {\n                    begin: \"`\",\n                    end: \"`\",\n                    contains: [\n                        hljs.BACKSLASH_ESCAPE\n                    ]\n                },\n                {\n                    begin: /\\{\\w+\\}/,\n                    relevance: 0\n                },\n                {\n                    begin: \"-?\\\\w+\\\\s*=>\",\n                    relevance: 0\n                }\n            ]\n        },\n        NUMBER,\n        {\n            begin: \"(\\\\/\\\\/|\" + hljs.RE_STARTERS_RE + \"|\\\\b(split|return|print|reverse|grep)\\\\b)\\\\s*\",\n            keywords: \"split return print reverse grep\",\n            relevance: 0,\n            contains: [\n                hljs.HASH_COMMENT_MODE,\n                {\n                    className: \"regexp\",\n                    variants: [\n                        // allow matching common delimiters\n                        {\n                            begin: PAIRED_DOUBLE_RE(\"s|tr|y\", regex.either(...REGEX_DELIMS, {\n                                capture: true\n                            }))\n                        },\n                        // and then paired delmis\n                        {\n                            begin: PAIRED_DOUBLE_RE(\"s|tr|y\", \"\\\\(\", \"\\\\)\")\n                        },\n                        {\n                            begin: PAIRED_DOUBLE_RE(\"s|tr|y\", \"\\\\[\", \"\\\\]\")\n                        },\n                        {\n                            begin: PAIRED_DOUBLE_RE(\"s|tr|y\", \"\\\\{\", \"\\\\}\")\n                        }\n                    ],\n                    relevance: 2\n                },\n                {\n                    className: \"regexp\",\n                    variants: [\n                        {\n                            // could be a comment in many languages so do not count\n                            // as relevant\n                            begin: /(m|qr)\\/\\//,\n                            relevance: 0\n                        },\n                        // prefix is optional with /regex/\n                        {\n                            begin: PAIRED_RE(\"(?:m|qr)?\", /\\//, /\\//)\n                        },\n                        // allow matching common delimiters\n                        {\n                            begin: PAIRED_RE(\"m|qr\", regex.either(...REGEX_DELIMS, {\n                                capture: true\n                            }), /\\1/)\n                        },\n                        // allow common paired delmins\n                        {\n                            begin: PAIRED_RE(\"m|qr\", /\\(/, /\\)/)\n                        },\n                        {\n                            begin: PAIRED_RE(\"m|qr\", /\\[/, /\\]/)\n                        },\n                        {\n                            begin: PAIRED_RE(\"m|qr\", /\\{/, /\\}/)\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            className: \"function\",\n            beginKeywords: \"sub method\",\n            end: \"(\\\\s*\\\\(.*?\\\\))?[;{]\",\n            excludeEnd: true,\n            relevance: 5,\n            contains: [\n                hljs.TITLE_MODE,\n                ATTR\n            ]\n        },\n        {\n            className: \"class\",\n            beginKeywords: \"class\",\n            end: \"[;{]\",\n            excludeEnd: true,\n            relevance: 5,\n            contains: [\n                hljs.TITLE_MODE,\n                ATTR,\n                NUMBER\n            ]\n        },\n        {\n            begin: \"-\\\\w\\\\b\",\n            relevance: 0\n        },\n        {\n            begin: \"^__DATA__$\",\n            end: \"^__END__$\",\n            subLanguage: \"mojolicious\",\n            contains: [\n                {\n                    begin: \"^@@.*\",\n                    end: \"$\",\n                    className: \"comment\"\n                }\n            ]\n        }\n    ];\n    SUBST.contains = PERL_DEFAULT_CONTAINS;\n    METHOD.contains = PERL_DEFAULT_CONTAINS;\n    return {\n        name: \"Perl\",\n        aliases: [\n            \"pl\",\n            \"pm\"\n        ],\n        keywords: PERL_KEYWORDS,\n        contains: PERL_DEFAULT_CONTAINS\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/perl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/php-template.js":
/*!****************************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/php-template.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ phpTemplate)\n/* harmony export */ });\n/*\nLanguage: PHP Template\nRequires: xml.js, php.js\nAuthor: Josh Goebel <hello@joshgoebel.com>\nWebsite: https://www.php.net\nCategory: common\n*/ function phpTemplate(hljs) {\n    return {\n        name: \"PHP template\",\n        subLanguage: \"xml\",\n        contains: [\n            {\n                begin: /<\\?(php|=)?/,\n                end: /\\?>/,\n                subLanguage: \"php\",\n                contains: [\n                    // We don't want the php closing tag ?> to close the PHP block when\n                    // inside any of the following blocks:\n                    {\n                        begin: \"/\\\\*\",\n                        end: \"\\\\*/\",\n                        skip: true\n                    },\n                    {\n                        begin: 'b\"',\n                        end: '\"',\n                        skip: true\n                    },\n                    {\n                        begin: \"b'\",\n                        end: \"'\",\n                        skip: true\n                    },\n                    hljs.inherit(hljs.APOS_STRING_MODE, {\n                        illegal: null,\n                        className: null,\n                        contains: null,\n                        skip: true\n                    }),\n                    hljs.inherit(hljs.QUOTE_STRING_MODE, {\n                        illegal: null,\n                        className: null,\n                        contains: null,\n                        skip: true\n                    })\n                ]\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9waHAtdGVtcGxhdGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7QUFNQSxHQUVBLFNBQVNBLFlBQVlDLElBQUk7SUFDdkIsT0FBTztRQUNMQyxNQUFNO1FBQ05DLGFBQWE7UUFDYkMsVUFBVTtZQUNSO2dCQUNFQyxPQUFPO2dCQUNQQyxLQUFLO2dCQUNMSCxhQUFhO2dCQUNiQyxVQUFVO29CQUNSLG1FQUFtRTtvQkFDbkUsc0NBQXNDO29CQUN0Qzt3QkFDRUMsT0FBTzt3QkFDUEMsS0FBSzt3QkFDTEMsTUFBTTtvQkFDUjtvQkFDQTt3QkFDRUYsT0FBTzt3QkFDUEMsS0FBSzt3QkFDTEMsTUFBTTtvQkFDUjtvQkFDQTt3QkFDRUYsT0FBTzt3QkFDUEMsS0FBSzt3QkFDTEMsTUFBTTtvQkFDUjtvQkFDQU4sS0FBS08sT0FBTyxDQUFDUCxLQUFLUSxnQkFBZ0IsRUFBRTt3QkFDbENDLFNBQVM7d0JBQ1RDLFdBQVc7d0JBQ1hQLFVBQVU7d0JBQ1ZHLE1BQU07b0JBQ1I7b0JBQ0FOLEtBQUtPLE9BQU8sQ0FBQ1AsS0FBS1csaUJBQWlCLEVBQUU7d0JBQ25DRixTQUFTO3dCQUNUQyxXQUFXO3dCQUNYUCxVQUFVO3dCQUNWRyxNQUFNO29CQUNSO2lCQUNEO1lBQ0g7U0FDRDtJQUNIO0FBQ0Y7QUFFa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYXJkd2FyZS1kb2MtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9oaWdobGlnaHQuanMvZXMvbGFuZ3VhZ2VzL3BocC10ZW1wbGF0ZS5qcz8wMmE0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5MYW5ndWFnZTogUEhQIFRlbXBsYXRlXG5SZXF1aXJlczogeG1sLmpzLCBwaHAuanNcbkF1dGhvcjogSm9zaCBHb2ViZWwgPGhlbGxvQGpvc2hnb2ViZWwuY29tPlxuV2Vic2l0ZTogaHR0cHM6Ly93d3cucGhwLm5ldFxuQ2F0ZWdvcnk6IGNvbW1vblxuKi9cblxuZnVuY3Rpb24gcGhwVGVtcGxhdGUoaGxqcykge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IFwiUEhQIHRlbXBsYXRlXCIsXG4gICAgc3ViTGFuZ3VhZ2U6ICd4bWwnLFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICB7XG4gICAgICAgIGJlZ2luOiAvPFxcPyhwaHB8PSk/LyxcbiAgICAgICAgZW5kOiAvXFw/Pi8sXG4gICAgICAgIHN1Ykxhbmd1YWdlOiAncGhwJyxcbiAgICAgICAgY29udGFpbnM6IFtcbiAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRoZSBwaHAgY2xvc2luZyB0YWcgPz4gdG8gY2xvc2UgdGhlIFBIUCBibG9jayB3aGVuXG4gICAgICAgICAgLy8gaW5zaWRlIGFueSBvZiB0aGUgZm9sbG93aW5nIGJsb2NrczpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBiZWdpbjogJy9cXFxcKicsXG4gICAgICAgICAgICBlbmQ6ICdcXFxcKi8nLFxuICAgICAgICAgICAgc2tpcDogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgYmVnaW46ICdiXCInLFxuICAgICAgICAgICAgZW5kOiAnXCInLFxuICAgICAgICAgICAgc2tpcDogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgYmVnaW46ICdiXFwnJyxcbiAgICAgICAgICAgIGVuZDogJ1xcJycsXG4gICAgICAgICAgICBza2lwOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBobGpzLmluaGVyaXQoaGxqcy5BUE9TX1NUUklOR19NT0RFLCB7XG4gICAgICAgICAgICBpbGxlZ2FsOiBudWxsLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBudWxsLFxuICAgICAgICAgICAgY29udGFpbnM6IG51bGwsXG4gICAgICAgICAgICBza2lwOiB0cnVlXG4gICAgICAgICAgfSksXG4gICAgICAgICAgaGxqcy5pbmhlcml0KGhsanMuUVVPVEVfU1RSSU5HX01PREUsIHtcbiAgICAgICAgICAgIGlsbGVnYWw6IG51bGwsXG4gICAgICAgICAgICBjbGFzc05hbWU6IG51bGwsXG4gICAgICAgICAgICBjb250YWluczogbnVsbCxcbiAgICAgICAgICAgIHNraXA6IHRydWVcbiAgICAgICAgICB9KVxuICAgICAgICBdXG4gICAgICB9XG4gICAgXVxuICB9O1xufVxuXG5leHBvcnQgeyBwaHBUZW1wbGF0ZSBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsicGhwVGVtcGxhdGUiLCJobGpzIiwibmFtZSIsInN1Ykxhbmd1YWdlIiwiY29udGFpbnMiLCJiZWdpbiIsImVuZCIsInNraXAiLCJpbmhlcml0IiwiQVBPU19TVFJJTkdfTU9ERSIsImlsbGVnYWwiLCJjbGFzc05hbWUiLCJRVU9URV9TVFJJTkdfTU9ERSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/php-template.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/php.js":
/*!*******************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/php.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ php)\n/* harmony export */ });\n/*\nLanguage: PHP\nAuthor: Victor Karamzin <Victor.Karamzin@enterra-inc.com>\nContributors: Evgeny Stepanischev <imbolk@gmail.com>, Ivan Sagalaev <maniac@softwaremaniacs.org>\nWebsite: https://www.php.net\nCategory: common\n*/ /**\n * @param {HLJSApi} hljs\n * @returns {LanguageDetail}\n * */ function php(hljs) {\n    const regex = hljs.regex;\n    // negative look-ahead tries to avoid matching patterns that are not\n    // Perl at all like $ident$, @ident@, etc.\n    const NOT_PERL_ETC = /(?![A-Za-z0-9])(?![$])/;\n    const IDENT_RE = regex.concat(/[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/, NOT_PERL_ETC);\n    // Will not detect camelCase classes\n    const PASCAL_CASE_CLASS_NAME_RE = regex.concat(/(\\\\?[A-Z][a-z0-9_\\x7f-\\xff]+|\\\\?[A-Z]+(?=[A-Z][a-z0-9_\\x7f-\\xff])){1,}/, NOT_PERL_ETC);\n    const UPCASE_NAME_RE = regex.concat(/[A-Z]+/, NOT_PERL_ETC);\n    const VARIABLE = {\n        scope: \"variable\",\n        match: \"\\\\$+\" + IDENT_RE\n    };\n    const PREPROCESSOR = {\n        scope: \"meta\",\n        variants: [\n            {\n                begin: /<\\?php/,\n                relevance: 10\n            },\n            {\n                begin: /<\\?=/\n            },\n            // less relevant per PSR-1 which says not to use short-tags\n            {\n                begin: /<\\?/,\n                relevance: 0.1\n            },\n            {\n                begin: /\\?>/\n            } // end php tag\n        ]\n    };\n    const SUBST = {\n        scope: \"subst\",\n        variants: [\n            {\n                begin: /\\$\\w+/\n            },\n            {\n                begin: /\\{\\$/,\n                end: /\\}/\n            }\n        ]\n    };\n    const SINGLE_QUOTED = hljs.inherit(hljs.APOS_STRING_MODE, {\n        illegal: null\n    });\n    const DOUBLE_QUOTED = hljs.inherit(hljs.QUOTE_STRING_MODE, {\n        illegal: null,\n        contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST)\n    });\n    const HEREDOC = {\n        begin: /<<<[ \\t]*(?:(\\w+)|\"(\\w+)\")\\n/,\n        end: /[ \\t]*(\\w+)\\b/,\n        contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST),\n        \"on:begin\": (m, resp)=>{\n            resp.data._beginMatch = m[1] || m[2];\n        },\n        \"on:end\": (m, resp)=>{\n            if (resp.data._beginMatch !== m[1]) resp.ignoreMatch();\n        }\n    };\n    const NOWDOC = hljs.END_SAME_AS_BEGIN({\n        begin: /<<<[ \\t]*'(\\w+)'\\n/,\n        end: /[ \\t]*(\\w+)\\b/\n    });\n    // list of valid whitespaces because non-breaking space might be part of a IDENT_RE\n    const WHITESPACE = \"[ \t\\n]\";\n    const STRING = {\n        scope: \"string\",\n        variants: [\n            DOUBLE_QUOTED,\n            SINGLE_QUOTED,\n            HEREDOC,\n            NOWDOC\n        ]\n    };\n    const NUMBER = {\n        scope: \"number\",\n        variants: [\n            {\n                begin: `\\\\b0[bB][01]+(?:_[01]+)*\\\\b`\n            },\n            {\n                begin: `\\\\b0[oO][0-7]+(?:_[0-7]+)*\\\\b`\n            },\n            {\n                begin: `\\\\b0[xX][\\\\da-fA-F]+(?:_[\\\\da-fA-F]+)*\\\\b`\n            },\n            // Decimals w/ underscore support, with optional fragments and scientific exponent (e) suffix.\n            {\n                begin: `(?:\\\\b\\\\d+(?:_\\\\d+)*(\\\\.(?:\\\\d+(?:_\\\\d+)*))?|\\\\B\\\\.\\\\d+)(?:[eE][+-]?\\\\d+)?`\n            }\n        ],\n        relevance: 0\n    };\n    const LITERALS = [\n        \"false\",\n        \"null\",\n        \"true\"\n    ];\n    const KWS = [\n        // Magic constants:\n        // <https://www.php.net/manual/en/language.constants.predefined.php>\n        \"__CLASS__\",\n        \"__DIR__\",\n        \"__FILE__\",\n        \"__FUNCTION__\",\n        \"__COMPILER_HALT_OFFSET__\",\n        \"__LINE__\",\n        \"__METHOD__\",\n        \"__NAMESPACE__\",\n        \"__TRAIT__\",\n        // Function that look like language construct or language construct that look like function:\n        // List of keywords that may not require parenthesis\n        \"die\",\n        \"echo\",\n        \"exit\",\n        \"include\",\n        \"include_once\",\n        \"print\",\n        \"require\",\n        \"require_once\",\n        // These are not language construct (function) but operate on the currently-executing function and can access the current symbol table\n        // 'compact extract func_get_arg func_get_args func_num_args get_called_class get_parent_class ' +\n        // Other keywords:\n        // <https://www.php.net/manual/en/reserved.php>\n        // <https://www.php.net/manual/en/language.types.type-juggling.php>\n        \"array\",\n        \"abstract\",\n        \"and\",\n        \"as\",\n        \"binary\",\n        \"bool\",\n        \"boolean\",\n        \"break\",\n        \"callable\",\n        \"case\",\n        \"catch\",\n        \"class\",\n        \"clone\",\n        \"const\",\n        \"continue\",\n        \"declare\",\n        \"default\",\n        \"do\",\n        \"double\",\n        \"else\",\n        \"elseif\",\n        \"empty\",\n        \"enddeclare\",\n        \"endfor\",\n        \"endforeach\",\n        \"endif\",\n        \"endswitch\",\n        \"endwhile\",\n        \"enum\",\n        \"eval\",\n        \"extends\",\n        \"final\",\n        \"finally\",\n        \"float\",\n        \"for\",\n        \"foreach\",\n        \"from\",\n        \"global\",\n        \"goto\",\n        \"if\",\n        \"implements\",\n        \"instanceof\",\n        \"insteadof\",\n        \"int\",\n        \"integer\",\n        \"interface\",\n        \"isset\",\n        \"iterable\",\n        \"list\",\n        \"match|0\",\n        \"mixed\",\n        \"new\",\n        \"never\",\n        \"object\",\n        \"or\",\n        \"private\",\n        \"protected\",\n        \"public\",\n        \"readonly\",\n        \"real\",\n        \"return\",\n        \"string\",\n        \"switch\",\n        \"throw\",\n        \"trait\",\n        \"try\",\n        \"unset\",\n        \"use\",\n        \"var\",\n        \"void\",\n        \"while\",\n        \"xor\",\n        \"yield\"\n    ];\n    const BUILT_INS = [\n        // Standard PHP library:\n        // <https://www.php.net/manual/en/book.spl.php>\n        \"Error|0\",\n        \"AppendIterator\",\n        \"ArgumentCountError\",\n        \"ArithmeticError\",\n        \"ArrayIterator\",\n        \"ArrayObject\",\n        \"AssertionError\",\n        \"BadFunctionCallException\",\n        \"BadMethodCallException\",\n        \"CachingIterator\",\n        \"CallbackFilterIterator\",\n        \"CompileError\",\n        \"Countable\",\n        \"DirectoryIterator\",\n        \"DivisionByZeroError\",\n        \"DomainException\",\n        \"EmptyIterator\",\n        \"ErrorException\",\n        \"Exception\",\n        \"FilesystemIterator\",\n        \"FilterIterator\",\n        \"GlobIterator\",\n        \"InfiniteIterator\",\n        \"InvalidArgumentException\",\n        \"IteratorIterator\",\n        \"LengthException\",\n        \"LimitIterator\",\n        \"LogicException\",\n        \"MultipleIterator\",\n        \"NoRewindIterator\",\n        \"OutOfBoundsException\",\n        \"OutOfRangeException\",\n        \"OuterIterator\",\n        \"OverflowException\",\n        \"ParentIterator\",\n        \"ParseError\",\n        \"RangeException\",\n        \"RecursiveArrayIterator\",\n        \"RecursiveCachingIterator\",\n        \"RecursiveCallbackFilterIterator\",\n        \"RecursiveDirectoryIterator\",\n        \"RecursiveFilterIterator\",\n        \"RecursiveIterator\",\n        \"RecursiveIteratorIterator\",\n        \"RecursiveRegexIterator\",\n        \"RecursiveTreeIterator\",\n        \"RegexIterator\",\n        \"RuntimeException\",\n        \"SeekableIterator\",\n        \"SplDoublyLinkedList\",\n        \"SplFileInfo\",\n        \"SplFileObject\",\n        \"SplFixedArray\",\n        \"SplHeap\",\n        \"SplMaxHeap\",\n        \"SplMinHeap\",\n        \"SplObjectStorage\",\n        \"SplObserver\",\n        \"SplPriorityQueue\",\n        \"SplQueue\",\n        \"SplStack\",\n        \"SplSubject\",\n        \"SplTempFileObject\",\n        \"TypeError\",\n        \"UnderflowException\",\n        \"UnexpectedValueException\",\n        \"UnhandledMatchError\",\n        // Reserved interfaces:\n        // <https://www.php.net/manual/en/reserved.interfaces.php>\n        \"ArrayAccess\",\n        \"BackedEnum\",\n        \"Closure\",\n        \"Fiber\",\n        \"Generator\",\n        \"Iterator\",\n        \"IteratorAggregate\",\n        \"Serializable\",\n        \"Stringable\",\n        \"Throwable\",\n        \"Traversable\",\n        \"UnitEnum\",\n        \"WeakReference\",\n        \"WeakMap\",\n        // Reserved classes:\n        // <https://www.php.net/manual/en/reserved.classes.php>\n        \"Directory\",\n        \"__PHP_Incomplete_Class\",\n        \"parent\",\n        \"php_user_filter\",\n        \"self\",\n        \"static\",\n        \"stdClass\"\n    ];\n    /** Dual-case keywords\n   *\n   * [\"then\",\"FILE\"] =>\n   *     [\"then\", \"THEN\", \"FILE\", \"file\"]\n   *\n   * @param {string[]} items */ const dualCase = (items)=>{\n        /** @type string[] */ const result = [];\n        items.forEach((item)=>{\n            result.push(item);\n            if (item.toLowerCase() === item) {\n                result.push(item.toUpperCase());\n            } else {\n                result.push(item.toLowerCase());\n            }\n        });\n        return result;\n    };\n    const KEYWORDS = {\n        keyword: KWS,\n        literal: dualCase(LITERALS),\n        built_in: BUILT_INS\n    };\n    /**\n   * @param {string[]} items */ const normalizeKeywords = (items)=>{\n        return items.map((item)=>{\n            return item.replace(/\\|\\d+$/, \"\");\n        });\n    };\n    const CONSTRUCTOR_CALL = {\n        variants: [\n            {\n                match: [\n                    /new/,\n                    regex.concat(WHITESPACE, \"+\"),\n                    // to prevent built ins from being confused as the class constructor call\n                    regex.concat(\"(?!\", normalizeKeywords(BUILT_INS).join(\"\\\\b|\"), \"\\\\b)\"),\n                    PASCAL_CASE_CLASS_NAME_RE\n                ],\n                scope: {\n                    1: \"keyword\",\n                    4: \"title.class\"\n                }\n            }\n        ]\n    };\n    const CONSTANT_REFERENCE = regex.concat(IDENT_RE, \"\\\\b(?!\\\\()\");\n    const LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON = {\n        variants: [\n            {\n                match: [\n                    regex.concat(/::/, regex.lookahead(/(?!class\\b)/)),\n                    CONSTANT_REFERENCE\n                ],\n                scope: {\n                    2: \"variable.constant\"\n                }\n            },\n            {\n                match: [\n                    /::/,\n                    /class/\n                ],\n                scope: {\n                    2: \"variable.language\"\n                }\n            },\n            {\n                match: [\n                    PASCAL_CASE_CLASS_NAME_RE,\n                    regex.concat(/::/, regex.lookahead(/(?!class\\b)/)),\n                    CONSTANT_REFERENCE\n                ],\n                scope: {\n                    1: \"title.class\",\n                    3: \"variable.constant\"\n                }\n            },\n            {\n                match: [\n                    PASCAL_CASE_CLASS_NAME_RE,\n                    regex.concat(\"::\", regex.lookahead(/(?!class\\b)/))\n                ],\n                scope: {\n                    1: \"title.class\"\n                }\n            },\n            {\n                match: [\n                    PASCAL_CASE_CLASS_NAME_RE,\n                    /::/,\n                    /class/\n                ],\n                scope: {\n                    1: \"title.class\",\n                    3: \"variable.language\"\n                }\n            }\n        ]\n    };\n    const NAMED_ARGUMENT = {\n        scope: \"attr\",\n        match: regex.concat(IDENT_RE, regex.lookahead(\":\"), regex.lookahead(/(?!::)/))\n    };\n    const PARAMS_MODE = {\n        relevance: 0,\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: KEYWORDS,\n        contains: [\n            NAMED_ARGUMENT,\n            VARIABLE,\n            LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,\n            hljs.C_BLOCK_COMMENT_MODE,\n            STRING,\n            NUMBER,\n            CONSTRUCTOR_CALL\n        ]\n    };\n    const FUNCTION_INVOKE = {\n        relevance: 0,\n        match: [\n            /\\b/,\n            // to prevent keywords from being confused as the function title\n            regex.concat(\"(?!fn\\\\b|function\\\\b|\", normalizeKeywords(KWS).join(\"\\\\b|\"), \"|\", normalizeKeywords(BUILT_INS).join(\"\\\\b|\"), \"\\\\b)\"),\n            IDENT_RE,\n            regex.concat(WHITESPACE, \"*\"),\n            regex.lookahead(/(?=\\()/)\n        ],\n        scope: {\n            3: \"title.function.invoke\"\n        },\n        contains: [\n            PARAMS_MODE\n        ]\n    };\n    PARAMS_MODE.contains.push(FUNCTION_INVOKE);\n    const ATTRIBUTE_CONTAINS = [\n        NAMED_ARGUMENT,\n        LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,\n        hljs.C_BLOCK_COMMENT_MODE,\n        STRING,\n        NUMBER,\n        CONSTRUCTOR_CALL\n    ];\n    const ATTRIBUTES = {\n        begin: regex.concat(/#\\[\\s*\\\\?/, regex.either(PASCAL_CASE_CLASS_NAME_RE, UPCASE_NAME_RE)),\n        beginScope: \"meta\",\n        end: /]/,\n        endScope: \"meta\",\n        keywords: {\n            literal: LITERALS,\n            keyword: [\n                \"new\",\n                \"array\"\n            ]\n        },\n        contains: [\n            {\n                begin: /\\[/,\n                end: /]/,\n                keywords: {\n                    literal: LITERALS,\n                    keyword: [\n                        \"new\",\n                        \"array\"\n                    ]\n                },\n                contains: [\n                    \"self\",\n                    ...ATTRIBUTE_CONTAINS\n                ]\n            },\n            ...ATTRIBUTE_CONTAINS,\n            {\n                scope: \"meta\",\n                variants: [\n                    {\n                        match: PASCAL_CASE_CLASS_NAME_RE\n                    },\n                    {\n                        match: UPCASE_NAME_RE\n                    }\n                ]\n            }\n        ]\n    };\n    return {\n        case_insensitive: false,\n        keywords: KEYWORDS,\n        contains: [\n            ATTRIBUTES,\n            hljs.HASH_COMMENT_MODE,\n            hljs.COMMENT(\"//\", \"$\"),\n            hljs.COMMENT(\"/\\\\*\", \"\\\\*/\", {\n                contains: [\n                    {\n                        scope: \"doctag\",\n                        match: \"@[A-Za-z]+\"\n                    }\n                ]\n            }),\n            {\n                match: /__halt_compiler\\(\\);/,\n                keywords: \"__halt_compiler\",\n                starts: {\n                    scope: \"comment\",\n                    end: hljs.MATCH_NOTHING_RE,\n                    contains: [\n                        {\n                            match: /\\?>/,\n                            scope: \"meta\",\n                            endsParent: true\n                        }\n                    ]\n                }\n            },\n            PREPROCESSOR,\n            {\n                scope: \"variable.language\",\n                match: /\\$this\\b/\n            },\n            VARIABLE,\n            FUNCTION_INVOKE,\n            LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,\n            {\n                match: [\n                    /const/,\n                    /\\s/,\n                    IDENT_RE\n                ],\n                scope: {\n                    1: \"keyword\",\n                    3: \"variable.constant\"\n                }\n            },\n            CONSTRUCTOR_CALL,\n            {\n                scope: \"function\",\n                relevance: 0,\n                beginKeywords: \"fn function\",\n                end: /[;{]/,\n                excludeEnd: true,\n                illegal: \"[$%\\\\[]\",\n                contains: [\n                    {\n                        beginKeywords: \"use\"\n                    },\n                    hljs.UNDERSCORE_TITLE_MODE,\n                    {\n                        begin: \"=>\",\n                        endsParent: true\n                    },\n                    {\n                        scope: \"params\",\n                        begin: \"\\\\(\",\n                        end: \"\\\\)\",\n                        excludeBegin: true,\n                        excludeEnd: true,\n                        keywords: KEYWORDS,\n                        contains: [\n                            \"self\",\n                            ATTRIBUTES,\n                            VARIABLE,\n                            LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,\n                            hljs.C_BLOCK_COMMENT_MODE,\n                            STRING,\n                            NUMBER\n                        ]\n                    }\n                ]\n            },\n            {\n                scope: \"class\",\n                variants: [\n                    {\n                        beginKeywords: \"enum\",\n                        illegal: /[($\"]/\n                    },\n                    {\n                        beginKeywords: \"class interface trait\",\n                        illegal: /[:($\"]/\n                    }\n                ],\n                relevance: 0,\n                end: /\\{/,\n                excludeEnd: true,\n                contains: [\n                    {\n                        beginKeywords: \"extends implements\"\n                    },\n                    hljs.UNDERSCORE_TITLE_MODE\n                ]\n            },\n            // both use and namespace still use \"old style\" rules (vs multi-match)\n            // because the namespace name can include `\\` and we still want each\n            // element to be treated as its own *individual* title\n            {\n                beginKeywords: \"namespace\",\n                relevance: 0,\n                end: \";\",\n                illegal: /[.']/,\n                contains: [\n                    hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, {\n                        scope: \"title.class\"\n                    })\n                ]\n            },\n            {\n                beginKeywords: \"use\",\n                relevance: 0,\n                end: \";\",\n                contains: [\n                    // TODO: title.function vs title.class\n                    {\n                        match: /\\b(as|const|function)\\b/,\n                        scope: \"keyword\"\n                    },\n                    // TODO: could be title.class or title.function\n                    hljs.UNDERSCORE_TITLE_MODE\n                ]\n            },\n            STRING,\n            NUMBER\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/php.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/plaintext.js":
/*!*************************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/plaintext.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ plaintext)\n/* harmony export */ });\n/*\nLanguage: Plain text\nAuthor: Egor Rogov (e.rogov@postgrespro.ru)\nDescription: Plain text without any highlighting.\nCategory: common\n*/ function plaintext(hljs) {\n    return {\n        name: \"Plain text\",\n        aliases: [\n            \"text\",\n            \"txt\"\n        ],\n        disableAutodetect: true\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9wbGFpbnRleHQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7OztBQUtBLEdBRUEsU0FBU0EsVUFBVUMsSUFBSTtJQUNyQixPQUFPO1FBQ0xDLE1BQU07UUFDTkMsU0FBUztZQUNQO1lBQ0E7U0FDRDtRQUNEQyxtQkFBbUI7SUFDckI7QUFDRjtBQUVnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2hhcmR3YXJlLWRvYy1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL2hpZ2hsaWdodC5qcy9lcy9sYW5ndWFnZXMvcGxhaW50ZXh0LmpzP2Q5Y2UiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbkxhbmd1YWdlOiBQbGFpbiB0ZXh0XG5BdXRob3I6IEVnb3IgUm9nb3YgKGUucm9nb3ZAcG9zdGdyZXNwcm8ucnUpXG5EZXNjcmlwdGlvbjogUGxhaW4gdGV4dCB3aXRob3V0IGFueSBoaWdobGlnaHRpbmcuXG5DYXRlZ29yeTogY29tbW9uXG4qL1xuXG5mdW5jdGlvbiBwbGFpbnRleHQoaGxqcykge1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdQbGFpbiB0ZXh0JyxcbiAgICBhbGlhc2VzOiBbXG4gICAgICAndGV4dCcsXG4gICAgICAndHh0J1xuICAgIF0sXG4gICAgZGlzYWJsZUF1dG9kZXRlY3Q6IHRydWVcbiAgfTtcbn1cblxuZXhwb3J0IHsgcGxhaW50ZXh0IGFzIGRlZmF1bHQgfTtcbiJdLCJuYW1lcyI6WyJwbGFpbnRleHQiLCJobGpzIiwibmFtZSIsImFsaWFzZXMiLCJkaXNhYmxlQXV0b2RldGVjdCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/plaintext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/python-repl.js":
/*!***************************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/python-repl.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ pythonRepl)\n/* harmony export */ });\n/*\nLanguage: Python REPL\nRequires: python.js\nAuthor: Josh Goebel <hello@joshgoebel.com>\nCategory: common\n*/ function pythonRepl(hljs) {\n    return {\n        aliases: [\n            \"pycon\"\n        ],\n        contains: [\n            {\n                className: \"meta.prompt\",\n                starts: {\n                    // a space separates the REPL prefix from the actual code\n                    // this is purely for cleaner HTML output\n                    end: / |$/,\n                    starts: {\n                        end: \"$\",\n                        subLanguage: \"python\"\n                    }\n                },\n                variants: [\n                    {\n                        begin: /^>>>(?=[ ]|$)/\n                    },\n                    {\n                        begin: /^\\.\\.\\.(?=[ ]|$)/\n                    }\n                ]\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9weXRob24tcmVwbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7O0FBS0EsR0FFQSxTQUFTQSxXQUFXQyxJQUFJO0lBQ3RCLE9BQU87UUFDTEMsU0FBUztZQUFFO1NBQVM7UUFDcEJDLFVBQVU7WUFDUjtnQkFDRUMsV0FBVztnQkFDWEMsUUFBUTtvQkFDTix5REFBeUQ7b0JBQ3pELHlDQUF5QztvQkFDekNDLEtBQUs7b0JBQ0xELFFBQVE7d0JBQ05DLEtBQUs7d0JBQ0xDLGFBQWE7b0JBQ2Y7Z0JBQ0Y7Z0JBQ0FDLFVBQVU7b0JBQ1I7d0JBQUVDLE9BQU87b0JBQWdCO29CQUN6Qjt3QkFBRUEsT0FBTztvQkFBbUI7aUJBQzdCO1lBQ0g7U0FDRDtJQUNIO0FBQ0Y7QUFFaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYXJkd2FyZS1kb2MtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9oaWdobGlnaHQuanMvZXMvbGFuZ3VhZ2VzL3B5dGhvbi1yZXBsLmpzPzcxNDgiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbkxhbmd1YWdlOiBQeXRob24gUkVQTFxuUmVxdWlyZXM6IHB5dGhvbi5qc1xuQXV0aG9yOiBKb3NoIEdvZWJlbCA8aGVsbG9Aam9zaGdvZWJlbC5jb20+XG5DYXRlZ29yeTogY29tbW9uXG4qL1xuXG5mdW5jdGlvbiBweXRob25SZXBsKGhsanMpIHtcbiAgcmV0dXJuIHtcbiAgICBhbGlhc2VzOiBbICdweWNvbicgXSxcbiAgICBjb250YWluczogW1xuICAgICAge1xuICAgICAgICBjbGFzc05hbWU6ICdtZXRhLnByb21wdCcsXG4gICAgICAgIHN0YXJ0czoge1xuICAgICAgICAgIC8vIGEgc3BhY2Ugc2VwYXJhdGVzIHRoZSBSRVBMIHByZWZpeCBmcm9tIHRoZSBhY3R1YWwgY29kZVxuICAgICAgICAgIC8vIHRoaXMgaXMgcHVyZWx5IGZvciBjbGVhbmVyIEhUTUwgb3V0cHV0XG4gICAgICAgICAgZW5kOiAvIHwkLyxcbiAgICAgICAgICBzdGFydHM6IHtcbiAgICAgICAgICAgIGVuZDogJyQnLFxuICAgICAgICAgICAgc3ViTGFuZ3VhZ2U6ICdweXRob24nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB2YXJpYW50czogW1xuICAgICAgICAgIHsgYmVnaW46IC9ePj4+KD89WyBdfCQpLyB9LFxuICAgICAgICAgIHsgYmVnaW46IC9eXFwuXFwuXFwuKD89WyBdfCQpLyB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICBdXG4gIH07XG59XG5cbmV4cG9ydCB7IHB5dGhvblJlcGwgYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbInB5dGhvblJlcGwiLCJobGpzIiwiYWxpYXNlcyIsImNvbnRhaW5zIiwiY2xhc3NOYW1lIiwic3RhcnRzIiwiZW5kIiwic3ViTGFuZ3VhZ2UiLCJ2YXJpYW50cyIsImJlZ2luIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/python-repl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/python.js":
/*!**********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/python.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ python)\n/* harmony export */ });\n/*\nLanguage: Python\nDescription: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.\nWebsite: https://www.python.org\nCategory: common\n*/ function python(hljs) {\n    const regex = hljs.regex;\n    const IDENT_RE = /[\\p{XID_Start}_]\\p{XID_Continue}*/u;\n    const RESERVED_WORDS = [\n        \"and\",\n        \"as\",\n        \"assert\",\n        \"async\",\n        \"await\",\n        \"break\",\n        \"case\",\n        \"class\",\n        \"continue\",\n        \"def\",\n        \"del\",\n        \"elif\",\n        \"else\",\n        \"except\",\n        \"finally\",\n        \"for\",\n        \"from\",\n        \"global\",\n        \"if\",\n        \"import\",\n        \"in\",\n        \"is\",\n        \"lambda\",\n        \"match\",\n        \"nonlocal|10\",\n        \"not\",\n        \"or\",\n        \"pass\",\n        \"raise\",\n        \"return\",\n        \"try\",\n        \"while\",\n        \"with\",\n        \"yield\"\n    ];\n    const BUILT_INS = [\n        \"__import__\",\n        \"abs\",\n        \"all\",\n        \"any\",\n        \"ascii\",\n        \"bin\",\n        \"bool\",\n        \"breakpoint\",\n        \"bytearray\",\n        \"bytes\",\n        \"callable\",\n        \"chr\",\n        \"classmethod\",\n        \"compile\",\n        \"complex\",\n        \"delattr\",\n        \"dict\",\n        \"dir\",\n        \"divmod\",\n        \"enumerate\",\n        \"eval\",\n        \"exec\",\n        \"filter\",\n        \"float\",\n        \"format\",\n        \"frozenset\",\n        \"getattr\",\n        \"globals\",\n        \"hasattr\",\n        \"hash\",\n        \"help\",\n        \"hex\",\n        \"id\",\n        \"input\",\n        \"int\",\n        \"isinstance\",\n        \"issubclass\",\n        \"iter\",\n        \"len\",\n        \"list\",\n        \"locals\",\n        \"map\",\n        \"max\",\n        \"memoryview\",\n        \"min\",\n        \"next\",\n        \"object\",\n        \"oct\",\n        \"open\",\n        \"ord\",\n        \"pow\",\n        \"print\",\n        \"property\",\n        \"range\",\n        \"repr\",\n        \"reversed\",\n        \"round\",\n        \"set\",\n        \"setattr\",\n        \"slice\",\n        \"sorted\",\n        \"staticmethod\",\n        \"str\",\n        \"sum\",\n        \"super\",\n        \"tuple\",\n        \"type\",\n        \"vars\",\n        \"zip\"\n    ];\n    const LITERALS = [\n        \"__debug__\",\n        \"Ellipsis\",\n        \"False\",\n        \"None\",\n        \"NotImplemented\",\n        \"True\"\n    ];\n    // https://docs.python.org/3/library/typing.html\n    // TODO: Could these be supplemented by a CamelCase matcher in certain\n    // contexts, leaving these remaining only for relevance hinting?\n    const TYPES = [\n        \"Any\",\n        \"Callable\",\n        \"Coroutine\",\n        \"Dict\",\n        \"List\",\n        \"Literal\",\n        \"Generic\",\n        \"Optional\",\n        \"Sequence\",\n        \"Set\",\n        \"Tuple\",\n        \"Type\",\n        \"Union\"\n    ];\n    const KEYWORDS = {\n        $pattern: /[A-Za-z]\\w+|__\\w+__/,\n        keyword: RESERVED_WORDS,\n        built_in: BUILT_INS,\n        literal: LITERALS,\n        type: TYPES\n    };\n    const PROMPT = {\n        className: \"meta\",\n        begin: /^(>>>|\\.\\.\\.) /\n    };\n    const SUBST = {\n        className: \"subst\",\n        begin: /\\{/,\n        end: /\\}/,\n        keywords: KEYWORDS,\n        illegal: /#/\n    };\n    const LITERAL_BRACKET = {\n        begin: /\\{\\{/,\n        relevance: 0\n    };\n    const STRING = {\n        className: \"string\",\n        contains: [\n            hljs.BACKSLASH_ESCAPE\n        ],\n        variants: [\n            {\n                begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,\n                end: /'''/,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE,\n                    PROMPT\n                ],\n                relevance: 10\n            },\n            {\n                begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?\"\"\"/,\n                end: /\"\"\"/,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE,\n                    PROMPT\n                ],\n                relevance: 10\n            },\n            {\n                begin: /([fF][rR]|[rR][fF]|[fF])'''/,\n                end: /'''/,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE,\n                    PROMPT,\n                    LITERAL_BRACKET,\n                    SUBST\n                ]\n            },\n            {\n                begin: /([fF][rR]|[rR][fF]|[fF])\"\"\"/,\n                end: /\"\"\"/,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE,\n                    PROMPT,\n                    LITERAL_BRACKET,\n                    SUBST\n                ]\n            },\n            {\n                begin: /([uU]|[rR])'/,\n                end: /'/,\n                relevance: 10\n            },\n            {\n                begin: /([uU]|[rR])\"/,\n                end: /\"/,\n                relevance: 10\n            },\n            {\n                begin: /([bB]|[bB][rR]|[rR][bB])'/,\n                end: /'/\n            },\n            {\n                begin: /([bB]|[bB][rR]|[rR][bB])\"/,\n                end: /\"/\n            },\n            {\n                begin: /([fF][rR]|[rR][fF]|[fF])'/,\n                end: /'/,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE,\n                    LITERAL_BRACKET,\n                    SUBST\n                ]\n            },\n            {\n                begin: /([fF][rR]|[rR][fF]|[fF])\"/,\n                end: /\"/,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE,\n                    LITERAL_BRACKET,\n                    SUBST\n                ]\n            },\n            hljs.APOS_STRING_MODE,\n            hljs.QUOTE_STRING_MODE\n        ]\n    };\n    // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals\n    const digitpart = \"[0-9](_?[0-9])*\";\n    const pointfloat = `(\\\\b(${digitpart}))?\\\\.(${digitpart})|\\\\b(${digitpart})\\\\.`;\n    // Whitespace after a number (or any lexical token) is needed only if its absence\n    // would change the tokenization\n    // https://docs.python.org/3.9/reference/lexical_analysis.html#whitespace-between-tokens\n    // We deviate slightly, requiring a word boundary or a keyword\n    // to avoid accidentally recognizing *prefixes* (e.g., `0` in `0x41` or `08` or `0__1`)\n    const lookahead = `\\\\b|${RESERVED_WORDS.join(\"|\")}`;\n    const NUMBER = {\n        className: \"number\",\n        relevance: 0,\n        variants: [\n            // exponentfloat, pointfloat\n            // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals\n            // optionally imaginary\n            // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n            // Note: no leading \\b because floats can start with a decimal point\n            // and we don't want to mishandle e.g. `fn(.5)`,\n            // no trailing \\b for pointfloat because it can end with a decimal point\n            // and we don't want to mishandle e.g. `0..hex()`; this should be safe\n            // because both MUST contain a decimal point and so cannot be confused with\n            // the interior part of an identifier\n            {\n                begin: `(\\\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?(?=${lookahead})`\n            },\n            {\n                begin: `(${pointfloat})[jJ]?`\n            },\n            // decinteger, bininteger, octinteger, hexinteger\n            // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals\n            // optionally \"long\" in Python 2\n            // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals\n            // decinteger is optionally imaginary\n            // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n            {\n                begin: `\\\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${lookahead})`\n            },\n            {\n                begin: `\\\\b0[bB](_?[01])+[lL]?(?=${lookahead})`\n            },\n            {\n                begin: `\\\\b0[oO](_?[0-7])+[lL]?(?=${lookahead})`\n            },\n            {\n                begin: `\\\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${lookahead})`\n            },\n            // imagnumber (digitpart-based)\n            // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n            {\n                begin: `\\\\b(${digitpart})[jJ](?=${lookahead})`\n            }\n        ]\n    };\n    const COMMENT_TYPE = {\n        className: \"comment\",\n        begin: regex.lookahead(/# type:/),\n        end: /$/,\n        keywords: KEYWORDS,\n        contains: [\n            {\n                begin: /# type:/\n            },\n            // comment within a datatype comment includes no keywords\n            {\n                begin: /#/,\n                end: /\\b\\B/,\n                endsWithParent: true\n            }\n        ]\n    };\n    const PARAMS = {\n        className: \"params\",\n        variants: [\n            // Exclude params in functions without params\n            {\n                className: \"\",\n                begin: /\\(\\s*\\)/,\n                skip: true\n            },\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                excludeBegin: true,\n                excludeEnd: true,\n                keywords: KEYWORDS,\n                contains: [\n                    \"self\",\n                    PROMPT,\n                    NUMBER,\n                    STRING,\n                    hljs.HASH_COMMENT_MODE\n                ]\n            }\n        ]\n    };\n    SUBST.contains = [\n        STRING,\n        NUMBER,\n        PROMPT\n    ];\n    return {\n        name: \"Python\",\n        aliases: [\n            \"py\",\n            \"gyp\",\n            \"ipython\"\n        ],\n        unicodeRegex: true,\n        keywords: KEYWORDS,\n        illegal: /(<\\/|\\?)|=>/,\n        contains: [\n            PROMPT,\n            NUMBER,\n            {\n                // very common convention\n                scope: \"variable.language\",\n                match: /\\bself\\b/\n            },\n            {\n                // eat \"if\" prior to string so that it won't accidentally be\n                // labeled as an f-string\n                beginKeywords: \"if\",\n                relevance: 0\n            },\n            {\n                match: /\\bor\\b/,\n                scope: \"keyword\"\n            },\n            STRING,\n            COMMENT_TYPE,\n            hljs.HASH_COMMENT_MODE,\n            {\n                match: [\n                    /\\bdef/,\n                    /\\s+/,\n                    IDENT_RE\n                ],\n                scope: {\n                    1: \"keyword\",\n                    3: \"title.function\"\n                },\n                contains: [\n                    PARAMS\n                ]\n            },\n            {\n                variants: [\n                    {\n                        match: [\n                            /\\bclass/,\n                            /\\s+/,\n                            IDENT_RE,\n                            /\\s*/,\n                            /\\(\\s*/,\n                            IDENT_RE,\n                            /\\s*\\)/\n                        ]\n                    },\n                    {\n                        match: [\n                            /\\bclass/,\n                            /\\s+/,\n                            IDENT_RE\n                        ]\n                    }\n                ],\n                scope: {\n                    1: \"keyword\",\n                    3: \"title.class\",\n                    6: \"title.class.inherited\"\n                }\n            },\n            {\n                className: \"meta\",\n                begin: /^[\\t ]*@/,\n                end: /(?=#)|$/,\n                contains: [\n                    NUMBER,\n                    PARAMS,\n                    STRING\n                ]\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/python.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/r.js":
/*!*****************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/r.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ r)\n/* harmony export */ });\n/*\nLanguage: R\nDescription: R is a free software environment for statistical computing and graphics.\nAuthor: Joe Cheng <joe@rstudio.org>\nContributors: Konrad Rudolph <konrad.rudolph@gmail.com>\nWebsite: https://www.r-project.org\nCategory: common,scientific\n*/ /** @type LanguageFn */ function r(hljs) {\n    const regex = hljs.regex;\n    // Identifiers in R cannot start with `_`, but they can start with `.` if it\n    // is not immediately followed by a digit.\n    // R also supports quoted identifiers, which are near-arbitrary sequences\n    // delimited by backticks (`…`), which may contain escape sequences. These are\n    // handled in a separate mode. See `test/markup/r/names.txt` for examples.\n    // FIXME: Support Unicode identifiers.\n    const IDENT_RE = /(?:(?:[a-zA-Z]|\\.[._a-zA-Z])[._a-zA-Z0-9]*)|\\.(?!\\d)/;\n    const NUMBER_TYPES_RE = regex.either(// Special case: only hexadecimal binary powers can contain fractions\n    /0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/, // Hexadecimal numbers without fraction and optional binary power\n    /0[xX][0-9a-fA-F]+(?:[pP][+-]?\\d+)?[Li]?/, // Decimal numbers\n    /(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+)?[Li]?/);\n    const OPERATORS_RE = /[=!<>:]=|\\|\\||&&|:::?|<-|<<-|->>|->|\\|>|[-+*\\/?!$&|:<=>@^~]|\\*\\*/;\n    const PUNCTUATION_RE = regex.either(/[()]/, /[{}]/, /\\[\\[/, /[[\\]]/, /\\\\/, /,/);\n    return {\n        name: \"R\",\n        keywords: {\n            $pattern: IDENT_RE,\n            keyword: \"function if in break next repeat else for while\",\n            literal: \"NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 \" + \"NA_character_|10 NA_complex_|10\",\n            built_in: // Builtin constants\n            \"LETTERS letters month.abb month.name pi T F \" + \"abs acos acosh all any anyNA Arg as.call as.character \" + \"as.complex as.double as.environment as.integer as.logical \" + \"as.null.default as.numeric as.raw asin asinh atan atanh attr \" + \"attributes baseenv browser c call ceiling class Conj cos cosh \" + \"cospi cummax cummin cumprod cumsum digamma dim dimnames \" + \"emptyenv exp expression floor forceAndCall gamma gc.time \" + \"globalenv Im interactive invisible is.array is.atomic is.call \" + \"is.character is.complex is.double is.environment is.expression \" + \"is.finite is.function is.infinite is.integer is.language \" + \"is.list is.logical is.matrix is.na is.name is.nan is.null \" + \"is.numeric is.object is.pairlist is.raw is.recursive is.single \" + \"is.symbol lazyLoadDBfetch length lgamma list log max min \" + \"missing Mod names nargs nzchar oldClass on.exit pos.to.env \" + \"proc.time prod quote range Re rep retracemem return round \" + \"seq_along seq_len seq.int sign signif sin sinh sinpi sqrt \" + \"standardGeneric substitute sum switch tan tanh tanpi tracemem \" + \"trigamma trunc unclass untracemem UseMethod xtfrm\"\n        },\n        contains: [\n            // Roxygen comments\n            hljs.COMMENT(/#'/, /$/, {\n                contains: [\n                    {\n                        // Handle `@examples` separately to cause all subsequent code\n                        // until the next `@`-tag on its own line to be kept as-is,\n                        // preventing highlighting. This code is example R code, so nested\n                        // doctags shouldn’t be treated as such. See\n                        // `test/markup/r/roxygen.txt` for an example.\n                        scope: \"doctag\",\n                        match: /@examples/,\n                        starts: {\n                            end: regex.lookahead(regex.either(// end if another doc comment\n                            /\\n^#'\\s*(?=@[a-zA-Z]+)/, // or a line with no comment\n                            /\\n^(?!#')/)),\n                            endsParent: true\n                        }\n                    },\n                    {\n                        // Handle `@param` to highlight the parameter name following\n                        // after.\n                        scope: \"doctag\",\n                        begin: \"@param\",\n                        end: /$/,\n                        contains: [\n                            {\n                                scope: \"variable\",\n                                variants: [\n                                    {\n                                        match: IDENT_RE\n                                    },\n                                    {\n                                        match: /`(?:\\\\.|[^`\\\\])+`/\n                                    }\n                                ],\n                                endsParent: true\n                            }\n                        ]\n                    },\n                    {\n                        scope: \"doctag\",\n                        match: /@[a-zA-Z]+/\n                    },\n                    {\n                        scope: \"keyword\",\n                        match: /\\\\[a-zA-Z]+/\n                    }\n                ]\n            }),\n            hljs.HASH_COMMENT_MODE,\n            {\n                scope: \"string\",\n                contains: [\n                    hljs.BACKSLASH_ESCAPE\n                ],\n                variants: [\n                    hljs.END_SAME_AS_BEGIN({\n                        begin: /[rR]\"(-*)\\(/,\n                        end: /\\)(-*)\"/\n                    }),\n                    hljs.END_SAME_AS_BEGIN({\n                        begin: /[rR]\"(-*)\\{/,\n                        end: /\\}(-*)\"/\n                    }),\n                    hljs.END_SAME_AS_BEGIN({\n                        begin: /[rR]\"(-*)\\[/,\n                        end: /\\](-*)\"/\n                    }),\n                    hljs.END_SAME_AS_BEGIN({\n                        begin: /[rR]'(-*)\\(/,\n                        end: /\\)(-*)'/\n                    }),\n                    hljs.END_SAME_AS_BEGIN({\n                        begin: /[rR]'(-*)\\{/,\n                        end: /\\}(-*)'/\n                    }),\n                    hljs.END_SAME_AS_BEGIN({\n                        begin: /[rR]'(-*)\\[/,\n                        end: /\\](-*)'/\n                    }),\n                    {\n                        begin: '\"',\n                        end: '\"',\n                        relevance: 0\n                    },\n                    {\n                        begin: \"'\",\n                        end: \"'\",\n                        relevance: 0\n                    }\n                ]\n            },\n            // Matching numbers immediately following punctuation and operators is\n            // tricky since we need to look at the character ahead of a number to\n            // ensure the number is not part of an identifier, and we cannot use\n            // negative look-behind assertions. So instead we explicitly handle all\n            // possible combinations of (operator|punctuation), number.\n            // TODO: replace with negative look-behind when available\n            // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/ },\n            // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\\d+)?[Li]?/ },\n            // { begin: /(?<![a-zA-Z0-9._])(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?[Li]?/ }\n            {\n                relevance: 0,\n                variants: [\n                    {\n                        scope: {\n                            1: \"operator\",\n                            2: \"number\"\n                        },\n                        match: [\n                            OPERATORS_RE,\n                            NUMBER_TYPES_RE\n                        ]\n                    },\n                    {\n                        scope: {\n                            1: \"operator\",\n                            2: \"number\"\n                        },\n                        match: [\n                            /%[^%]*%/,\n                            NUMBER_TYPES_RE\n                        ]\n                    },\n                    {\n                        scope: {\n                            1: \"punctuation\",\n                            2: \"number\"\n                        },\n                        match: [\n                            PUNCTUATION_RE,\n                            NUMBER_TYPES_RE\n                        ]\n                    },\n                    {\n                        scope: {\n                            2: \"number\"\n                        },\n                        match: [\n                            /[^a-zA-Z0-9._]|^/,\n                            NUMBER_TYPES_RE\n                        ]\n                    }\n                ]\n            },\n            // Operators/punctuation when they're not directly followed by numbers\n            {\n                // Relevance boost for the most common assignment form.\n                scope: {\n                    3: \"operator\"\n                },\n                match: [\n                    IDENT_RE,\n                    /\\s+/,\n                    /<-/,\n                    /\\s+/\n                ]\n            },\n            {\n                scope: \"operator\",\n                relevance: 0,\n                variants: [\n                    {\n                        match: OPERATORS_RE\n                    },\n                    {\n                        match: /%[^%]*%/\n                    }\n                ]\n            },\n            {\n                scope: \"punctuation\",\n                relevance: 0,\n                match: PUNCTUATION_RE\n            },\n            {\n                // Escaped identifier\n                begin: \"`\",\n                end: \"`\",\n                contains: [\n                    {\n                        begin: /\\\\./\n                    }\n                ]\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7OztBQU9BLEdBRUEscUJBQXFCLEdBQ3JCLFNBQVNBLEVBQUVDLElBQUk7SUFDYixNQUFNQyxRQUFRRCxLQUFLQyxLQUFLO0lBQ3hCLDRFQUE0RTtJQUM1RSwwQ0FBMEM7SUFDMUMseUVBQXlFO0lBQ3pFLDhFQUE4RTtJQUM5RSwwRUFBMEU7SUFDMUUsc0NBQXNDO0lBQ3RDLE1BQU1DLFdBQVc7SUFDakIsTUFBTUMsa0JBQWtCRixNQUFNRyxNQUFNLENBQ2xDLHFFQUFxRTtJQUNyRSxpREFDQSxpRUFBaUU7SUFDakUsMkNBQ0Esa0JBQWtCO0lBQ2xCO0lBRUYsTUFBTUMsZUFBZTtJQUNyQixNQUFNQyxpQkFBaUJMLE1BQU1HLE1BQU0sQ0FDakMsUUFDQSxRQUNBLFFBQ0EsU0FDQSxNQUNBO0lBR0YsT0FBTztRQUNMRyxNQUFNO1FBRU5DLFVBQVU7WUFDUkMsVUFBVVA7WUFDVlEsU0FDRTtZQUNGQyxTQUNFLDJEQUNFO1lBQ0pDLFVBQ0Usb0JBQW9CO1lBQ3BCLGlEQUlFLDJEQUNBLCtEQUNBLGtFQUNBLG1FQUNBLDZEQUNBLDhEQUNBLG1FQUNBLG9FQUNBLDhEQUNBLCtEQUNBLG9FQUNBLDhEQUNBLGdFQUNBLCtEQUNBLCtEQUNBLG1FQUNBO1FBQ047UUFFQUMsVUFBVTtZQUNSLG1CQUFtQjtZQUNuQmIsS0FBS2MsT0FBTyxDQUNWLE1BQ0EsS0FDQTtnQkFBRUQsVUFBVTtvQkFDVjt3QkFDRSw2REFBNkQ7d0JBQzdELDJEQUEyRDt3QkFDM0Qsa0VBQWtFO3dCQUNsRSw0Q0FBNEM7d0JBQzVDLDhDQUE4Qzt3QkFDOUNFLE9BQU87d0JBQ1BDLE9BQU87d0JBQ1BDLFFBQVE7NEJBQ05DLEtBQUtqQixNQUFNa0IsU0FBUyxDQUFDbEIsTUFBTUcsTUFBTSxDQUMvQiw2QkFBNkI7NEJBQzdCLDBCQUNBLDRCQUE0Qjs0QkFDNUI7NEJBRUZnQixZQUFZO3dCQUNkO29CQUNGO29CQUNBO3dCQUNFLDREQUE0RDt3QkFDNUQsU0FBUzt3QkFDVEwsT0FBTzt3QkFDUE0sT0FBTzt3QkFDUEgsS0FBSzt3QkFDTEwsVUFBVTs0QkFDUjtnQ0FDRUUsT0FBTztnQ0FDUE8sVUFBVTtvQ0FDUjt3Q0FBRU4sT0FBT2Q7b0NBQVM7b0NBQ2xCO3dDQUFFYyxPQUFPO29DQUFvQjtpQ0FDOUI7Z0NBQ0RJLFlBQVk7NEJBQ2Q7eUJBQ0Q7b0JBQ0g7b0JBQ0E7d0JBQ0VMLE9BQU87d0JBQ1BDLE9BQU87b0JBQ1Q7b0JBQ0E7d0JBQ0VELE9BQU87d0JBQ1BDLE9BQU87b0JBQ1Q7aUJBQ0Q7WUFBQztZQUdKaEIsS0FBS3VCLGlCQUFpQjtZQUV0QjtnQkFDRVIsT0FBTztnQkFDUEYsVUFBVTtvQkFBRWIsS0FBS3dCLGdCQUFnQjtpQkFBRTtnQkFDbkNGLFVBQVU7b0JBQ1J0QixLQUFLeUIsaUJBQWlCLENBQUM7d0JBQ3JCSixPQUFPO3dCQUNQSCxLQUFLO29CQUNQO29CQUNBbEIsS0FBS3lCLGlCQUFpQixDQUFDO3dCQUNyQkosT0FBTzt3QkFDUEgsS0FBSztvQkFDUDtvQkFDQWxCLEtBQUt5QixpQkFBaUIsQ0FBQzt3QkFDckJKLE9BQU87d0JBQ1BILEtBQUs7b0JBQ1A7b0JBQ0FsQixLQUFLeUIsaUJBQWlCLENBQUM7d0JBQ3JCSixPQUFPO3dCQUNQSCxLQUFLO29CQUNQO29CQUNBbEIsS0FBS3lCLGlCQUFpQixDQUFDO3dCQUNyQkosT0FBTzt3QkFDUEgsS0FBSztvQkFDUDtvQkFDQWxCLEtBQUt5QixpQkFBaUIsQ0FBQzt3QkFDckJKLE9BQU87d0JBQ1BILEtBQUs7b0JBQ1A7b0JBQ0E7d0JBQ0VHLE9BQU87d0JBQ1BILEtBQUs7d0JBQ0xRLFdBQVc7b0JBQ2I7b0JBQ0E7d0JBQ0VMLE9BQU87d0JBQ1BILEtBQUs7d0JBQ0xRLFdBQVc7b0JBQ2I7aUJBQ0Q7WUFDSDtZQUVBLHNFQUFzRTtZQUN0RSxxRUFBcUU7WUFDckUsb0VBQW9FO1lBQ3BFLHVFQUF1RTtZQUN2RSwyREFBMkQ7WUFDM0QseURBQXlEO1lBQ3pELGdGQUFnRjtZQUNoRix3RUFBd0U7WUFDeEUseUVBQXlFO1lBQ3pFO2dCQUNFQSxXQUFXO2dCQUNYSixVQUFVO29CQUNSO3dCQUNFUCxPQUFPOzRCQUNMLEdBQUc7NEJBQ0gsR0FBRzt3QkFDTDt3QkFDQUMsT0FBTzs0QkFDTFg7NEJBQ0FGO3lCQUNEO29CQUNIO29CQUNBO3dCQUNFWSxPQUFPOzRCQUNMLEdBQUc7NEJBQ0gsR0FBRzt3QkFDTDt3QkFDQUMsT0FBTzs0QkFDTDs0QkFDQWI7eUJBQ0Q7b0JBQ0g7b0JBQ0E7d0JBQ0VZLE9BQU87NEJBQ0wsR0FBRzs0QkFDSCxHQUFHO3dCQUNMO3dCQUNBQyxPQUFPOzRCQUNMVjs0QkFDQUg7eUJBQ0Q7b0JBQ0g7b0JBQ0E7d0JBQ0VZLE9BQU87NEJBQUUsR0FBRzt3QkFBUzt3QkFDckJDLE9BQU87NEJBQ0w7NEJBQ0FiO3lCQUNEO29CQUNIO2lCQUNEO1lBQ0g7WUFFQSxzRUFBc0U7WUFDdEU7Z0JBQ0UsdURBQXVEO2dCQUN2RFksT0FBTztvQkFBRSxHQUFHO2dCQUFXO2dCQUN2QkMsT0FBTztvQkFDTGQ7b0JBQ0E7b0JBQ0E7b0JBQ0E7aUJBQ0Q7WUFDSDtZQUVBO2dCQUNFYSxPQUFPO2dCQUNQVyxXQUFXO2dCQUNYSixVQUFVO29CQUNSO3dCQUFFTixPQUFPWDtvQkFBYTtvQkFDdEI7d0JBQUVXLE9BQU87b0JBQVU7aUJBQ3BCO1lBQ0g7WUFFQTtnQkFDRUQsT0FBTztnQkFDUFcsV0FBVztnQkFDWFYsT0FBT1Y7WUFDVDtZQUVBO2dCQUNFLHFCQUFxQjtnQkFDckJlLE9BQU87Z0JBQ1BILEtBQUs7Z0JBQ0xMLFVBQVU7b0JBQUU7d0JBQUVRLE9BQU87b0JBQU07aUJBQUc7WUFDaEM7U0FDRDtJQUNIO0FBQ0Y7QUFFd0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYXJkd2FyZS1kb2MtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9oaWdobGlnaHQuanMvZXMvbGFuZ3VhZ2VzL3IuanM/NzM2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTGFuZ3VhZ2U6IFJcbkRlc2NyaXB0aW9uOiBSIGlzIGEgZnJlZSBzb2Z0d2FyZSBlbnZpcm9ubWVudCBmb3Igc3RhdGlzdGljYWwgY29tcHV0aW5nIGFuZCBncmFwaGljcy5cbkF1dGhvcjogSm9lIENoZW5nIDxqb2VAcnN0dWRpby5vcmc+XG5Db250cmlidXRvcnM6IEtvbnJhZCBSdWRvbHBoIDxrb25yYWQucnVkb2xwaEBnbWFpbC5jb20+XG5XZWJzaXRlOiBodHRwczovL3d3dy5yLXByb2plY3Qub3JnXG5DYXRlZ29yeTogY29tbW9uLHNjaWVudGlmaWNcbiovXG5cbi8qKiBAdHlwZSBMYW5ndWFnZUZuICovXG5mdW5jdGlvbiByKGhsanMpIHtcbiAgY29uc3QgcmVnZXggPSBobGpzLnJlZ2V4O1xuICAvLyBJZGVudGlmaWVycyBpbiBSIGNhbm5vdCBzdGFydCB3aXRoIGBfYCwgYnV0IHRoZXkgY2FuIHN0YXJ0IHdpdGggYC5gIGlmIGl0XG4gIC8vIGlzIG5vdCBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBhIGRpZ2l0LlxuICAvLyBSIGFsc28gc3VwcG9ydHMgcXVvdGVkIGlkZW50aWZpZXJzLCB3aGljaCBhcmUgbmVhci1hcmJpdHJhcnkgc2VxdWVuY2VzXG4gIC8vIGRlbGltaXRlZCBieSBiYWNrdGlja3MgKGDigKZgKSwgd2hpY2ggbWF5IGNvbnRhaW4gZXNjYXBlIHNlcXVlbmNlcy4gVGhlc2UgYXJlXG4gIC8vIGhhbmRsZWQgaW4gYSBzZXBhcmF0ZSBtb2RlLiBTZWUgYHRlc3QvbWFya3VwL3IvbmFtZXMudHh0YCBmb3IgZXhhbXBsZXMuXG4gIC8vIEZJWE1FOiBTdXBwb3J0IFVuaWNvZGUgaWRlbnRpZmllcnMuXG4gIGNvbnN0IElERU5UX1JFID0gLyg/Oig/OlthLXpBLVpdfFxcLlsuX2EtekEtWl0pWy5fYS16QS1aMC05XSopfFxcLig/IVxcZCkvO1xuICBjb25zdCBOVU1CRVJfVFlQRVNfUkUgPSByZWdleC5laXRoZXIoXG4gICAgLy8gU3BlY2lhbCBjYXNlOiBvbmx5IGhleGFkZWNpbWFsIGJpbmFyeSBwb3dlcnMgY2FuIGNvbnRhaW4gZnJhY3Rpb25zXG4gICAgLzBbeFhdWzAtOWEtZkEtRl0rXFwuWzAtOWEtZkEtRl0qW3BQXVsrLV0/XFxkK2k/LyxcbiAgICAvLyBIZXhhZGVjaW1hbCBudW1iZXJzIHdpdGhvdXQgZnJhY3Rpb24gYW5kIG9wdGlvbmFsIGJpbmFyeSBwb3dlclxuICAgIC8wW3hYXVswLTlhLWZBLUZdKyg/OltwUF1bKy1dP1xcZCspP1tMaV0/LyxcbiAgICAvLyBEZWNpbWFsIG51bWJlcnNcbiAgICAvKD86XFxkKyg/OlxcLlxcZCopP3xcXC5cXGQrKSg/OltlRV1bKy1dP1xcZCspP1tMaV0/L1xuICApO1xuICBjb25zdCBPUEVSQVRPUlNfUkUgPSAvWz0hPD46XT18XFx8XFx8fCYmfDo6Oj98PC18PDwtfC0+PnwtPnxcXHw+fFstKypcXC8/ISQmfDo8PT5AXn5dfFxcKlxcKi87XG4gIGNvbnN0IFBVTkNUVUFUSU9OX1JFID0gcmVnZXguZWl0aGVyKFxuICAgIC9bKCldLyxcbiAgICAvW3t9XS8sXG4gICAgL1xcW1xcWy8sXG4gICAgL1tbXFxdXS8sXG4gICAgL1xcXFwvLFxuICAgIC8sL1xuICApO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ1InLFxuXG4gICAga2V5d29yZHM6IHtcbiAgICAgICRwYXR0ZXJuOiBJREVOVF9SRSxcbiAgICAgIGtleXdvcmQ6XG4gICAgICAgICdmdW5jdGlvbiBpZiBpbiBicmVhayBuZXh0IHJlcGVhdCBlbHNlIGZvciB3aGlsZScsXG4gICAgICBsaXRlcmFsOlxuICAgICAgICAnTlVMTCBOQSBUUlVFIEZBTFNFIEluZiBOYU4gTkFfaW50ZWdlcl98MTAgTkFfcmVhbF98MTAgJ1xuICAgICAgICArICdOQV9jaGFyYWN0ZXJffDEwIE5BX2NvbXBsZXhffDEwJyxcbiAgICAgIGJ1aWx0X2luOlxuICAgICAgICAvLyBCdWlsdGluIGNvbnN0YW50c1xuICAgICAgICAnTEVUVEVSUyBsZXR0ZXJzIG1vbnRoLmFiYiBtb250aC5uYW1lIHBpIFQgRiAnXG4gICAgICAgIC8vIFByaW1pdGl2ZSBmdW5jdGlvbnNcbiAgICAgICAgLy8gVGhlc2UgYXJlIGFsbCB0aGUgZnVuY3Rpb25zIGluIGBiYXNlYCB0aGF0IGFyZSBpbXBsZW1lbnRlZCBhcyBhXG4gICAgICAgIC8vIGAuUHJpbWl0aXZlYCwgbWludXMgdGhvc2UgZnVuY3Rpb25zIHRoYXQgYXJlIGFsc28ga2V5d29yZHMuXG4gICAgICAgICsgJ2FicyBhY29zIGFjb3NoIGFsbCBhbnkgYW55TkEgQXJnIGFzLmNhbGwgYXMuY2hhcmFjdGVyICdcbiAgICAgICAgKyAnYXMuY29tcGxleCBhcy5kb3VibGUgYXMuZW52aXJvbm1lbnQgYXMuaW50ZWdlciBhcy5sb2dpY2FsICdcbiAgICAgICAgKyAnYXMubnVsbC5kZWZhdWx0IGFzLm51bWVyaWMgYXMucmF3IGFzaW4gYXNpbmggYXRhbiBhdGFuaCBhdHRyICdcbiAgICAgICAgKyAnYXR0cmlidXRlcyBiYXNlZW52IGJyb3dzZXIgYyBjYWxsIGNlaWxpbmcgY2xhc3MgQ29uaiBjb3MgY29zaCAnXG4gICAgICAgICsgJ2Nvc3BpIGN1bW1heCBjdW1taW4gY3VtcHJvZCBjdW1zdW0gZGlnYW1tYSBkaW0gZGltbmFtZXMgJ1xuICAgICAgICArICdlbXB0eWVudiBleHAgZXhwcmVzc2lvbiBmbG9vciBmb3JjZUFuZENhbGwgZ2FtbWEgZ2MudGltZSAnXG4gICAgICAgICsgJ2dsb2JhbGVudiBJbSBpbnRlcmFjdGl2ZSBpbnZpc2libGUgaXMuYXJyYXkgaXMuYXRvbWljIGlzLmNhbGwgJ1xuICAgICAgICArICdpcy5jaGFyYWN0ZXIgaXMuY29tcGxleCBpcy5kb3VibGUgaXMuZW52aXJvbm1lbnQgaXMuZXhwcmVzc2lvbiAnXG4gICAgICAgICsgJ2lzLmZpbml0ZSBpcy5mdW5jdGlvbiBpcy5pbmZpbml0ZSBpcy5pbnRlZ2VyIGlzLmxhbmd1YWdlICdcbiAgICAgICAgKyAnaXMubGlzdCBpcy5sb2dpY2FsIGlzLm1hdHJpeCBpcy5uYSBpcy5uYW1lIGlzLm5hbiBpcy5udWxsICdcbiAgICAgICAgKyAnaXMubnVtZXJpYyBpcy5vYmplY3QgaXMucGFpcmxpc3QgaXMucmF3IGlzLnJlY3Vyc2l2ZSBpcy5zaW5nbGUgJ1xuICAgICAgICArICdpcy5zeW1ib2wgbGF6eUxvYWREQmZldGNoIGxlbmd0aCBsZ2FtbWEgbGlzdCBsb2cgbWF4IG1pbiAnXG4gICAgICAgICsgJ21pc3NpbmcgTW9kIG5hbWVzIG5hcmdzIG56Y2hhciBvbGRDbGFzcyBvbi5leGl0IHBvcy50by5lbnYgJ1xuICAgICAgICArICdwcm9jLnRpbWUgcHJvZCBxdW90ZSByYW5nZSBSZSByZXAgcmV0cmFjZW1lbSByZXR1cm4gcm91bmQgJ1xuICAgICAgICArICdzZXFfYWxvbmcgc2VxX2xlbiBzZXEuaW50IHNpZ24gc2lnbmlmIHNpbiBzaW5oIHNpbnBpIHNxcnQgJ1xuICAgICAgICArICdzdGFuZGFyZEdlbmVyaWMgc3Vic3RpdHV0ZSBzdW0gc3dpdGNoIHRhbiB0YW5oIHRhbnBpIHRyYWNlbWVtICdcbiAgICAgICAgKyAndHJpZ2FtbWEgdHJ1bmMgdW5jbGFzcyB1bnRyYWNlbWVtIFVzZU1ldGhvZCB4dGZybScsXG4gICAgfSxcblxuICAgIGNvbnRhaW5zOiBbXG4gICAgICAvLyBSb3h5Z2VuIGNvbW1lbnRzXG4gICAgICBobGpzLkNPTU1FTlQoXG4gICAgICAgIC8jJy8sXG4gICAgICAgIC8kLyxcbiAgICAgICAgeyBjb250YWluczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBgQGV4YW1wbGVzYCBzZXBhcmF0ZWx5IHRvIGNhdXNlIGFsbCBzdWJzZXF1ZW50IGNvZGVcbiAgICAgICAgICAgIC8vIHVudGlsIHRoZSBuZXh0IGBAYC10YWcgb24gaXRzIG93biBsaW5lIHRvIGJlIGtlcHQgYXMtaXMsXG4gICAgICAgICAgICAvLyBwcmV2ZW50aW5nIGhpZ2hsaWdodGluZy4gVGhpcyBjb2RlIGlzIGV4YW1wbGUgUiBjb2RlLCBzbyBuZXN0ZWRcbiAgICAgICAgICAgIC8vIGRvY3RhZ3Mgc2hvdWxkbuKAmXQgYmUgdHJlYXRlZCBhcyBzdWNoLiBTZWVcbiAgICAgICAgICAgIC8vIGB0ZXN0L21hcmt1cC9yL3JveHlnZW4udHh0YCBmb3IgYW4gZXhhbXBsZS5cbiAgICAgICAgICAgIHNjb3BlOiAnZG9jdGFnJyxcbiAgICAgICAgICAgIG1hdGNoOiAvQGV4YW1wbGVzLyxcbiAgICAgICAgICAgIHN0YXJ0czoge1xuICAgICAgICAgICAgICBlbmQ6IHJlZ2V4Lmxvb2thaGVhZChyZWdleC5laXRoZXIoXG4gICAgICAgICAgICAgICAgLy8gZW5kIGlmIGFub3RoZXIgZG9jIGNvbW1lbnRcbiAgICAgICAgICAgICAgICAvXFxuXiMnXFxzKig/PUBbYS16QS1aXSspLyxcbiAgICAgICAgICAgICAgICAvLyBvciBhIGxpbmUgd2l0aCBubyBjb21tZW50XG4gICAgICAgICAgICAgICAgL1xcbl4oPyEjJykvXG4gICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICBlbmRzUGFyZW50OiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICAvLyBIYW5kbGUgYEBwYXJhbWAgdG8gaGlnaGxpZ2h0IHRoZSBwYXJhbWV0ZXIgbmFtZSBmb2xsb3dpbmdcbiAgICAgICAgICAgIC8vIGFmdGVyLlxuICAgICAgICAgICAgc2NvcGU6ICdkb2N0YWcnLFxuICAgICAgICAgICAgYmVnaW46ICdAcGFyYW0nLFxuICAgICAgICAgICAgZW5kOiAvJC8sXG4gICAgICAgICAgICBjb250YWluczogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2NvcGU6ICd2YXJpYWJsZScsXG4gICAgICAgICAgICAgICAgdmFyaWFudHM6IFtcbiAgICAgICAgICAgICAgICAgIHsgbWF0Y2g6IElERU5UX1JFIH0sXG4gICAgICAgICAgICAgICAgICB7IG1hdGNoOiAvYCg/OlxcXFwufFteYFxcXFxdKStgLyB9XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBlbmRzUGFyZW50OiB0cnVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNjb3BlOiAnZG9jdGFnJyxcbiAgICAgICAgICAgIG1hdGNoOiAvQFthLXpBLVpdKy9cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNjb3BlOiAna2V5d29yZCcsXG4gICAgICAgICAgICBtYXRjaDogL1xcXFxbYS16QS1aXSsvXG4gICAgICAgICAgfVxuICAgICAgICBdIH1cbiAgICAgICksXG5cbiAgICAgIGhsanMuSEFTSF9DT01NRU5UX01PREUsXG5cbiAgICAgIHtcbiAgICAgICAgc2NvcGU6ICdzdHJpbmcnLFxuICAgICAgICBjb250YWluczogWyBobGpzLkJBQ0tTTEFTSF9FU0NBUEUgXSxcbiAgICAgICAgdmFyaWFudHM6IFtcbiAgICAgICAgICBobGpzLkVORF9TQU1FX0FTX0JFR0lOKHtcbiAgICAgICAgICAgIGJlZ2luOiAvW3JSXVwiKC0qKVxcKC8sXG4gICAgICAgICAgICBlbmQ6IC9cXCkoLSopXCIvXG4gICAgICAgICAgfSksXG4gICAgICAgICAgaGxqcy5FTkRfU0FNRV9BU19CRUdJTih7XG4gICAgICAgICAgICBiZWdpbjogL1tyUl1cIigtKilcXHsvLFxuICAgICAgICAgICAgZW5kOiAvXFx9KC0qKVwiL1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIGhsanMuRU5EX1NBTUVfQVNfQkVHSU4oe1xuICAgICAgICAgICAgYmVnaW46IC9bclJdXCIoLSopXFxbLyxcbiAgICAgICAgICAgIGVuZDogL1xcXSgtKilcIi9cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBobGpzLkVORF9TQU1FX0FTX0JFR0lOKHtcbiAgICAgICAgICAgIGJlZ2luOiAvW3JSXScoLSopXFwoLyxcbiAgICAgICAgICAgIGVuZDogL1xcKSgtKiknL1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIGhsanMuRU5EX1NBTUVfQVNfQkVHSU4oe1xuICAgICAgICAgICAgYmVnaW46IC9bclJdJygtKilcXHsvLFxuICAgICAgICAgICAgZW5kOiAvXFx9KC0qKScvXG4gICAgICAgICAgfSksXG4gICAgICAgICAgaGxqcy5FTkRfU0FNRV9BU19CRUdJTih7XG4gICAgICAgICAgICBiZWdpbjogL1tyUl0nKC0qKVxcWy8sXG4gICAgICAgICAgICBlbmQ6IC9cXF0oLSopJy9cbiAgICAgICAgICB9KSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBiZWdpbjogJ1wiJyxcbiAgICAgICAgICAgIGVuZDogJ1wiJyxcbiAgICAgICAgICAgIHJlbGV2YW5jZTogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgYmVnaW46IFwiJ1wiLFxuICAgICAgICAgICAgZW5kOiBcIidcIixcbiAgICAgICAgICAgIHJlbGV2YW5jZTogMFxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgIH0sXG5cbiAgICAgIC8vIE1hdGNoaW5nIG51bWJlcnMgaW1tZWRpYXRlbHkgZm9sbG93aW5nIHB1bmN0dWF0aW9uIGFuZCBvcGVyYXRvcnMgaXNcbiAgICAgIC8vIHRyaWNreSBzaW5jZSB3ZSBuZWVkIHRvIGxvb2sgYXQgdGhlIGNoYXJhY3RlciBhaGVhZCBvZiBhIG51bWJlciB0b1xuICAgICAgLy8gZW5zdXJlIHRoZSBudW1iZXIgaXMgbm90IHBhcnQgb2YgYW4gaWRlbnRpZmllciwgYW5kIHdlIGNhbm5vdCB1c2VcbiAgICAgIC8vIG5lZ2F0aXZlIGxvb2stYmVoaW5kIGFzc2VydGlvbnMuIFNvIGluc3RlYWQgd2UgZXhwbGljaXRseSBoYW5kbGUgYWxsXG4gICAgICAvLyBwb3NzaWJsZSBjb21iaW5hdGlvbnMgb2YgKG9wZXJhdG9yfHB1bmN0dWF0aW9uKSwgbnVtYmVyLlxuICAgICAgLy8gVE9ETzogcmVwbGFjZSB3aXRoIG5lZ2F0aXZlIGxvb2stYmVoaW5kIHdoZW4gYXZhaWxhYmxlXG4gICAgICAvLyB7IGJlZ2luOiAvKD88IVthLXpBLVowLTkuX10pMFt4WF1bMC05YS1mQS1GXStcXC5bMC05YS1mQS1GXSpbcFBdWystXT9cXGQraT8vIH0sXG4gICAgICAvLyB7IGJlZ2luOiAvKD88IVthLXpBLVowLTkuX10pMFt4WF1bMC05YS1mQS1GXSsoW3BQXVsrLV0/XFxkKyk/W0xpXT8vIH0sXG4gICAgICAvLyB7IGJlZ2luOiAvKD88IVthLXpBLVowLTkuX10pKFxcZCsoXFwuXFxkKik/fFxcLlxcZCspKFtlRV1bKy1dP1xcZCspP1tMaV0/LyB9XG4gICAgICB7XG4gICAgICAgIHJlbGV2YW5jZTogMCxcbiAgICAgICAgdmFyaWFudHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAxOiAnb3BlcmF0b3InLFxuICAgICAgICAgICAgICAyOiAnbnVtYmVyJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1hdGNoOiBbXG4gICAgICAgICAgICAgIE9QRVJBVE9SU19SRSxcbiAgICAgICAgICAgICAgTlVNQkVSX1RZUEVTX1JFXG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAxOiAnb3BlcmF0b3InLFxuICAgICAgICAgICAgICAyOiAnbnVtYmVyJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1hdGNoOiBbXG4gICAgICAgICAgICAgIC8lW14lXSolLyxcbiAgICAgICAgICAgICAgTlVNQkVSX1RZUEVTX1JFXG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAxOiAncHVuY3R1YXRpb24nLFxuICAgICAgICAgICAgICAyOiAnbnVtYmVyJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1hdGNoOiBbXG4gICAgICAgICAgICAgIFBVTkNUVUFUSU9OX1JFLFxuICAgICAgICAgICAgICBOVU1CRVJfVFlQRVNfUkVcbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNjb3BlOiB7IDI6ICdudW1iZXInIH0sXG4gICAgICAgICAgICBtYXRjaDogW1xuICAgICAgICAgICAgICAvW15hLXpBLVowLTkuX118Xi8sIC8vIG5vdCBwYXJ0IG9mIGFuIGlkZW50aWZpZXIsIG9yIHN0YXJ0IG9mIGRvY3VtZW50XG4gICAgICAgICAgICAgIE5VTUJFUl9UWVBFU19SRVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfSxcblxuICAgICAgLy8gT3BlcmF0b3JzL3B1bmN0dWF0aW9uIHdoZW4gdGhleSdyZSBub3QgZGlyZWN0bHkgZm9sbG93ZWQgYnkgbnVtYmVyc1xuICAgICAge1xuICAgICAgICAvLyBSZWxldmFuY2UgYm9vc3QgZm9yIHRoZSBtb3N0IGNvbW1vbiBhc3NpZ25tZW50IGZvcm0uXG4gICAgICAgIHNjb3BlOiB7IDM6ICdvcGVyYXRvcicgfSxcbiAgICAgICAgbWF0Y2g6IFtcbiAgICAgICAgICBJREVOVF9SRSxcbiAgICAgICAgICAvXFxzKy8sXG4gICAgICAgICAgLzwtLyxcbiAgICAgICAgICAvXFxzKy9cbiAgICAgICAgXVxuICAgICAgfSxcblxuICAgICAge1xuICAgICAgICBzY29wZTogJ29wZXJhdG9yJyxcbiAgICAgICAgcmVsZXZhbmNlOiAwLFxuICAgICAgICB2YXJpYW50czogW1xuICAgICAgICAgIHsgbWF0Y2g6IE9QRVJBVE9SU19SRSB9LFxuICAgICAgICAgIHsgbWF0Y2g6IC8lW14lXSolLyB9XG4gICAgICAgIF1cbiAgICAgIH0sXG5cbiAgICAgIHtcbiAgICAgICAgc2NvcGU6ICdwdW5jdHVhdGlvbicsXG4gICAgICAgIHJlbGV2YW5jZTogMCxcbiAgICAgICAgbWF0Y2g6IFBVTkNUVUFUSU9OX1JFXG4gICAgICB9LFxuXG4gICAgICB7XG4gICAgICAgIC8vIEVzY2FwZWQgaWRlbnRpZmllclxuICAgICAgICBiZWdpbjogJ2AnLFxuICAgICAgICBlbmQ6ICdgJyxcbiAgICAgICAgY29udGFpbnM6IFsgeyBiZWdpbjogL1xcXFwuLyB9IF1cbiAgICAgIH1cbiAgICBdXG4gIH07XG59XG5cbmV4cG9ydCB7IHIgYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbInIiLCJobGpzIiwicmVnZXgiLCJJREVOVF9SRSIsIk5VTUJFUl9UWVBFU19SRSIsImVpdGhlciIsIk9QRVJBVE9SU19SRSIsIlBVTkNUVUFUSU9OX1JFIiwibmFtZSIsImtleXdvcmRzIiwiJHBhdHRlcm4iLCJrZXl3b3JkIiwibGl0ZXJhbCIsImJ1aWx0X2luIiwiY29udGFpbnMiLCJDT01NRU5UIiwic2NvcGUiLCJtYXRjaCIsInN0YXJ0cyIsImVuZCIsImxvb2thaGVhZCIsImVuZHNQYXJlbnQiLCJiZWdpbiIsInZhcmlhbnRzIiwiSEFTSF9DT01NRU5UX01PREUiLCJCQUNLU0xBU0hfRVNDQVBFIiwiRU5EX1NBTUVfQVNfQkVHSU4iLCJyZWxldmFuY2UiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/r.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/ruby.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/ruby.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ruby)\n/* harmony export */ });\n/*\nLanguage: Ruby\nDescription: Ruby is a dynamic, open source programming language with a focus on simplicity and productivity.\nWebsite: https://www.ruby-lang.org/\nAuthor: Anton Kovalyov <anton@kovalyov.net>\nContributors: Peter Leonov <gojpeg@yandex.ru>, Vasily Polovnyov <vast@whiteants.net>, Loren Segal <lsegal@soen.ca>, Pascal Hurni <phi@ruby-reactive.org>, Cedric Sohrauer <sohrauer@googlemail.com>\nCategory: common, scripting\n*/ function ruby(hljs) {\n    const regex = hljs.regex;\n    const RUBY_METHOD_RE = \"([a-zA-Z_]\\\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\\\*\\\\*|[-/+%^&*~`|]|\\\\[\\\\]=?)\";\n    // TODO: move concepts like CAMEL_CASE into `modes.js`\n    const CLASS_NAME_RE = regex.either(/\\b([A-Z]+[a-z0-9]+)+/, // ends in caps\n    /\\b([A-Z]+[a-z0-9]+)+[A-Z]+/);\n    const CLASS_NAME_WITH_NAMESPACE_RE = regex.concat(CLASS_NAME_RE, /(::\\w+)*/);\n    // very popular ruby built-ins that one might even assume\n    // are actual keywords (despite that not being the case)\n    const PSEUDO_KWS = [\n        \"include\",\n        \"extend\",\n        \"prepend\",\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"raise\",\n        \"throw\"\n    ];\n    const RUBY_KEYWORDS = {\n        \"variable.constant\": [\n            \"__FILE__\",\n            \"__LINE__\",\n            \"__ENCODING__\"\n        ],\n        \"variable.language\": [\n            \"self\",\n            \"super\"\n        ],\n        keyword: [\n            \"alias\",\n            \"and\",\n            \"begin\",\n            \"BEGIN\",\n            \"break\",\n            \"case\",\n            \"class\",\n            \"defined\",\n            \"do\",\n            \"else\",\n            \"elsif\",\n            \"end\",\n            \"END\",\n            \"ensure\",\n            \"for\",\n            \"if\",\n            \"in\",\n            \"module\",\n            \"next\",\n            \"not\",\n            \"or\",\n            \"redo\",\n            \"require\",\n            \"rescue\",\n            \"retry\",\n            \"return\",\n            \"then\",\n            \"undef\",\n            \"unless\",\n            \"until\",\n            \"when\",\n            \"while\",\n            \"yield\",\n            ...PSEUDO_KWS\n        ],\n        built_in: [\n            \"proc\",\n            \"lambda\",\n            \"attr_accessor\",\n            \"attr_reader\",\n            \"attr_writer\",\n            \"define_method\",\n            \"private_constant\",\n            \"module_function\"\n        ],\n        literal: [\n            \"true\",\n            \"false\",\n            \"nil\"\n        ]\n    };\n    const YARDOCTAG = {\n        className: \"doctag\",\n        begin: \"@[A-Za-z]+\"\n    };\n    const IRB_OBJECT = {\n        begin: \"#<\",\n        end: \">\"\n    };\n    const COMMENT_MODES = [\n        hljs.COMMENT(\"#\", \"$\", {\n            contains: [\n                YARDOCTAG\n            ]\n        }),\n        hljs.COMMENT(\"^=begin\", \"^=end\", {\n            contains: [\n                YARDOCTAG\n            ],\n            relevance: 10\n        }),\n        hljs.COMMENT(\"^__END__\", hljs.MATCH_NOTHING_RE)\n    ];\n    const SUBST = {\n        className: \"subst\",\n        begin: /#\\{/,\n        end: /\\}/,\n        keywords: RUBY_KEYWORDS\n    };\n    const STRING = {\n        className: \"string\",\n        contains: [\n            hljs.BACKSLASH_ESCAPE,\n            SUBST\n        ],\n        variants: [\n            {\n                begin: /'/,\n                end: /'/\n            },\n            {\n                begin: /\"/,\n                end: /\"/\n            },\n            {\n                begin: /`/,\n                end: /`/\n            },\n            {\n                begin: /%[qQwWx]?\\(/,\n                end: /\\)/\n            },\n            {\n                begin: /%[qQwWx]?\\[/,\n                end: /\\]/\n            },\n            {\n                begin: /%[qQwWx]?\\{/,\n                end: /\\}/\n            },\n            {\n                begin: /%[qQwWx]?</,\n                end: />/\n            },\n            {\n                begin: /%[qQwWx]?\\//,\n                end: /\\//\n            },\n            {\n                begin: /%[qQwWx]?%/,\n                end: /%/\n            },\n            {\n                begin: /%[qQwWx]?-/,\n                end: /-/\n            },\n            {\n                begin: /%[qQwWx]?\\|/,\n                end: /\\|/\n            },\n            // in the following expressions, \\B in the beginning suppresses recognition of ?-sequences\n            // where ? is the last character of a preceding identifier, as in: `func?4`\n            {\n                begin: /\\B\\?(\\\\\\d{1,3})/\n            },\n            {\n                begin: /\\B\\?(\\\\x[A-Fa-f0-9]{1,2})/\n            },\n            {\n                begin: /\\B\\?(\\\\u\\{?[A-Fa-f0-9]{1,6}\\}?)/\n            },\n            {\n                begin: /\\B\\?(\\\\M-\\\\C-|\\\\M-\\\\c|\\\\c\\\\M-|\\\\M-|\\\\C-\\\\M-)[\\x20-\\x7e]/\n            },\n            {\n                begin: /\\B\\?\\\\(c|C-)[\\x20-\\x7e]/\n            },\n            {\n                begin: /\\B\\?\\\\?\\S/\n            },\n            // heredocs\n            {\n                // this guard makes sure that we have an entire heredoc and not a false\n                // positive (auto-detect, etc.)\n                begin: regex.concat(/<<[-~]?'?/, regex.lookahead(/(\\w+)(?=\\W)[^\\n]*\\n(?:[^\\n]*\\n)*?\\s*\\1\\b/)),\n                contains: [\n                    hljs.END_SAME_AS_BEGIN({\n                        begin: /(\\w+)/,\n                        end: /(\\w+)/,\n                        contains: [\n                            hljs.BACKSLASH_ESCAPE,\n                            SUBST\n                        ]\n                    })\n                ]\n            }\n        ]\n    };\n    // Ruby syntax is underdocumented, but this grammar seems to be accurate\n    // as of version 2.7.2 (confirmed with (irb and `Ripper.sexp(...)`)\n    // https://docs.ruby-lang.org/en/2.7.0/doc/syntax/literals_rdoc.html#label-Numbers\n    const decimal = \"[1-9](_?[0-9])*|0\";\n    const digits = \"[0-9](_?[0-9])*\";\n    const NUMBER = {\n        className: \"number\",\n        relevance: 0,\n        variants: [\n            // decimal integer/float, optionally exponential or rational, optionally imaginary\n            {\n                begin: `\\\\b(${decimal})(\\\\.(${digits}))?([eE][+-]?(${digits})|r)?i?\\\\b`\n            },\n            // explicit decimal/binary/octal/hexadecimal integer,\n            // optionally rational and/or imaginary\n            {\n                begin: \"\\\\b0[dD][0-9](_?[0-9])*r?i?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[bB][0-1](_?[0-1])*r?i?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[oO][0-7](_?[0-7])*r?i?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\\\b\"\n            },\n            // 0-prefixed implicit octal integer, optionally rational and/or imaginary\n            {\n                begin: \"\\\\b0(_?[0-7])+r?i?\\\\b\"\n            }\n        ]\n    };\n    const PARAMS = {\n        variants: [\n            {\n                match: /\\(\\)/\n            },\n            {\n                className: \"params\",\n                begin: /\\(/,\n                end: /(?=\\))/,\n                excludeBegin: true,\n                endsParent: true,\n                keywords: RUBY_KEYWORDS\n            }\n        ]\n    };\n    const INCLUDE_EXTEND = {\n        match: [\n            /(include|extend)\\s+/,\n            CLASS_NAME_WITH_NAMESPACE_RE\n        ],\n        scope: {\n            2: \"title.class\"\n        },\n        keywords: RUBY_KEYWORDS\n    };\n    const CLASS_DEFINITION = {\n        variants: [\n            {\n                match: [\n                    /class\\s+/,\n                    CLASS_NAME_WITH_NAMESPACE_RE,\n                    /\\s+<\\s+/,\n                    CLASS_NAME_WITH_NAMESPACE_RE\n                ]\n            },\n            {\n                match: [\n                    /\\b(class|module)\\s+/,\n                    CLASS_NAME_WITH_NAMESPACE_RE\n                ]\n            }\n        ],\n        scope: {\n            2: \"title.class\",\n            4: \"title.class.inherited\"\n        },\n        keywords: RUBY_KEYWORDS\n    };\n    const UPPER_CASE_CONSTANT = {\n        relevance: 0,\n        match: /\\b[A-Z][A-Z_0-9]+\\b/,\n        className: \"variable.constant\"\n    };\n    const METHOD_DEFINITION = {\n        match: [\n            /def/,\n            /\\s+/,\n            RUBY_METHOD_RE\n        ],\n        scope: {\n            1: \"keyword\",\n            3: \"title.function\"\n        },\n        contains: [\n            PARAMS\n        ]\n    };\n    const OBJECT_CREATION = {\n        relevance: 0,\n        match: [\n            CLASS_NAME_WITH_NAMESPACE_RE,\n            /\\.new[. (]/\n        ],\n        scope: {\n            1: \"title.class\"\n        }\n    };\n    // CamelCase\n    const CLASS_REFERENCE = {\n        relevance: 0,\n        match: CLASS_NAME_RE,\n        scope: \"title.class\"\n    };\n    const RUBY_DEFAULT_CONTAINS = [\n        STRING,\n        CLASS_DEFINITION,\n        INCLUDE_EXTEND,\n        OBJECT_CREATION,\n        UPPER_CASE_CONSTANT,\n        CLASS_REFERENCE,\n        METHOD_DEFINITION,\n        {\n            // swallow namespace qualifiers before symbols\n            begin: hljs.IDENT_RE + \"::\"\n        },\n        {\n            className: \"symbol\",\n            begin: hljs.UNDERSCORE_IDENT_RE + \"(!|\\\\?)?:\",\n            relevance: 0\n        },\n        {\n            className: \"symbol\",\n            begin: \":(?!\\\\s)\",\n            contains: [\n                STRING,\n                {\n                    begin: RUBY_METHOD_RE\n                }\n            ],\n            relevance: 0\n        },\n        NUMBER,\n        {\n            // negative-look forward attempts to prevent false matches like:\n            // @ident@ or $ident$ that might indicate this is not ruby at all\n            className: \"variable\",\n            begin: \"(\\\\$\\\\W)|((\\\\$|@@?)(\\\\w+))(?=[^@$?])\" + `(?![A-Za-z])(?![@$?'])`\n        },\n        {\n            className: \"params\",\n            begin: /\\|(?!=)/,\n            end: /\\|/,\n            excludeBegin: true,\n            excludeEnd: true,\n            relevance: 0,\n            keywords: RUBY_KEYWORDS\n        },\n        {\n            begin: \"(\" + hljs.RE_STARTERS_RE + \"|unless)\\\\s*\",\n            keywords: \"unless\",\n            contains: [\n                {\n                    className: \"regexp\",\n                    contains: [\n                        hljs.BACKSLASH_ESCAPE,\n                        SUBST\n                    ],\n                    illegal: /\\n/,\n                    variants: [\n                        {\n                            begin: \"/\",\n                            end: \"/[a-z]*\"\n                        },\n                        {\n                            begin: /%r\\{/,\n                            end: /\\}[a-z]*/\n                        },\n                        {\n                            begin: \"%r\\\\(\",\n                            end: \"\\\\)[a-z]*\"\n                        },\n                        {\n                            begin: \"%r!\",\n                            end: \"![a-z]*\"\n                        },\n                        {\n                            begin: \"%r\\\\[\",\n                            end: \"\\\\][a-z]*\"\n                        }\n                    ]\n                }\n            ].concat(IRB_OBJECT, COMMENT_MODES),\n            relevance: 0\n        }\n    ].concat(IRB_OBJECT, COMMENT_MODES);\n    SUBST.contains = RUBY_DEFAULT_CONTAINS;\n    PARAMS.contains = RUBY_DEFAULT_CONTAINS;\n    // >>\n    // ?>\n    const SIMPLE_PROMPT = \"[>?]>\";\n    // irb(main):001:0>\n    const DEFAULT_PROMPT = \"[\\\\w#]+\\\\(\\\\w+\\\\):\\\\d+:\\\\d+[>*]\";\n    const RVM_PROMPT = \"(\\\\w+-)?\\\\d+\\\\.\\\\d+\\\\.\\\\d+(p\\\\d+)?[^\\\\d][^>]+>\";\n    const IRB_DEFAULT = [\n        {\n            begin: /^\\s*=>/,\n            starts: {\n                end: \"$\",\n                contains: RUBY_DEFAULT_CONTAINS\n            }\n        },\n        {\n            className: \"meta.prompt\",\n            begin: \"^(\" + SIMPLE_PROMPT + \"|\" + DEFAULT_PROMPT + \"|\" + RVM_PROMPT + \")(?=[ ])\",\n            starts: {\n                end: \"$\",\n                keywords: RUBY_KEYWORDS,\n                contains: RUBY_DEFAULT_CONTAINS\n            }\n        }\n    ];\n    COMMENT_MODES.unshift(IRB_OBJECT);\n    return {\n        name: \"Ruby\",\n        aliases: [\n            \"rb\",\n            \"gemspec\",\n            \"podspec\",\n            \"thor\",\n            \"irb\"\n        ],\n        keywords: RUBY_KEYWORDS,\n        illegal: /\\/\\*/,\n        contains: [\n            hljs.SHEBANG({\n                binary: \"ruby\"\n            })\n        ].concat(IRB_DEFAULT).concat(COMMENT_MODES).concat(RUBY_DEFAULT_CONTAINS)\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/ruby.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/rust.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/rust.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rust)\n/* harmony export */ });\n/*\nLanguage: Rust\nAuthor: Andrey Vlasovskikh <andrey.vlasovskikh@gmail.com>\nContributors: Roman Shmatov <romanshmatov@gmail.com>, Kasper Andersen <kma_untrusted@protonmail.com>\nWebsite: https://www.rust-lang.org\nCategory: common, system\n*/ /** @type LanguageFn */ function rust(hljs) {\n    const regex = hljs.regex;\n    // ============================================\n    // Added to support the r# keyword, which is a raw identifier in Rust.\n    const RAW_IDENTIFIER = /(r#)?/;\n    const UNDERSCORE_IDENT_RE = regex.concat(RAW_IDENTIFIER, hljs.UNDERSCORE_IDENT_RE);\n    const IDENT_RE = regex.concat(RAW_IDENTIFIER, hljs.IDENT_RE);\n    // ============================================\n    const FUNCTION_INVOKE = {\n        className: \"title.function.invoke\",\n        relevance: 0,\n        begin: regex.concat(/\\b/, /(?!let|for|while|if|else|match\\b)/, IDENT_RE, regex.lookahead(/\\s*\\(/))\n    };\n    const NUMBER_SUFFIX = \"([ui](8|16|32|64|128|size)|f(32|64))?\";\n    const KEYWORDS = [\n        \"abstract\",\n        \"as\",\n        \"async\",\n        \"await\",\n        \"become\",\n        \"box\",\n        \"break\",\n        \"const\",\n        \"continue\",\n        \"crate\",\n        \"do\",\n        \"dyn\",\n        \"else\",\n        \"enum\",\n        \"extern\",\n        \"false\",\n        \"final\",\n        \"fn\",\n        \"for\",\n        \"if\",\n        \"impl\",\n        \"in\",\n        \"let\",\n        \"loop\",\n        \"macro\",\n        \"match\",\n        \"mod\",\n        \"move\",\n        \"mut\",\n        \"override\",\n        \"priv\",\n        \"pub\",\n        \"ref\",\n        \"return\",\n        \"self\",\n        \"Self\",\n        \"static\",\n        \"struct\",\n        \"super\",\n        \"trait\",\n        \"true\",\n        \"try\",\n        \"type\",\n        \"typeof\",\n        \"union\",\n        \"unsafe\",\n        \"unsized\",\n        \"use\",\n        \"virtual\",\n        \"where\",\n        \"while\",\n        \"yield\"\n    ];\n    const LITERALS = [\n        \"true\",\n        \"false\",\n        \"Some\",\n        \"None\",\n        \"Ok\",\n        \"Err\"\n    ];\n    const BUILTINS = [\n        // functions\n        \"drop \",\n        // traits\n        \"Copy\",\n        \"Send\",\n        \"Sized\",\n        \"Sync\",\n        \"Drop\",\n        \"Fn\",\n        \"FnMut\",\n        \"FnOnce\",\n        \"ToOwned\",\n        \"Clone\",\n        \"Debug\",\n        \"PartialEq\",\n        \"PartialOrd\",\n        \"Eq\",\n        \"Ord\",\n        \"AsRef\",\n        \"AsMut\",\n        \"Into\",\n        \"From\",\n        \"Default\",\n        \"Iterator\",\n        \"Extend\",\n        \"IntoIterator\",\n        \"DoubleEndedIterator\",\n        \"ExactSizeIterator\",\n        \"SliceConcatExt\",\n        \"ToString\",\n        // macros\n        \"assert!\",\n        \"assert_eq!\",\n        \"bitflags!\",\n        \"bytes!\",\n        \"cfg!\",\n        \"col!\",\n        \"concat!\",\n        \"concat_idents!\",\n        \"debug_assert!\",\n        \"debug_assert_eq!\",\n        \"env!\",\n        \"eprintln!\",\n        \"panic!\",\n        \"file!\",\n        \"format!\",\n        \"format_args!\",\n        \"include_bytes!\",\n        \"include_str!\",\n        \"line!\",\n        \"local_data_key!\",\n        \"module_path!\",\n        \"option_env!\",\n        \"print!\",\n        \"println!\",\n        \"select!\",\n        \"stringify!\",\n        \"try!\",\n        \"unimplemented!\",\n        \"unreachable!\",\n        \"vec!\",\n        \"write!\",\n        \"writeln!\",\n        \"macro_rules!\",\n        \"assert_ne!\",\n        \"debug_assert_ne!\"\n    ];\n    const TYPES = [\n        \"i8\",\n        \"i16\",\n        \"i32\",\n        \"i64\",\n        \"i128\",\n        \"isize\",\n        \"u8\",\n        \"u16\",\n        \"u32\",\n        \"u64\",\n        \"u128\",\n        \"usize\",\n        \"f32\",\n        \"f64\",\n        \"str\",\n        \"char\",\n        \"bool\",\n        \"Box\",\n        \"Option\",\n        \"Result\",\n        \"String\",\n        \"Vec\"\n    ];\n    return {\n        name: \"Rust\",\n        aliases: [\n            \"rs\"\n        ],\n        keywords: {\n            $pattern: hljs.IDENT_RE + \"!?\",\n            type: TYPES,\n            keyword: KEYWORDS,\n            literal: LITERALS,\n            built_in: BUILTINS\n        },\n        illegal: \"</\",\n        contains: [\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.COMMENT(\"/\\\\*\", \"\\\\*/\", {\n                contains: [\n                    \"self\"\n                ]\n            }),\n            hljs.inherit(hljs.QUOTE_STRING_MODE, {\n                begin: /b?\"/,\n                illegal: null\n            }),\n            {\n                className: \"symbol\",\n                // negative lookahead to avoid matching `'`\n                begin: /'[a-zA-Z_][a-zA-Z0-9_]*(?!')/\n            },\n            {\n                scope: \"string\",\n                variants: [\n                    {\n                        begin: /b?r(#*)\"(.|\\n)*?\"\\1(?!#)/\n                    },\n                    {\n                        begin: /b?'/,\n                        end: /'/,\n                        contains: [\n                            {\n                                scope: \"char.escape\",\n                                match: /\\\\('|\\w|x\\w{2}|u\\w{4}|U\\w{8})/\n                            }\n                        ]\n                    }\n                ]\n            },\n            {\n                className: \"number\",\n                variants: [\n                    {\n                        begin: \"\\\\b0b([01_]+)\" + NUMBER_SUFFIX\n                    },\n                    {\n                        begin: \"\\\\b0o([0-7_]+)\" + NUMBER_SUFFIX\n                    },\n                    {\n                        begin: \"\\\\b0x([A-Fa-f0-9_]+)\" + NUMBER_SUFFIX\n                    },\n                    {\n                        begin: \"\\\\b(\\\\d[\\\\d_]*(\\\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)\" + NUMBER_SUFFIX\n                    }\n                ],\n                relevance: 0\n            },\n            {\n                begin: [\n                    /fn/,\n                    /\\s+/,\n                    UNDERSCORE_IDENT_RE\n                ],\n                className: {\n                    1: \"keyword\",\n                    3: \"title.function\"\n                }\n            },\n            {\n                className: \"meta\",\n                begin: \"#!?\\\\[\",\n                end: \"\\\\]\",\n                contains: [\n                    {\n                        className: \"string\",\n                        begin: /\"/,\n                        end: /\"/,\n                        contains: [\n                            hljs.BACKSLASH_ESCAPE\n                        ]\n                    }\n                ]\n            },\n            {\n                begin: [\n                    /let/,\n                    /\\s+/,\n                    /(?:mut\\s+)?/,\n                    UNDERSCORE_IDENT_RE\n                ],\n                className: {\n                    1: \"keyword\",\n                    3: \"keyword\",\n                    4: \"variable\"\n                }\n            },\n            // must come before impl/for rule later\n            {\n                begin: [\n                    /for/,\n                    /\\s+/,\n                    UNDERSCORE_IDENT_RE,\n                    /\\s+/,\n                    /in/\n                ],\n                className: {\n                    1: \"keyword\",\n                    3: \"variable\",\n                    5: \"keyword\"\n                }\n            },\n            {\n                begin: [\n                    /type/,\n                    /\\s+/,\n                    UNDERSCORE_IDENT_RE\n                ],\n                className: {\n                    1: \"keyword\",\n                    3: \"title.class\"\n                }\n            },\n            {\n                begin: [\n                    /(?:trait|enum|struct|union|impl|for)/,\n                    /\\s+/,\n                    UNDERSCORE_IDENT_RE\n                ],\n                className: {\n                    1: \"keyword\",\n                    3: \"title.class\"\n                }\n            },\n            {\n                begin: hljs.IDENT_RE + \"::\",\n                keywords: {\n                    keyword: \"Self\",\n                    built_in: BUILTINS,\n                    type: TYPES\n                }\n            },\n            {\n                className: \"punctuation\",\n                begin: \"->\"\n            },\n            FUNCTION_INVOKE\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/rust.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/scss.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/scss.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ scss)\n/* harmony export */ });\nconst MODES = (hljs)=>{\n    return {\n        IMPORTANT: {\n            scope: \"meta\",\n            begin: \"!important\"\n        },\n        BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,\n        HEXCOLOR: {\n            scope: \"number\",\n            begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\\b/\n        },\n        FUNCTION_DISPATCH: {\n            className: \"built_in\",\n            begin: /[\\w-]+(?=\\()/\n        },\n        ATTRIBUTE_SELECTOR_MODE: {\n            scope: \"selector-attr\",\n            begin: /\\[/,\n            end: /\\]/,\n            illegal: \"$\",\n            contains: [\n                hljs.APOS_STRING_MODE,\n                hljs.QUOTE_STRING_MODE\n            ]\n        },\n        CSS_NUMBER_MODE: {\n            scope: \"number\",\n            begin: hljs.NUMBER_RE + \"(\" + \"%|em|ex|ch|rem\" + \"|vw|vh|vmin|vmax\" + \"|cm|mm|in|pt|pc|px\" + \"|deg|grad|rad|turn\" + \"|s|ms\" + \"|Hz|kHz\" + \"|dpi|dpcm|dppx\" + \")?\",\n            relevance: 0\n        },\n        CSS_VARIABLE: {\n            className: \"attr\",\n            begin: /--[A-Za-z_][A-Za-z0-9_-]*/\n        }\n    };\n};\nconst HTML_TAGS = [\n    \"a\",\n    \"abbr\",\n    \"address\",\n    \"article\",\n    \"aside\",\n    \"audio\",\n    \"b\",\n    \"blockquote\",\n    \"body\",\n    \"button\",\n    \"canvas\",\n    \"caption\",\n    \"cite\",\n    \"code\",\n    \"dd\",\n    \"del\",\n    \"details\",\n    \"dfn\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"em\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"header\",\n    \"hgroup\",\n    \"html\",\n    \"i\",\n    \"iframe\",\n    \"img\",\n    \"input\",\n    \"ins\",\n    \"kbd\",\n    \"label\",\n    \"legend\",\n    \"li\",\n    \"main\",\n    \"mark\",\n    \"menu\",\n    \"nav\",\n    \"object\",\n    \"ol\",\n    \"optgroup\",\n    \"option\",\n    \"p\",\n    \"picture\",\n    \"q\",\n    \"quote\",\n    \"samp\",\n    \"section\",\n    \"select\",\n    \"source\",\n    \"span\",\n    \"strong\",\n    \"summary\",\n    \"sup\",\n    \"table\",\n    \"tbody\",\n    \"td\",\n    \"textarea\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"time\",\n    \"tr\",\n    \"ul\",\n    \"var\",\n    \"video\"\n];\nconst SVG_TAGS = [\n    \"defs\",\n    \"g\",\n    \"marker\",\n    \"mask\",\n    \"pattern\",\n    \"svg\",\n    \"switch\",\n    \"symbol\",\n    \"feBlend\",\n    \"feColorMatrix\",\n    \"feComponentTransfer\",\n    \"feComposite\",\n    \"feConvolveMatrix\",\n    \"feDiffuseLighting\",\n    \"feDisplacementMap\",\n    \"feFlood\",\n    \"feGaussianBlur\",\n    \"feImage\",\n    \"feMerge\",\n    \"feMorphology\",\n    \"feOffset\",\n    \"feSpecularLighting\",\n    \"feTile\",\n    \"feTurbulence\",\n    \"linearGradient\",\n    \"radialGradient\",\n    \"stop\",\n    \"circle\",\n    \"ellipse\",\n    \"image\",\n    \"line\",\n    \"path\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"text\",\n    \"use\",\n    \"textPath\",\n    \"tspan\",\n    \"foreignObject\",\n    \"clipPath\"\n];\nconst TAGS = [\n    ...HTML_TAGS,\n    ...SVG_TAGS\n];\n// Sorting, then reversing makes sure longer attributes/elements like\n// `font-weight` are matched fully instead of getting false positives on say `font`\nconst MEDIA_FEATURES = [\n    \"any-hover\",\n    \"any-pointer\",\n    \"aspect-ratio\",\n    \"color\",\n    \"color-gamut\",\n    \"color-index\",\n    \"device-aspect-ratio\",\n    \"device-height\",\n    \"device-width\",\n    \"display-mode\",\n    \"forced-colors\",\n    \"grid\",\n    \"height\",\n    \"hover\",\n    \"inverted-colors\",\n    \"monochrome\",\n    \"orientation\",\n    \"overflow-block\",\n    \"overflow-inline\",\n    \"pointer\",\n    \"prefers-color-scheme\",\n    \"prefers-contrast\",\n    \"prefers-reduced-motion\",\n    \"prefers-reduced-transparency\",\n    \"resolution\",\n    \"scan\",\n    \"scripting\",\n    \"update\",\n    \"width\",\n    // TODO: find a better solution?\n    \"min-width\",\n    \"max-width\",\n    \"min-height\",\n    \"max-height\"\n].sort().reverse();\n// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\nconst PSEUDO_CLASSES = [\n    \"active\",\n    \"any-link\",\n    \"blank\",\n    \"checked\",\n    \"current\",\n    \"default\",\n    \"defined\",\n    \"dir\",\n    \"disabled\",\n    \"drop\",\n    \"empty\",\n    \"enabled\",\n    \"first\",\n    \"first-child\",\n    \"first-of-type\",\n    \"fullscreen\",\n    \"future\",\n    \"focus\",\n    \"focus-visible\",\n    \"focus-within\",\n    \"has\",\n    \"host\",\n    \"host-context\",\n    \"hover\",\n    \"indeterminate\",\n    \"in-range\",\n    \"invalid\",\n    \"is\",\n    \"lang\",\n    \"last-child\",\n    \"last-of-type\",\n    \"left\",\n    \"link\",\n    \"local-link\",\n    \"not\",\n    \"nth-child\",\n    \"nth-col\",\n    \"nth-last-child\",\n    \"nth-last-col\",\n    \"nth-last-of-type\",\n    \"nth-of-type\",\n    \"only-child\",\n    \"only-of-type\",\n    \"optional\",\n    \"out-of-range\",\n    \"past\",\n    \"placeholder-shown\",\n    \"read-only\",\n    \"read-write\",\n    \"required\",\n    \"right\",\n    \"root\",\n    \"scope\",\n    \"target\",\n    \"target-within\",\n    \"user-invalid\",\n    \"valid\",\n    \"visited\",\n    \"where\" // where()\n].sort().reverse();\n// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements\nconst PSEUDO_ELEMENTS = [\n    \"after\",\n    \"backdrop\",\n    \"before\",\n    \"cue\",\n    \"cue-region\",\n    \"first-letter\",\n    \"first-line\",\n    \"grammar-error\",\n    \"marker\",\n    \"part\",\n    \"placeholder\",\n    \"selection\",\n    \"slotted\",\n    \"spelling-error\"\n].sort().reverse();\nconst ATTRIBUTES = [\n    \"accent-color\",\n    \"align-content\",\n    \"align-items\",\n    \"align-self\",\n    \"alignment-baseline\",\n    \"all\",\n    \"anchor-name\",\n    \"animation\",\n    \"animation-composition\",\n    \"animation-delay\",\n    \"animation-direction\",\n    \"animation-duration\",\n    \"animation-fill-mode\",\n    \"animation-iteration-count\",\n    \"animation-name\",\n    \"animation-play-state\",\n    \"animation-range\",\n    \"animation-range-end\",\n    \"animation-range-start\",\n    \"animation-timeline\",\n    \"animation-timing-function\",\n    \"appearance\",\n    \"aspect-ratio\",\n    \"backdrop-filter\",\n    \"backface-visibility\",\n    \"background\",\n    \"background-attachment\",\n    \"background-blend-mode\",\n    \"background-clip\",\n    \"background-color\",\n    \"background-image\",\n    \"background-origin\",\n    \"background-position\",\n    \"background-position-x\",\n    \"background-position-y\",\n    \"background-repeat\",\n    \"background-size\",\n    \"baseline-shift\",\n    \"block-size\",\n    \"border\",\n    \"border-block\",\n    \"border-block-color\",\n    \"border-block-end\",\n    \"border-block-end-color\",\n    \"border-block-end-style\",\n    \"border-block-end-width\",\n    \"border-block-start\",\n    \"border-block-start-color\",\n    \"border-block-start-style\",\n    \"border-block-start-width\",\n    \"border-block-style\",\n    \"border-block-width\",\n    \"border-bottom\",\n    \"border-bottom-color\",\n    \"border-bottom-left-radius\",\n    \"border-bottom-right-radius\",\n    \"border-bottom-style\",\n    \"border-bottom-width\",\n    \"border-collapse\",\n    \"border-color\",\n    \"border-end-end-radius\",\n    \"border-end-start-radius\",\n    \"border-image\",\n    \"border-image-outset\",\n    \"border-image-repeat\",\n    \"border-image-slice\",\n    \"border-image-source\",\n    \"border-image-width\",\n    \"border-inline\",\n    \"border-inline-color\",\n    \"border-inline-end\",\n    \"border-inline-end-color\",\n    \"border-inline-end-style\",\n    \"border-inline-end-width\",\n    \"border-inline-start\",\n    \"border-inline-start-color\",\n    \"border-inline-start-style\",\n    \"border-inline-start-width\",\n    \"border-inline-style\",\n    \"border-inline-width\",\n    \"border-left\",\n    \"border-left-color\",\n    \"border-left-style\",\n    \"border-left-width\",\n    \"border-radius\",\n    \"border-right\",\n    \"border-right-color\",\n    \"border-right-style\",\n    \"border-right-width\",\n    \"border-spacing\",\n    \"border-start-end-radius\",\n    \"border-start-start-radius\",\n    \"border-style\",\n    \"border-top\",\n    \"border-top-color\",\n    \"border-top-left-radius\",\n    \"border-top-right-radius\",\n    \"border-top-style\",\n    \"border-top-width\",\n    \"border-width\",\n    \"bottom\",\n    \"box-align\",\n    \"box-decoration-break\",\n    \"box-direction\",\n    \"box-flex\",\n    \"box-flex-group\",\n    \"box-lines\",\n    \"box-ordinal-group\",\n    \"box-orient\",\n    \"box-pack\",\n    \"box-shadow\",\n    \"box-sizing\",\n    \"break-after\",\n    \"break-before\",\n    \"break-inside\",\n    \"caption-side\",\n    \"caret-color\",\n    \"clear\",\n    \"clip\",\n    \"clip-path\",\n    \"clip-rule\",\n    \"color\",\n    \"color-interpolation\",\n    \"color-interpolation-filters\",\n    \"color-profile\",\n    \"color-rendering\",\n    \"color-scheme\",\n    \"column-count\",\n    \"column-fill\",\n    \"column-gap\",\n    \"column-rule\",\n    \"column-rule-color\",\n    \"column-rule-style\",\n    \"column-rule-width\",\n    \"column-span\",\n    \"column-width\",\n    \"columns\",\n    \"contain\",\n    \"contain-intrinsic-block-size\",\n    \"contain-intrinsic-height\",\n    \"contain-intrinsic-inline-size\",\n    \"contain-intrinsic-size\",\n    \"contain-intrinsic-width\",\n    \"container\",\n    \"container-name\",\n    \"container-type\",\n    \"content\",\n    \"content-visibility\",\n    \"counter-increment\",\n    \"counter-reset\",\n    \"counter-set\",\n    \"cue\",\n    \"cue-after\",\n    \"cue-before\",\n    \"cursor\",\n    \"cx\",\n    \"cy\",\n    \"direction\",\n    \"display\",\n    \"dominant-baseline\",\n    \"empty-cells\",\n    \"enable-background\",\n    \"field-sizing\",\n    \"fill\",\n    \"fill-opacity\",\n    \"fill-rule\",\n    \"filter\",\n    \"flex\",\n    \"flex-basis\",\n    \"flex-direction\",\n    \"flex-flow\",\n    \"flex-grow\",\n    \"flex-shrink\",\n    \"flex-wrap\",\n    \"float\",\n    \"flood-color\",\n    \"flood-opacity\",\n    \"flow\",\n    \"font\",\n    \"font-display\",\n    \"font-family\",\n    \"font-feature-settings\",\n    \"font-kerning\",\n    \"font-language-override\",\n    \"font-optical-sizing\",\n    \"font-palette\",\n    \"font-size\",\n    \"font-size-adjust\",\n    \"font-smooth\",\n    \"font-smoothing\",\n    \"font-stretch\",\n    \"font-style\",\n    \"font-synthesis\",\n    \"font-synthesis-position\",\n    \"font-synthesis-small-caps\",\n    \"font-synthesis-style\",\n    \"font-synthesis-weight\",\n    \"font-variant\",\n    \"font-variant-alternates\",\n    \"font-variant-caps\",\n    \"font-variant-east-asian\",\n    \"font-variant-emoji\",\n    \"font-variant-ligatures\",\n    \"font-variant-numeric\",\n    \"font-variant-position\",\n    \"font-variation-settings\",\n    \"font-weight\",\n    \"forced-color-adjust\",\n    \"gap\",\n    \"glyph-orientation-horizontal\",\n    \"glyph-orientation-vertical\",\n    \"grid\",\n    \"grid-area\",\n    \"grid-auto-columns\",\n    \"grid-auto-flow\",\n    \"grid-auto-rows\",\n    \"grid-column\",\n    \"grid-column-end\",\n    \"grid-column-start\",\n    \"grid-gap\",\n    \"grid-row\",\n    \"grid-row-end\",\n    \"grid-row-start\",\n    \"grid-template\",\n    \"grid-template-areas\",\n    \"grid-template-columns\",\n    \"grid-template-rows\",\n    \"hanging-punctuation\",\n    \"height\",\n    \"hyphenate-character\",\n    \"hyphenate-limit-chars\",\n    \"hyphens\",\n    \"icon\",\n    \"image-orientation\",\n    \"image-rendering\",\n    \"image-resolution\",\n    \"ime-mode\",\n    \"initial-letter\",\n    \"initial-letter-align\",\n    \"inline-size\",\n    \"inset\",\n    \"inset-area\",\n    \"inset-block\",\n    \"inset-block-end\",\n    \"inset-block-start\",\n    \"inset-inline\",\n    \"inset-inline-end\",\n    \"inset-inline-start\",\n    \"isolation\",\n    \"justify-content\",\n    \"justify-items\",\n    \"justify-self\",\n    \"kerning\",\n    \"left\",\n    \"letter-spacing\",\n    \"lighting-color\",\n    \"line-break\",\n    \"line-height\",\n    \"line-height-step\",\n    \"list-style\",\n    \"list-style-image\",\n    \"list-style-position\",\n    \"list-style-type\",\n    \"margin\",\n    \"margin-block\",\n    \"margin-block-end\",\n    \"margin-block-start\",\n    \"margin-bottom\",\n    \"margin-inline\",\n    \"margin-inline-end\",\n    \"margin-inline-start\",\n    \"margin-left\",\n    \"margin-right\",\n    \"margin-top\",\n    \"margin-trim\",\n    \"marker\",\n    \"marker-end\",\n    \"marker-mid\",\n    \"marker-start\",\n    \"marks\",\n    \"mask\",\n    \"mask-border\",\n    \"mask-border-mode\",\n    \"mask-border-outset\",\n    \"mask-border-repeat\",\n    \"mask-border-slice\",\n    \"mask-border-source\",\n    \"mask-border-width\",\n    \"mask-clip\",\n    \"mask-composite\",\n    \"mask-image\",\n    \"mask-mode\",\n    \"mask-origin\",\n    \"mask-position\",\n    \"mask-repeat\",\n    \"mask-size\",\n    \"mask-type\",\n    \"masonry-auto-flow\",\n    \"math-depth\",\n    \"math-shift\",\n    \"math-style\",\n    \"max-block-size\",\n    \"max-height\",\n    \"max-inline-size\",\n    \"max-width\",\n    \"min-block-size\",\n    \"min-height\",\n    \"min-inline-size\",\n    \"min-width\",\n    \"mix-blend-mode\",\n    \"nav-down\",\n    \"nav-index\",\n    \"nav-left\",\n    \"nav-right\",\n    \"nav-up\",\n    \"none\",\n    \"normal\",\n    \"object-fit\",\n    \"object-position\",\n    \"offset\",\n    \"offset-anchor\",\n    \"offset-distance\",\n    \"offset-path\",\n    \"offset-position\",\n    \"offset-rotate\",\n    \"opacity\",\n    \"order\",\n    \"orphans\",\n    \"outline\",\n    \"outline-color\",\n    \"outline-offset\",\n    \"outline-style\",\n    \"outline-width\",\n    \"overflow\",\n    \"overflow-anchor\",\n    \"overflow-block\",\n    \"overflow-clip-margin\",\n    \"overflow-inline\",\n    \"overflow-wrap\",\n    \"overflow-x\",\n    \"overflow-y\",\n    \"overlay\",\n    \"overscroll-behavior\",\n    \"overscroll-behavior-block\",\n    \"overscroll-behavior-inline\",\n    \"overscroll-behavior-x\",\n    \"overscroll-behavior-y\",\n    \"padding\",\n    \"padding-block\",\n    \"padding-block-end\",\n    \"padding-block-start\",\n    \"padding-bottom\",\n    \"padding-inline\",\n    \"padding-inline-end\",\n    \"padding-inline-start\",\n    \"padding-left\",\n    \"padding-right\",\n    \"padding-top\",\n    \"page\",\n    \"page-break-after\",\n    \"page-break-before\",\n    \"page-break-inside\",\n    \"paint-order\",\n    \"pause\",\n    \"pause-after\",\n    \"pause-before\",\n    \"perspective\",\n    \"perspective-origin\",\n    \"place-content\",\n    \"place-items\",\n    \"place-self\",\n    \"pointer-events\",\n    \"position\",\n    \"position-anchor\",\n    \"position-visibility\",\n    \"print-color-adjust\",\n    \"quotes\",\n    \"r\",\n    \"resize\",\n    \"rest\",\n    \"rest-after\",\n    \"rest-before\",\n    \"right\",\n    \"rotate\",\n    \"row-gap\",\n    \"ruby-align\",\n    \"ruby-position\",\n    \"scale\",\n    \"scroll-behavior\",\n    \"scroll-margin\",\n    \"scroll-margin-block\",\n    \"scroll-margin-block-end\",\n    \"scroll-margin-block-start\",\n    \"scroll-margin-bottom\",\n    \"scroll-margin-inline\",\n    \"scroll-margin-inline-end\",\n    \"scroll-margin-inline-start\",\n    \"scroll-margin-left\",\n    \"scroll-margin-right\",\n    \"scroll-margin-top\",\n    \"scroll-padding\",\n    \"scroll-padding-block\",\n    \"scroll-padding-block-end\",\n    \"scroll-padding-block-start\",\n    \"scroll-padding-bottom\",\n    \"scroll-padding-inline\",\n    \"scroll-padding-inline-end\",\n    \"scroll-padding-inline-start\",\n    \"scroll-padding-left\",\n    \"scroll-padding-right\",\n    \"scroll-padding-top\",\n    \"scroll-snap-align\",\n    \"scroll-snap-stop\",\n    \"scroll-snap-type\",\n    \"scroll-timeline\",\n    \"scroll-timeline-axis\",\n    \"scroll-timeline-name\",\n    \"scrollbar-color\",\n    \"scrollbar-gutter\",\n    \"scrollbar-width\",\n    \"shape-image-threshold\",\n    \"shape-margin\",\n    \"shape-outside\",\n    \"shape-rendering\",\n    \"speak\",\n    \"speak-as\",\n    \"src\",\n    \"stop-color\",\n    \"stop-opacity\",\n    \"stroke\",\n    \"stroke-dasharray\",\n    \"stroke-dashoffset\",\n    \"stroke-linecap\",\n    \"stroke-linejoin\",\n    \"stroke-miterlimit\",\n    \"stroke-opacity\",\n    \"stroke-width\",\n    \"tab-size\",\n    \"table-layout\",\n    \"text-align\",\n    \"text-align-all\",\n    \"text-align-last\",\n    \"text-anchor\",\n    \"text-combine-upright\",\n    \"text-decoration\",\n    \"text-decoration-color\",\n    \"text-decoration-line\",\n    \"text-decoration-skip\",\n    \"text-decoration-skip-ink\",\n    \"text-decoration-style\",\n    \"text-decoration-thickness\",\n    \"text-emphasis\",\n    \"text-emphasis-color\",\n    \"text-emphasis-position\",\n    \"text-emphasis-style\",\n    \"text-indent\",\n    \"text-justify\",\n    \"text-orientation\",\n    \"text-overflow\",\n    \"text-rendering\",\n    \"text-shadow\",\n    \"text-size-adjust\",\n    \"text-transform\",\n    \"text-underline-offset\",\n    \"text-underline-position\",\n    \"text-wrap\",\n    \"text-wrap-mode\",\n    \"text-wrap-style\",\n    \"timeline-scope\",\n    \"top\",\n    \"touch-action\",\n    \"transform\",\n    \"transform-box\",\n    \"transform-origin\",\n    \"transform-style\",\n    \"transition\",\n    \"transition-behavior\",\n    \"transition-delay\",\n    \"transition-duration\",\n    \"transition-property\",\n    \"transition-timing-function\",\n    \"translate\",\n    \"unicode-bidi\",\n    \"user-modify\",\n    \"user-select\",\n    \"vector-effect\",\n    \"vertical-align\",\n    \"view-timeline\",\n    \"view-timeline-axis\",\n    \"view-timeline-inset\",\n    \"view-timeline-name\",\n    \"view-transition-name\",\n    \"visibility\",\n    \"voice-balance\",\n    \"voice-duration\",\n    \"voice-family\",\n    \"voice-pitch\",\n    \"voice-range\",\n    \"voice-rate\",\n    \"voice-stress\",\n    \"voice-volume\",\n    \"white-space\",\n    \"white-space-collapse\",\n    \"widows\",\n    \"width\",\n    \"will-change\",\n    \"word-break\",\n    \"word-spacing\",\n    \"word-wrap\",\n    \"writing-mode\",\n    \"x\",\n    \"y\",\n    \"z-index\",\n    \"zoom\"\n].sort().reverse();\n/*\nLanguage: SCSS\nDescription: Scss is an extension of the syntax of CSS.\nAuthor: Kurt Emch <kurt@kurtemch.com>\nWebsite: https://sass-lang.com\nCategory: common, css, web\n*/ /** @type LanguageFn */ function scss(hljs) {\n    const modes = MODES(hljs);\n    const PSEUDO_ELEMENTS$1 = PSEUDO_ELEMENTS;\n    const PSEUDO_CLASSES$1 = PSEUDO_CLASSES;\n    const AT_IDENTIFIER = \"@[a-z-]+\"; // @font-face\n    const AT_MODIFIERS = \"and or not only\";\n    const IDENT_RE = \"[a-zA-Z-][a-zA-Z0-9_-]*\";\n    const VARIABLE = {\n        className: \"variable\",\n        begin: \"(\\\\$\" + IDENT_RE + \")\\\\b\",\n        relevance: 0\n    };\n    return {\n        name: \"SCSS\",\n        case_insensitive: true,\n        illegal: \"[=/|']\",\n        contains: [\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            // to recognize keyframe 40% etc which are outside the scope of our\n            // attribute value mode\n            modes.CSS_NUMBER_MODE,\n            {\n                className: \"selector-id\",\n                begin: \"#[A-Za-z0-9_-]+\",\n                relevance: 0\n            },\n            {\n                className: \"selector-class\",\n                begin: \"\\\\.[A-Za-z0-9_-]+\",\n                relevance: 0\n            },\n            modes.ATTRIBUTE_SELECTOR_MODE,\n            {\n                className: \"selector-tag\",\n                begin: \"\\\\b(\" + TAGS.join(\"|\") + \")\\\\b\",\n                // was there, before, but why?\n                relevance: 0\n            },\n            {\n                className: \"selector-pseudo\",\n                begin: \":(\" + PSEUDO_CLASSES$1.join(\"|\") + \")\"\n            },\n            {\n                className: \"selector-pseudo\",\n                begin: \":(:)?(\" + PSEUDO_ELEMENTS$1.join(\"|\") + \")\"\n            },\n            VARIABLE,\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                contains: [\n                    modes.CSS_NUMBER_MODE\n                ]\n            },\n            modes.CSS_VARIABLE,\n            {\n                className: \"attribute\",\n                begin: \"\\\\b(\" + ATTRIBUTES.join(\"|\") + \")\\\\b\"\n            },\n            {\n                begin: \"\\\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\\\b\"\n            },\n            {\n                begin: /:/,\n                end: /[;}{]/,\n                relevance: 0,\n                contains: [\n                    modes.BLOCK_COMMENT,\n                    VARIABLE,\n                    modes.HEXCOLOR,\n                    modes.CSS_NUMBER_MODE,\n                    hljs.QUOTE_STRING_MODE,\n                    hljs.APOS_STRING_MODE,\n                    modes.IMPORTANT,\n                    modes.FUNCTION_DISPATCH\n                ]\n            },\n            // matching these here allows us to treat them more like regular CSS\n            // rules so everything between the {} gets regular rule highlighting,\n            // which is what we want for page and font-face\n            {\n                begin: \"@(page|font-face)\",\n                keywords: {\n                    $pattern: AT_IDENTIFIER,\n                    keyword: \"@page @font-face\"\n                }\n            },\n            {\n                begin: \"@\",\n                end: \"[{;]\",\n                returnBegin: true,\n                keywords: {\n                    $pattern: /[a-z-]+/,\n                    keyword: AT_MODIFIERS,\n                    attribute: MEDIA_FEATURES.join(\" \")\n                },\n                contains: [\n                    {\n                        begin: AT_IDENTIFIER,\n                        className: \"keyword\"\n                    },\n                    {\n                        begin: /[a-z-]+(?=:)/,\n                        className: \"attribute\"\n                    },\n                    VARIABLE,\n                    hljs.QUOTE_STRING_MODE,\n                    hljs.APOS_STRING_MODE,\n                    modes.HEXCOLOR,\n                    modes.CSS_NUMBER_MODE\n                ]\n            },\n            modes.FUNCTION_DISPATCH\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/scss.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/shell.js":
/*!*********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/shell.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ shell)\n/* harmony export */ });\n/*\nLanguage: Shell Session\nRequires: bash.js\nAuthor: TSUYUSATO Kitsune <make.just.on@gmail.com>\nCategory: common\nAudit: 2020\n*/ /** @type LanguageFn */ function shell(hljs) {\n    return {\n        name: \"Shell Session\",\n        aliases: [\n            \"console\",\n            \"shellsession\"\n        ],\n        contains: [\n            {\n                className: \"meta.prompt\",\n                // We cannot add \\s (spaces) in the regular expression otherwise it will be too broad and produce unexpected result.\n                // For instance, in the following example, it would match \"echo /path/to/home >\" as a prompt:\n                // echo /path/to/home > t.exe\n                begin: /^\\s{0,3}[/~\\w\\d[\\]()@-]*[>%$#][ ]?/,\n                starts: {\n                    end: /[^\\\\](?=\\s*$)/,\n                    subLanguage: \"bash\"\n                }\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy9zaGVsbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7OztBQU1BLEdBRUEscUJBQXFCLEdBQ3JCLFNBQVNBLE1BQU1DLElBQUk7SUFDakIsT0FBTztRQUNMQyxNQUFNO1FBQ05DLFNBQVM7WUFDUDtZQUNBO1NBQ0Q7UUFDREMsVUFBVTtZQUNSO2dCQUNFQyxXQUFXO2dCQUNYLG9IQUFvSDtnQkFDcEgsNkZBQTZGO2dCQUM3Riw2QkFBNkI7Z0JBQzdCQyxPQUFPO2dCQUNQQyxRQUFRO29CQUNOQyxLQUFLO29CQUNMQyxhQUFhO2dCQUNmO1lBQ0Y7U0FDRDtJQUNIO0FBQ0Y7QUFFNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYXJkd2FyZS1kb2MtY2hhdGJvdC8uL25vZGVfbW9kdWxlcy9oaWdobGlnaHQuanMvZXMvbGFuZ3VhZ2VzL3NoZWxsLmpzPzhiYWUiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbkxhbmd1YWdlOiBTaGVsbCBTZXNzaW9uXG5SZXF1aXJlczogYmFzaC5qc1xuQXV0aG9yOiBUU1VZVVNBVE8gS2l0c3VuZSA8bWFrZS5qdXN0Lm9uQGdtYWlsLmNvbT5cbkNhdGVnb3J5OiBjb21tb25cbkF1ZGl0OiAyMDIwXG4qL1xuXG4vKiogQHR5cGUgTGFuZ3VhZ2VGbiAqL1xuZnVuY3Rpb24gc2hlbGwoaGxqcykge1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdTaGVsbCBTZXNzaW9uJyxcbiAgICBhbGlhc2VzOiBbXG4gICAgICAnY29uc29sZScsXG4gICAgICAnc2hlbGxzZXNzaW9uJ1xuICAgIF0sXG4gICAgY29udGFpbnM6IFtcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnbWV0YS5wcm9tcHQnLFxuICAgICAgICAvLyBXZSBjYW5ub3QgYWRkIFxccyAoc3BhY2VzKSBpbiB0aGUgcmVndWxhciBleHByZXNzaW9uIG90aGVyd2lzZSBpdCB3aWxsIGJlIHRvbyBicm9hZCBhbmQgcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdC5cbiAgICAgICAgLy8gRm9yIGluc3RhbmNlLCBpbiB0aGUgZm9sbG93aW5nIGV4YW1wbGUsIGl0IHdvdWxkIG1hdGNoIFwiZWNobyAvcGF0aC90by9ob21lID5cIiBhcyBhIHByb21wdDpcbiAgICAgICAgLy8gZWNobyAvcGF0aC90by9ob21lID4gdC5leGVcbiAgICAgICAgYmVnaW46IC9eXFxzezAsM31bL35cXHdcXGRbXFxdKClALV0qWz4lJCNdWyBdPy8sXG4gICAgICAgIHN0YXJ0czoge1xuICAgICAgICAgIGVuZDogL1teXFxcXF0oPz1cXHMqJCkvLFxuICAgICAgICAgIHN1Ykxhbmd1YWdlOiAnYmFzaCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF1cbiAgfTtcbn1cblxuZXhwb3J0IHsgc2hlbGwgYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbInNoZWxsIiwiaGxqcyIsIm5hbWUiLCJhbGlhc2VzIiwiY29udGFpbnMiLCJjbGFzc05hbWUiLCJiZWdpbiIsInN0YXJ0cyIsImVuZCIsInN1Ykxhbmd1YWdlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/shell.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/sql.js":
/*!*******************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/sql.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ sql)\n/* harmony export */ });\n/*\n Language: SQL\n Website: https://en.wikipedia.org/wiki/SQL\n Category: common, database\n */ /*\n\nGoals:\n\nSQL is intended to highlight basic/common SQL keywords and expressions\n\n- If pretty much every single SQL server includes supports, then it's a canidate.\n- It is NOT intended to include tons of vendor specific keywords (Oracle, MySQL,\n  PostgreSQL) although the list of data types is purposely a bit more expansive.\n- For more specific SQL grammars please see:\n  - PostgreSQL and PL/pgSQL - core\n  - T-SQL - https://github.com/highlightjs/highlightjs-tsql\n  - sql_more (core)\n\n */ function sql(hljs) {\n    const regex = hljs.regex;\n    const COMMENT_MODE = hljs.COMMENT(\"--\", \"$\");\n    const STRING = {\n        scope: \"string\",\n        variants: [\n            {\n                begin: /'/,\n                end: /'/,\n                contains: [\n                    {\n                        match: /''/\n                    }\n                ]\n            }\n        ]\n    };\n    const QUOTED_IDENTIFIER = {\n        begin: /\"/,\n        end: /\"/,\n        contains: [\n            {\n                match: /\"\"/\n            }\n        ]\n    };\n    const LITERALS = [\n        \"true\",\n        \"false\",\n        // Not sure it's correct to call NULL literal, and clauses like IS [NOT] NULL look strange that way.\n        // \"null\",\n        \"unknown\"\n    ];\n    const MULTI_WORD_TYPES = [\n        \"double precision\",\n        \"large object\",\n        \"with timezone\",\n        \"without timezone\"\n    ];\n    const TYPES = [\n        \"bigint\",\n        \"binary\",\n        \"blob\",\n        \"boolean\",\n        \"char\",\n        \"character\",\n        \"clob\",\n        \"date\",\n        \"dec\",\n        \"decfloat\",\n        \"decimal\",\n        \"float\",\n        \"int\",\n        \"integer\",\n        \"interval\",\n        \"nchar\",\n        \"nclob\",\n        \"national\",\n        \"numeric\",\n        \"real\",\n        \"row\",\n        \"smallint\",\n        \"time\",\n        \"timestamp\",\n        \"varchar\",\n        \"varying\",\n        \"varbinary\"\n    ];\n    const NON_RESERVED_WORDS = [\n        \"add\",\n        \"asc\",\n        \"collation\",\n        \"desc\",\n        \"final\",\n        \"first\",\n        \"last\",\n        \"view\"\n    ];\n    // https://jakewheat.github.io/sql-overview/sql-2016-foundation-grammar.html#reserved-word\n    const RESERVED_WORDS = [\n        \"abs\",\n        \"acos\",\n        \"all\",\n        \"allocate\",\n        \"alter\",\n        \"and\",\n        \"any\",\n        \"are\",\n        \"array\",\n        \"array_agg\",\n        \"array_max_cardinality\",\n        \"as\",\n        \"asensitive\",\n        \"asin\",\n        \"asymmetric\",\n        \"at\",\n        \"atan\",\n        \"atomic\",\n        \"authorization\",\n        \"avg\",\n        \"begin\",\n        \"begin_frame\",\n        \"begin_partition\",\n        \"between\",\n        \"bigint\",\n        \"binary\",\n        \"blob\",\n        \"boolean\",\n        \"both\",\n        \"by\",\n        \"call\",\n        \"called\",\n        \"cardinality\",\n        \"cascaded\",\n        \"case\",\n        \"cast\",\n        \"ceil\",\n        \"ceiling\",\n        \"char\",\n        \"char_length\",\n        \"character\",\n        \"character_length\",\n        \"check\",\n        \"classifier\",\n        \"clob\",\n        \"close\",\n        \"coalesce\",\n        \"collate\",\n        \"collect\",\n        \"column\",\n        \"commit\",\n        \"condition\",\n        \"connect\",\n        \"constraint\",\n        \"contains\",\n        \"convert\",\n        \"copy\",\n        \"corr\",\n        \"corresponding\",\n        \"cos\",\n        \"cosh\",\n        \"count\",\n        \"covar_pop\",\n        \"covar_samp\",\n        \"create\",\n        \"cross\",\n        \"cube\",\n        \"cume_dist\",\n        \"current\",\n        \"current_catalog\",\n        \"current_date\",\n        \"current_default_transform_group\",\n        \"current_path\",\n        \"current_role\",\n        \"current_row\",\n        \"current_schema\",\n        \"current_time\",\n        \"current_timestamp\",\n        \"current_path\",\n        \"current_role\",\n        \"current_transform_group_for_type\",\n        \"current_user\",\n        \"cursor\",\n        \"cycle\",\n        \"date\",\n        \"day\",\n        \"deallocate\",\n        \"dec\",\n        \"decimal\",\n        \"decfloat\",\n        \"declare\",\n        \"default\",\n        \"define\",\n        \"delete\",\n        \"dense_rank\",\n        \"deref\",\n        \"describe\",\n        \"deterministic\",\n        \"disconnect\",\n        \"distinct\",\n        \"double\",\n        \"drop\",\n        \"dynamic\",\n        \"each\",\n        \"element\",\n        \"else\",\n        \"empty\",\n        \"end\",\n        \"end_frame\",\n        \"end_partition\",\n        \"end-exec\",\n        \"equals\",\n        \"escape\",\n        \"every\",\n        \"except\",\n        \"exec\",\n        \"execute\",\n        \"exists\",\n        \"exp\",\n        \"external\",\n        \"extract\",\n        \"false\",\n        \"fetch\",\n        \"filter\",\n        \"first_value\",\n        \"float\",\n        \"floor\",\n        \"for\",\n        \"foreign\",\n        \"frame_row\",\n        \"free\",\n        \"from\",\n        \"full\",\n        \"function\",\n        \"fusion\",\n        \"get\",\n        \"global\",\n        \"grant\",\n        \"group\",\n        \"grouping\",\n        \"groups\",\n        \"having\",\n        \"hold\",\n        \"hour\",\n        \"identity\",\n        \"in\",\n        \"indicator\",\n        \"initial\",\n        \"inner\",\n        \"inout\",\n        \"insensitive\",\n        \"insert\",\n        \"int\",\n        \"integer\",\n        \"intersect\",\n        \"intersection\",\n        \"interval\",\n        \"into\",\n        \"is\",\n        \"join\",\n        \"json_array\",\n        \"json_arrayagg\",\n        \"json_exists\",\n        \"json_object\",\n        \"json_objectagg\",\n        \"json_query\",\n        \"json_table\",\n        \"json_table_primitive\",\n        \"json_value\",\n        \"lag\",\n        \"language\",\n        \"large\",\n        \"last_value\",\n        \"lateral\",\n        \"lead\",\n        \"leading\",\n        \"left\",\n        \"like\",\n        \"like_regex\",\n        \"listagg\",\n        \"ln\",\n        \"local\",\n        \"localtime\",\n        \"localtimestamp\",\n        \"log\",\n        \"log10\",\n        \"lower\",\n        \"match\",\n        \"match_number\",\n        \"match_recognize\",\n        \"matches\",\n        \"max\",\n        \"member\",\n        \"merge\",\n        \"method\",\n        \"min\",\n        \"minute\",\n        \"mod\",\n        \"modifies\",\n        \"module\",\n        \"month\",\n        \"multiset\",\n        \"national\",\n        \"natural\",\n        \"nchar\",\n        \"nclob\",\n        \"new\",\n        \"no\",\n        \"none\",\n        \"normalize\",\n        \"not\",\n        \"nth_value\",\n        \"ntile\",\n        \"null\",\n        \"nullif\",\n        \"numeric\",\n        \"octet_length\",\n        \"occurrences_regex\",\n        \"of\",\n        \"offset\",\n        \"old\",\n        \"omit\",\n        \"on\",\n        \"one\",\n        \"only\",\n        \"open\",\n        \"or\",\n        \"order\",\n        \"out\",\n        \"outer\",\n        \"over\",\n        \"overlaps\",\n        \"overlay\",\n        \"parameter\",\n        \"partition\",\n        \"pattern\",\n        \"per\",\n        \"percent\",\n        \"percent_rank\",\n        \"percentile_cont\",\n        \"percentile_disc\",\n        \"period\",\n        \"portion\",\n        \"position\",\n        \"position_regex\",\n        \"power\",\n        \"precedes\",\n        \"precision\",\n        \"prepare\",\n        \"primary\",\n        \"procedure\",\n        \"ptf\",\n        \"range\",\n        \"rank\",\n        \"reads\",\n        \"real\",\n        \"recursive\",\n        \"ref\",\n        \"references\",\n        \"referencing\",\n        \"regr_avgx\",\n        \"regr_avgy\",\n        \"regr_count\",\n        \"regr_intercept\",\n        \"regr_r2\",\n        \"regr_slope\",\n        \"regr_sxx\",\n        \"regr_sxy\",\n        \"regr_syy\",\n        \"release\",\n        \"result\",\n        \"return\",\n        \"returns\",\n        \"revoke\",\n        \"right\",\n        \"rollback\",\n        \"rollup\",\n        \"row\",\n        \"row_number\",\n        \"rows\",\n        \"running\",\n        \"savepoint\",\n        \"scope\",\n        \"scroll\",\n        \"search\",\n        \"second\",\n        \"seek\",\n        \"select\",\n        \"sensitive\",\n        \"session_user\",\n        \"set\",\n        \"show\",\n        \"similar\",\n        \"sin\",\n        \"sinh\",\n        \"skip\",\n        \"smallint\",\n        \"some\",\n        \"specific\",\n        \"specifictype\",\n        \"sql\",\n        \"sqlexception\",\n        \"sqlstate\",\n        \"sqlwarning\",\n        \"sqrt\",\n        \"start\",\n        \"static\",\n        \"stddev_pop\",\n        \"stddev_samp\",\n        \"submultiset\",\n        \"subset\",\n        \"substring\",\n        \"substring_regex\",\n        \"succeeds\",\n        \"sum\",\n        \"symmetric\",\n        \"system\",\n        \"system_time\",\n        \"system_user\",\n        \"table\",\n        \"tablesample\",\n        \"tan\",\n        \"tanh\",\n        \"then\",\n        \"time\",\n        \"timestamp\",\n        \"timezone_hour\",\n        \"timezone_minute\",\n        \"to\",\n        \"trailing\",\n        \"translate\",\n        \"translate_regex\",\n        \"translation\",\n        \"treat\",\n        \"trigger\",\n        \"trim\",\n        \"trim_array\",\n        \"true\",\n        \"truncate\",\n        \"uescape\",\n        \"union\",\n        \"unique\",\n        \"unknown\",\n        \"unnest\",\n        \"update\",\n        \"upper\",\n        \"user\",\n        \"using\",\n        \"value\",\n        \"values\",\n        \"value_of\",\n        \"var_pop\",\n        \"var_samp\",\n        \"varbinary\",\n        \"varchar\",\n        \"varying\",\n        \"versioning\",\n        \"when\",\n        \"whenever\",\n        \"where\",\n        \"width_bucket\",\n        \"window\",\n        \"with\",\n        \"within\",\n        \"without\",\n        \"year\"\n    ];\n    // these are reserved words we have identified to be functions\n    // and should only be highlighted in a dispatch-like context\n    // ie, array_agg(...), etc.\n    const RESERVED_FUNCTIONS = [\n        \"abs\",\n        \"acos\",\n        \"array_agg\",\n        \"asin\",\n        \"atan\",\n        \"avg\",\n        \"cast\",\n        \"ceil\",\n        \"ceiling\",\n        \"coalesce\",\n        \"corr\",\n        \"cos\",\n        \"cosh\",\n        \"count\",\n        \"covar_pop\",\n        \"covar_samp\",\n        \"cume_dist\",\n        \"dense_rank\",\n        \"deref\",\n        \"element\",\n        \"exp\",\n        \"extract\",\n        \"first_value\",\n        \"floor\",\n        \"json_array\",\n        \"json_arrayagg\",\n        \"json_exists\",\n        \"json_object\",\n        \"json_objectagg\",\n        \"json_query\",\n        \"json_table\",\n        \"json_table_primitive\",\n        \"json_value\",\n        \"lag\",\n        \"last_value\",\n        \"lead\",\n        \"listagg\",\n        \"ln\",\n        \"log\",\n        \"log10\",\n        \"lower\",\n        \"max\",\n        \"min\",\n        \"mod\",\n        \"nth_value\",\n        \"ntile\",\n        \"nullif\",\n        \"percent_rank\",\n        \"percentile_cont\",\n        \"percentile_disc\",\n        \"position\",\n        \"position_regex\",\n        \"power\",\n        \"rank\",\n        \"regr_avgx\",\n        \"regr_avgy\",\n        \"regr_count\",\n        \"regr_intercept\",\n        \"regr_r2\",\n        \"regr_slope\",\n        \"regr_sxx\",\n        \"regr_sxy\",\n        \"regr_syy\",\n        \"row_number\",\n        \"sin\",\n        \"sinh\",\n        \"sqrt\",\n        \"stddev_pop\",\n        \"stddev_samp\",\n        \"substring\",\n        \"substring_regex\",\n        \"sum\",\n        \"tan\",\n        \"tanh\",\n        \"translate\",\n        \"translate_regex\",\n        \"treat\",\n        \"trim\",\n        \"trim_array\",\n        \"unnest\",\n        \"upper\",\n        \"value_of\",\n        \"var_pop\",\n        \"var_samp\",\n        \"width_bucket\"\n    ];\n    // these functions can\n    const POSSIBLE_WITHOUT_PARENS = [\n        \"current_catalog\",\n        \"current_date\",\n        \"current_default_transform_group\",\n        \"current_path\",\n        \"current_role\",\n        \"current_schema\",\n        \"current_transform_group_for_type\",\n        \"current_user\",\n        \"session_user\",\n        \"system_time\",\n        \"system_user\",\n        \"current_time\",\n        \"localtime\",\n        \"current_timestamp\",\n        \"localtimestamp\"\n    ];\n    // those exist to boost relevance making these very\n    // \"SQL like\" keyword combos worth +1 extra relevance\n    const COMBOS = [\n        \"create table\",\n        \"insert into\",\n        \"primary key\",\n        \"foreign key\",\n        \"not null\",\n        \"alter table\",\n        \"add constraint\",\n        \"grouping sets\",\n        \"on overflow\",\n        \"character set\",\n        \"respect nulls\",\n        \"ignore nulls\",\n        \"nulls first\",\n        \"nulls last\",\n        \"depth first\",\n        \"breadth first\"\n    ];\n    const FUNCTIONS = RESERVED_FUNCTIONS;\n    const KEYWORDS = [\n        ...RESERVED_WORDS,\n        ...NON_RESERVED_WORDS\n    ].filter((keyword)=>{\n        return !RESERVED_FUNCTIONS.includes(keyword);\n    });\n    const VARIABLE = {\n        scope: \"variable\",\n        match: /@[a-z0-9][a-z0-9_]*/\n    };\n    const OPERATOR = {\n        scope: \"operator\",\n        match: /[-+*/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,\n        relevance: 0\n    };\n    const FUNCTION_CALL = {\n        match: regex.concat(/\\b/, regex.either(...FUNCTIONS), /\\s*\\(/),\n        relevance: 0,\n        keywords: {\n            built_in: FUNCTIONS\n        }\n    };\n    // turns a multi-word keyword combo into a regex that doesn't\n    // care about extra whitespace etc.\n    // input: \"START QUERY\"\n    // output: /\\bSTART\\s+QUERY\\b/\n    function kws_to_regex(list) {\n        return regex.concat(/\\b/, regex.either(...list.map((kw)=>{\n            return kw.replace(/\\s+/, \"\\\\s+\");\n        })), /\\b/);\n    }\n    const MULTI_WORD_KEYWORDS = {\n        scope: \"keyword\",\n        match: kws_to_regex(COMBOS),\n        relevance: 0\n    };\n    // keywords with less than 3 letters are reduced in relevancy\n    function reduceRelevancy(list, { exceptions, when } = {}) {\n        const qualifyFn = when;\n        exceptions = exceptions || [];\n        return list.map((item)=>{\n            if (item.match(/\\|\\d+$/) || exceptions.includes(item)) {\n                return item;\n            } else if (qualifyFn(item)) {\n                return `${item}|0`;\n            } else {\n                return item;\n            }\n        });\n    }\n    return {\n        name: \"SQL\",\n        case_insensitive: true,\n        // does not include {} or HTML tags `</`\n        illegal: /[{}]|<\\//,\n        keywords: {\n            $pattern: /\\b[\\w\\.]+/,\n            keyword: reduceRelevancy(KEYWORDS, {\n                when: (x)=>x.length < 3\n            }),\n            literal: LITERALS,\n            type: TYPES,\n            built_in: POSSIBLE_WITHOUT_PARENS\n        },\n        contains: [\n            {\n                scope: \"type\",\n                match: kws_to_regex(MULTI_WORD_TYPES)\n            },\n            MULTI_WORD_KEYWORDS,\n            FUNCTION_CALL,\n            VARIABLE,\n            STRING,\n            QUOTED_IDENTIFIER,\n            hljs.C_NUMBER_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            COMMENT_MODE,\n            OPERATOR\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/sql.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/swift.js":
/*!*********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/swift.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ swift)\n/* harmony export */ });\n/**\n * @param {string} value\n * @returns {RegExp}\n * */ /**\n * @param {RegExp | string } re\n * @returns {string}\n */ function source(re) {\n    if (!re) return null;\n    if (typeof re === \"string\") return re;\n    return re.source;\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */ function lookahead(re) {\n    return concat(\"(?=\", re, \")\");\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */ function concat(...args) {\n    const joined = args.map((x)=>source(x)).join(\"\");\n    return joined;\n}\n/**\n * @param { Array<string | RegExp | Object> } args\n * @returns {object}\n */ function stripOptionsFromArgs(args) {\n    const opts = args[args.length - 1];\n    if (typeof opts === \"object\" && opts.constructor === Object) {\n        args.splice(args.length - 1, 1);\n        return opts;\n    } else {\n        return {};\n    }\n}\n/** @typedef { {capture?: boolean} } RegexEitherOptions */ /**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]} args\n * @returns {string}\n */ function either(...args) {\n    /** @type { object & {capture?: boolean} }  */ const opts = stripOptionsFromArgs(args);\n    const joined = \"(\" + (opts.capture ? \"\" : \"?:\") + args.map((x)=>source(x)).join(\"|\") + \")\";\n    return joined;\n}\nconst keywordWrapper = (keyword)=>concat(/\\b/, keyword, /\\w$/.test(keyword) ? /\\b/ : /\\B/);\n// Keywords that require a leading dot.\nconst dotKeywords = [\n    \"Protocol\",\n    \"Type\" // contextual\n].map(keywordWrapper);\n// Keywords that may have a leading dot.\nconst optionalDotKeywords = [\n    \"init\",\n    \"self\"\n].map(keywordWrapper);\n// should register as keyword, not type\nconst keywordTypes = [\n    \"Any\",\n    \"Self\"\n];\n// Regular keywords and literals.\nconst keywords = [\n    // strings below will be fed into the regular `keywords` engine while regex\n    // will result in additional modes being created to scan for those keywords to\n    // avoid conflicts with other rules\n    \"actor\",\n    \"any\",\n    \"associatedtype\",\n    \"async\",\n    \"await\",\n    /as\\?/,\n    /as!/,\n    \"as\",\n    \"borrowing\",\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"class\",\n    \"consume\",\n    \"consuming\",\n    \"continue\",\n    \"convenience\",\n    \"copy\",\n    \"default\",\n    \"defer\",\n    \"deinit\",\n    \"didSet\",\n    \"distributed\",\n    \"do\",\n    \"dynamic\",\n    \"each\",\n    \"else\",\n    \"enum\",\n    \"extension\",\n    \"fallthrough\",\n    /fileprivate\\(set\\)/,\n    \"fileprivate\",\n    \"final\",\n    \"for\",\n    \"func\",\n    \"get\",\n    \"guard\",\n    \"if\",\n    \"import\",\n    \"indirect\",\n    \"infix\",\n    /init\\?/,\n    /init!/,\n    \"inout\",\n    /internal\\(set\\)/,\n    \"internal\",\n    \"in\",\n    \"is\",\n    \"isolated\",\n    \"nonisolated\",\n    \"lazy\",\n    \"let\",\n    \"macro\",\n    \"mutating\",\n    \"nonmutating\",\n    /open\\(set\\)/,\n    \"open\",\n    \"operator\",\n    \"optional\",\n    \"override\",\n    \"package\",\n    \"postfix\",\n    \"precedencegroup\",\n    \"prefix\",\n    /private\\(set\\)/,\n    \"private\",\n    \"protocol\",\n    /public\\(set\\)/,\n    \"public\",\n    \"repeat\",\n    \"required\",\n    \"rethrows\",\n    \"return\",\n    \"set\",\n    \"some\",\n    \"static\",\n    \"struct\",\n    \"subscript\",\n    \"super\",\n    \"switch\",\n    \"throws\",\n    \"throw\",\n    /try\\?/,\n    /try!/,\n    \"try\",\n    \"typealias\",\n    /unowned\\(safe\\)/,\n    /unowned\\(unsafe\\)/,\n    \"unowned\",\n    \"var\",\n    \"weak\",\n    \"where\",\n    \"while\",\n    \"willSet\" // contextual\n];\n// NOTE: Contextual keywords are reserved only in specific contexts.\n// Ideally, these should be matched using modes to avoid false positives.\n// Literals.\nconst literals = [\n    \"false\",\n    \"nil\",\n    \"true\"\n];\n// Keywords used in precedence groups.\nconst precedencegroupKeywords = [\n    \"assignment\",\n    \"associativity\",\n    \"higherThan\",\n    \"left\",\n    \"lowerThan\",\n    \"none\",\n    \"right\"\n];\n// Keywords that start with a number sign (#).\n// #(un)available is handled separately.\nconst numberSignKeywords = [\n    \"#colorLiteral\",\n    \"#column\",\n    \"#dsohandle\",\n    \"#else\",\n    \"#elseif\",\n    \"#endif\",\n    \"#error\",\n    \"#file\",\n    \"#fileID\",\n    \"#fileLiteral\",\n    \"#filePath\",\n    \"#function\",\n    \"#if\",\n    \"#imageLiteral\",\n    \"#keyPath\",\n    \"#line\",\n    \"#selector\",\n    \"#sourceLocation\",\n    \"#warning\"\n];\n// Global functions in the Standard Library.\nconst builtIns = [\n    \"abs\",\n    \"all\",\n    \"any\",\n    \"assert\",\n    \"assertionFailure\",\n    \"debugPrint\",\n    \"dump\",\n    \"fatalError\",\n    \"getVaList\",\n    \"isKnownUniquelyReferenced\",\n    \"max\",\n    \"min\",\n    \"numericCast\",\n    \"pointwiseMax\",\n    \"pointwiseMin\",\n    \"precondition\",\n    \"preconditionFailure\",\n    \"print\",\n    \"readLine\",\n    \"repeatElement\",\n    \"sequence\",\n    \"stride\",\n    \"swap\",\n    \"swift_unboxFromSwiftValueWithType\",\n    \"transcode\",\n    \"type\",\n    \"unsafeBitCast\",\n    \"unsafeDowncast\",\n    \"withExtendedLifetime\",\n    \"withUnsafeMutablePointer\",\n    \"withUnsafePointer\",\n    \"withVaList\",\n    \"withoutActuallyEscaping\",\n    \"zip\"\n];\n// Valid first characters for operators.\nconst operatorHead = either(/[/=\\-+!*%<>&|^~?]/, /[\\u00A1-\\u00A7]/, /[\\u00A9\\u00AB]/, /[\\u00AC\\u00AE]/, /[\\u00B0\\u00B1]/, /[\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7]/, /[\\u2016-\\u2017]/, /[\\u2020-\\u2027]/, /[\\u2030-\\u203E]/, /[\\u2041-\\u2053]/, /[\\u2055-\\u205E]/, /[\\u2190-\\u23FF]/, /[\\u2500-\\u2775]/, /[\\u2794-\\u2BFF]/, /[\\u2E00-\\u2E7F]/, /[\\u3001-\\u3003]/, /[\\u3008-\\u3020]/, /[\\u3030]/);\n// Valid characters for operators.\nconst operatorCharacter = either(operatorHead, /[\\u0300-\\u036F]/, /[\\u1DC0-\\u1DFF]/, /[\\u20D0-\\u20FF]/, /[\\uFE00-\\uFE0F]/, /[\\uFE20-\\uFE2F]/);\n// Valid operator.\nconst operator = concat(operatorHead, operatorCharacter, \"*\");\n// Valid first characters for identifiers.\nconst identifierHead = either(/[a-zA-Z_]/, /[\\u00A8\\u00AA\\u00AD\\u00AF\\u00B2-\\u00B5\\u00B7-\\u00BA]/, /[\\u00BC-\\u00BE\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF]/, /[\\u0100-\\u02FF\\u0370-\\u167F\\u1681-\\u180D\\u180F-\\u1DBF]/, /[\\u1E00-\\u1FFF]/, /[\\u200B-\\u200D\\u202A-\\u202E\\u203F-\\u2040\\u2054\\u2060-\\u206F]/, /[\\u2070-\\u20CF\\u2100-\\u218F\\u2460-\\u24FF\\u2776-\\u2793]/, /[\\u2C00-\\u2DFF\\u2E80-\\u2FFF]/, /[\\u3004-\\u3007\\u3021-\\u302F\\u3031-\\u303F\\u3040-\\uD7FF]/, /[\\uF900-\\uFD3D\\uFD40-\\uFDCF\\uFDF0-\\uFE1F\\uFE30-\\uFE44]/, /[\\uFE47-\\uFEFE\\uFF00-\\uFFFD]/ // Should be /[\\uFE47-\\uFFFD]/, but we have to exclude FEFF.\n);\n// Valid characters for identifiers.\nconst identifierCharacter = either(identifierHead, /\\d/, /[\\u0300-\\u036F\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE20-\\uFE2F]/);\n// Valid identifier.\nconst identifier = concat(identifierHead, identifierCharacter, \"*\");\n// Valid type identifier.\nconst typeIdentifier = concat(/[A-Z]/, identifierCharacter, \"*\");\n// Built-in attributes, which are highlighted as keywords.\n// @available is handled separately.\n// https://docs.swift.org/swift-book/documentation/the-swift-programming-language/attributes\nconst keywordAttributes = [\n    \"attached\",\n    \"autoclosure\",\n    concat(/convention\\(/, either(\"swift\", \"block\", \"c\"), /\\)/),\n    \"discardableResult\",\n    \"dynamicCallable\",\n    \"dynamicMemberLookup\",\n    \"escaping\",\n    \"freestanding\",\n    \"frozen\",\n    \"GKInspectable\",\n    \"IBAction\",\n    \"IBDesignable\",\n    \"IBInspectable\",\n    \"IBOutlet\",\n    \"IBSegueAction\",\n    \"inlinable\",\n    \"main\",\n    \"nonobjc\",\n    \"NSApplicationMain\",\n    \"NSCopying\",\n    \"NSManaged\",\n    concat(/objc\\(/, identifier, /\\)/),\n    \"objc\",\n    \"objcMembers\",\n    \"propertyWrapper\",\n    \"requires_stored_property_inits\",\n    \"resultBuilder\",\n    \"Sendable\",\n    \"testable\",\n    \"UIApplicationMain\",\n    \"unchecked\",\n    \"unknown\",\n    \"usableFromInline\",\n    \"warn_unqualified_access\"\n];\n// Contextual keywords used in @available and #(un)available.\nconst availabilityKeywords = [\n    \"iOS\",\n    \"iOSApplicationExtension\",\n    \"macOS\",\n    \"macOSApplicationExtension\",\n    \"macCatalyst\",\n    \"macCatalystApplicationExtension\",\n    \"watchOS\",\n    \"watchOSApplicationExtension\",\n    \"tvOS\",\n    \"tvOSApplicationExtension\",\n    \"swift\"\n];\n/*\nLanguage: Swift\nDescription: Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.\nAuthor: Steven Van Impe <steven.vanimpe@icloud.com>\nContributors: Chris Eidhof <chris@eidhof.nl>, Nate Cook <natecook@gmail.com>, Alexander Lichter <manniL@gmx.net>, Richard Gibson <gibson042@github>\nWebsite: https://swift.org\nCategory: common, system\n*/ /** @type LanguageFn */ function swift(hljs) {\n    const WHITESPACE = {\n        match: /\\s+/,\n        relevance: 0\n    };\n    // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID411\n    const BLOCK_COMMENT = hljs.COMMENT(\"/\\\\*\", \"\\\\*/\", {\n        contains: [\n            \"self\"\n        ]\n    });\n    const COMMENTS = [\n        hljs.C_LINE_COMMENT_MODE,\n        BLOCK_COMMENT\n    ];\n    // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID413\n    // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html\n    const DOT_KEYWORD = {\n        match: [\n            /\\./,\n            either(...dotKeywords, ...optionalDotKeywords)\n        ],\n        className: {\n            2: \"keyword\"\n        }\n    };\n    const KEYWORD_GUARD = {\n        // Consume .keyword to prevent highlighting properties and methods as keywords.\n        match: concat(/\\./, either(...keywords)),\n        relevance: 0\n    };\n    const PLAIN_KEYWORDS = keywords.filter((kw)=>typeof kw === \"string\").concat([\n        \"_|0\"\n    ]); // seems common, so 0 relevance\n    const REGEX_KEYWORDS = keywords.filter((kw)=>typeof kw !== \"string\") // find regex\n    .concat(keywordTypes).map(keywordWrapper);\n    const KEYWORD = {\n        variants: [\n            {\n                className: \"keyword\",\n                match: either(...REGEX_KEYWORDS, ...optionalDotKeywords)\n            }\n        ]\n    };\n    // find all the regular keywords\n    const KEYWORDS = {\n        $pattern: either(/\\b\\w+/, /#\\w+/ // number keywords\n        ),\n        keyword: PLAIN_KEYWORDS.concat(numberSignKeywords),\n        literal: literals\n    };\n    const KEYWORD_MODES = [\n        DOT_KEYWORD,\n        KEYWORD_GUARD,\n        KEYWORD\n    ];\n    // https://github.com/apple/swift/tree/main/stdlib/public/core\n    const BUILT_IN_GUARD = {\n        // Consume .built_in to prevent highlighting properties and methods.\n        match: concat(/\\./, either(...builtIns)),\n        relevance: 0\n    };\n    const BUILT_IN = {\n        className: \"built_in\",\n        match: concat(/\\b/, either(...builtIns), /(?=\\()/)\n    };\n    const BUILT_INS = [\n        BUILT_IN_GUARD,\n        BUILT_IN\n    ];\n    // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418\n    const OPERATOR_GUARD = {\n        // Prevent -> from being highlighting as an operator.\n        match: /->/,\n        relevance: 0\n    };\n    const OPERATOR = {\n        className: \"operator\",\n        relevance: 0,\n        variants: [\n            {\n                match: operator\n            },\n            {\n                // dot-operator: only operators that start with a dot are allowed to use dots as\n                // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more\n                // characters that may also include dots.\n                match: `\\\\.(\\\\.|${operatorCharacter})+`\n            }\n        ]\n    };\n    const OPERATORS = [\n        OPERATOR_GUARD,\n        OPERATOR\n    ];\n    // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_numeric-literal\n    // TODO: Update for leading `-` after lookbehind is supported everywhere\n    const decimalDigits = \"([0-9]_*)+\";\n    const hexDigits = \"([0-9a-fA-F]_*)+\";\n    const NUMBER = {\n        className: \"number\",\n        relevance: 0,\n        variants: [\n            // decimal floating-point-literal (subsumes decimal-literal)\n            {\n                match: `\\\\b(${decimalDigits})(\\\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\\\b`\n            },\n            // hexadecimal floating-point-literal (subsumes hexadecimal-literal)\n            {\n                match: `\\\\b0x(${hexDigits})(\\\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\\\b`\n            },\n            // octal-literal\n            {\n                match: /\\b0o([0-7]_*)+\\b/\n            },\n            // binary-literal\n            {\n                match: /\\b0b([01]_*)+\\b/\n            }\n        ]\n    };\n    // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_string-literal\n    const ESCAPED_CHARACTER = (rawDelimiter = \"\")=>({\n            className: \"subst\",\n            variants: [\n                {\n                    match: concat(/\\\\/, rawDelimiter, /[0\\\\tnr\"']/)\n                },\n                {\n                    match: concat(/\\\\/, rawDelimiter, /u\\{[0-9a-fA-F]{1,8}\\}/)\n                }\n            ]\n        });\n    const ESCAPED_NEWLINE = (rawDelimiter = \"\")=>({\n            className: \"subst\",\n            match: concat(/\\\\/, rawDelimiter, /[\\t ]*(?:[\\r\\n]|\\r\\n)/)\n        });\n    const INTERPOLATION = (rawDelimiter = \"\")=>({\n            className: \"subst\",\n            label: \"interpol\",\n            begin: concat(/\\\\/, rawDelimiter, /\\(/),\n            end: /\\)/\n        });\n    const MULTILINE_STRING = (rawDelimiter = \"\")=>({\n            begin: concat(rawDelimiter, /\"\"\"/),\n            end: concat(/\"\"\"/, rawDelimiter),\n            contains: [\n                ESCAPED_CHARACTER(rawDelimiter),\n                ESCAPED_NEWLINE(rawDelimiter),\n                INTERPOLATION(rawDelimiter)\n            ]\n        });\n    const SINGLE_LINE_STRING = (rawDelimiter = \"\")=>({\n            begin: concat(rawDelimiter, /\"/),\n            end: concat(/\"/, rawDelimiter),\n            contains: [\n                ESCAPED_CHARACTER(rawDelimiter),\n                INTERPOLATION(rawDelimiter)\n            ]\n        });\n    const STRING = {\n        className: \"string\",\n        variants: [\n            MULTILINE_STRING(),\n            MULTILINE_STRING(\"#\"),\n            MULTILINE_STRING(\"##\"),\n            MULTILINE_STRING(\"###\"),\n            SINGLE_LINE_STRING(),\n            SINGLE_LINE_STRING(\"#\"),\n            SINGLE_LINE_STRING(\"##\"),\n            SINGLE_LINE_STRING(\"###\")\n        ]\n    };\n    const REGEXP_CONTENTS = [\n        hljs.BACKSLASH_ESCAPE,\n        {\n            begin: /\\[/,\n            end: /\\]/,\n            relevance: 0,\n            contains: [\n                hljs.BACKSLASH_ESCAPE\n            ]\n        }\n    ];\n    const BARE_REGEXP_LITERAL = {\n        begin: /\\/[^\\s](?=[^/\\n]*\\/)/,\n        end: /\\//,\n        contains: REGEXP_CONTENTS\n    };\n    const EXTENDED_REGEXP_LITERAL = (rawDelimiter)=>{\n        const begin = concat(rawDelimiter, /\\//);\n        const end = concat(/\\//, rawDelimiter);\n        return {\n            begin,\n            end,\n            contains: [\n                ...REGEXP_CONTENTS,\n                {\n                    scope: \"comment\",\n                    begin: `#(?!.*${end})`,\n                    end: /$/\n                }\n            ]\n        };\n    };\n    // https://docs.swift.org/swift-book/documentation/the-swift-programming-language/lexicalstructure/#Regular-Expression-Literals\n    const REGEXP = {\n        scope: \"regexp\",\n        variants: [\n            EXTENDED_REGEXP_LITERAL(\"###\"),\n            EXTENDED_REGEXP_LITERAL(\"##\"),\n            EXTENDED_REGEXP_LITERAL(\"#\"),\n            BARE_REGEXP_LITERAL\n        ]\n    };\n    // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID412\n    const QUOTED_IDENTIFIER = {\n        match: concat(/`/, identifier, /`/)\n    };\n    const IMPLICIT_PARAMETER = {\n        className: \"variable\",\n        match: /\\$\\d+/\n    };\n    const PROPERTY_WRAPPER_PROJECTION = {\n        className: \"variable\",\n        match: `\\\\$${identifierCharacter}+`\n    };\n    const IDENTIFIERS = [\n        QUOTED_IDENTIFIER,\n        IMPLICIT_PARAMETER,\n        PROPERTY_WRAPPER_PROJECTION\n    ];\n    // https://docs.swift.org/swift-book/ReferenceManual/Attributes.html\n    const AVAILABLE_ATTRIBUTE = {\n        match: /(@|#(un)?)available/,\n        scope: \"keyword\",\n        starts: {\n            contains: [\n                {\n                    begin: /\\(/,\n                    end: /\\)/,\n                    keywords: availabilityKeywords,\n                    contains: [\n                        ...OPERATORS,\n                        NUMBER,\n                        STRING\n                    ]\n                }\n            ]\n        }\n    };\n    const KEYWORD_ATTRIBUTE = {\n        scope: \"keyword\",\n        match: concat(/@/, either(...keywordAttributes), lookahead(either(/\\(/, /\\s+/)))\n    };\n    const USER_DEFINED_ATTRIBUTE = {\n        scope: \"meta\",\n        match: concat(/@/, identifier)\n    };\n    const ATTRIBUTES = [\n        AVAILABLE_ATTRIBUTE,\n        KEYWORD_ATTRIBUTE,\n        USER_DEFINED_ATTRIBUTE\n    ];\n    // https://docs.swift.org/swift-book/ReferenceManual/Types.html\n    const TYPE = {\n        match: lookahead(/\\b[A-Z]/),\n        relevance: 0,\n        contains: [\n            {\n                className: \"type\",\n                match: concat(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, identifierCharacter, \"+\")\n            },\n            {\n                className: \"type\",\n                match: typeIdentifier,\n                relevance: 0\n            },\n            {\n                match: /[?!]+/,\n                relevance: 0\n            },\n            {\n                match: /\\.\\.\\./,\n                relevance: 0\n            },\n            {\n                match: concat(/\\s+&\\s+/, lookahead(typeIdentifier)),\n                relevance: 0\n            }\n        ]\n    };\n    const GENERIC_ARGUMENTS = {\n        begin: /</,\n        end: />/,\n        keywords: KEYWORDS,\n        contains: [\n            ...COMMENTS,\n            ...KEYWORD_MODES,\n            ...ATTRIBUTES,\n            OPERATOR_GUARD,\n            TYPE\n        ]\n    };\n    TYPE.contains.push(GENERIC_ARGUMENTS);\n    // https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID552\n    // Prevents element names from being highlighted as keywords.\n    const TUPLE_ELEMENT_NAME = {\n        match: concat(identifier, /\\s*:/),\n        keywords: \"_|0\",\n        relevance: 0\n    };\n    // Matches tuples as well as the parameter list of a function type.\n    const TUPLE = {\n        begin: /\\(/,\n        end: /\\)/,\n        relevance: 0,\n        keywords: KEYWORDS,\n        contains: [\n            \"self\",\n            TUPLE_ELEMENT_NAME,\n            ...COMMENTS,\n            REGEXP,\n            ...KEYWORD_MODES,\n            ...BUILT_INS,\n            ...OPERATORS,\n            NUMBER,\n            STRING,\n            ...IDENTIFIERS,\n            ...ATTRIBUTES,\n            TYPE\n        ]\n    };\n    const GENERIC_PARAMETERS = {\n        begin: /</,\n        end: />/,\n        keywords: \"repeat each\",\n        contains: [\n            ...COMMENTS,\n            TYPE\n        ]\n    };\n    const FUNCTION_PARAMETER_NAME = {\n        begin: either(lookahead(concat(identifier, /\\s*:/)), lookahead(concat(identifier, /\\s+/, identifier, /\\s*:/))),\n        end: /:/,\n        relevance: 0,\n        contains: [\n            {\n                className: \"keyword\",\n                match: /\\b_\\b/\n            },\n            {\n                className: \"params\",\n                match: identifier\n            }\n        ]\n    };\n    const FUNCTION_PARAMETERS = {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: KEYWORDS,\n        contains: [\n            FUNCTION_PARAMETER_NAME,\n            ...COMMENTS,\n            ...KEYWORD_MODES,\n            ...OPERATORS,\n            NUMBER,\n            STRING,\n            ...ATTRIBUTES,\n            TYPE,\n            TUPLE\n        ],\n        endsParent: true,\n        illegal: /[\"']/\n    };\n    // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID362\n    // https://docs.swift.org/swift-book/documentation/the-swift-programming-language/declarations/#Macro-Declaration\n    const FUNCTION_OR_MACRO = {\n        match: [\n            /(func|macro)/,\n            /\\s+/,\n            either(QUOTED_IDENTIFIER.match, identifier, operator)\n        ],\n        className: {\n            1: \"keyword\",\n            3: \"title.function\"\n        },\n        contains: [\n            GENERIC_PARAMETERS,\n            FUNCTION_PARAMETERS,\n            WHITESPACE\n        ],\n        illegal: [\n            /\\[/,\n            /%/\n        ]\n    };\n    // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID375\n    // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID379\n    const INIT_SUBSCRIPT = {\n        match: [\n            /\\b(?:subscript|init[?!]?)/,\n            /\\s*(?=[<(])/\n        ],\n        className: {\n            1: \"keyword\"\n        },\n        contains: [\n            GENERIC_PARAMETERS,\n            FUNCTION_PARAMETERS,\n            WHITESPACE\n        ],\n        illegal: /\\[|%/\n    };\n    // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID380\n    const OPERATOR_DECLARATION = {\n        match: [\n            /operator/,\n            /\\s+/,\n            operator\n        ],\n        className: {\n            1: \"keyword\",\n            3: \"title\"\n        }\n    };\n    // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID550\n    const PRECEDENCEGROUP = {\n        begin: [\n            /precedencegroup/,\n            /\\s+/,\n            typeIdentifier\n        ],\n        className: {\n            1: \"keyword\",\n            3: \"title\"\n        },\n        contains: [\n            TYPE\n        ],\n        keywords: [\n            ...precedencegroupKeywords,\n            ...literals\n        ],\n        end: /}/\n    };\n    const CLASS_FUNC_DECLARATION = {\n        match: [\n            /class\\b/,\n            /\\s+/,\n            /func\\b/,\n            /\\s+/,\n            /\\b[A-Za-z_][A-Za-z0-9_]*\\b/\n        ],\n        scope: {\n            1: \"keyword\",\n            3: \"keyword\",\n            5: \"title.function\"\n        }\n    };\n    const CLASS_VAR_DECLARATION = {\n        match: [\n            /class\\b/,\n            /\\s+/,\n            /var\\b/\n        ],\n        scope: {\n            1: \"keyword\",\n            3: \"keyword\"\n        }\n    };\n    const TYPE_DECLARATION = {\n        begin: [\n            /(struct|protocol|class|extension|enum|actor)/,\n            /\\s+/,\n            identifier,\n            /\\s*/\n        ],\n        beginScope: {\n            1: \"keyword\",\n            3: \"title.class\"\n        },\n        keywords: KEYWORDS,\n        contains: [\n            GENERIC_PARAMETERS,\n            ...KEYWORD_MODES,\n            {\n                begin: /:/,\n                end: /\\{/,\n                keywords: KEYWORDS,\n                contains: [\n                    {\n                        scope: \"title.class.inherited\",\n                        match: typeIdentifier\n                    },\n                    ...KEYWORD_MODES\n                ],\n                relevance: 0\n            }\n        ]\n    };\n    // Add supported submodes to string interpolation.\n    for (const variant of STRING.variants){\n        const interpolation = variant.contains.find((mode)=>mode.label === \"interpol\");\n        // TODO: Interpolation can contain any expression, so there's room for improvement here.\n        interpolation.keywords = KEYWORDS;\n        const submodes = [\n            ...KEYWORD_MODES,\n            ...BUILT_INS,\n            ...OPERATORS,\n            NUMBER,\n            STRING,\n            ...IDENTIFIERS\n        ];\n        interpolation.contains = [\n            ...submodes,\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                contains: [\n                    \"self\",\n                    ...submodes\n                ]\n            }\n        ];\n    }\n    return {\n        name: \"Swift\",\n        keywords: KEYWORDS,\n        contains: [\n            ...COMMENTS,\n            FUNCTION_OR_MACRO,\n            INIT_SUBSCRIPT,\n            CLASS_FUNC_DECLARATION,\n            CLASS_VAR_DECLARATION,\n            TYPE_DECLARATION,\n            OPERATOR_DECLARATION,\n            PRECEDENCEGROUP,\n            {\n                beginKeywords: \"import\",\n                end: /$/,\n                contains: [\n                    ...COMMENTS\n                ],\n                relevance: 0\n            },\n            REGEXP,\n            ...KEYWORD_MODES,\n            ...BUILT_INS,\n            ...OPERATORS,\n            NUMBER,\n            STRING,\n            ...IDENTIFIERS,\n            ...ATTRIBUTES,\n            TYPE,\n            TUPLE\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/swift.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/typescript.js":
/*!**************************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/typescript.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ typescript)\n/* harmony export */ });\nconst IDENT_RE = \"[A-Za-z$_][0-9A-Za-z$_]*\";\nconst KEYWORDS = [\n    \"as\",\n    \"in\",\n    \"of\",\n    \"if\",\n    \"for\",\n    \"while\",\n    \"finally\",\n    \"var\",\n    \"new\",\n    \"function\",\n    \"do\",\n    \"return\",\n    \"void\",\n    \"else\",\n    \"break\",\n    \"catch\",\n    \"instanceof\",\n    \"with\",\n    \"throw\",\n    \"case\",\n    \"default\",\n    \"try\",\n    \"switch\",\n    \"continue\",\n    \"typeof\",\n    \"delete\",\n    \"let\",\n    \"yield\",\n    \"const\",\n    \"class\",\n    // JS handles these with a special rule\n    // \"get\",\n    // \"set\",\n    \"debugger\",\n    \"async\",\n    \"await\",\n    \"static\",\n    \"import\",\n    \"from\",\n    \"export\",\n    \"extends\",\n    // It's reached stage 3, which is \"recommended for implementation\":\n    \"using\"\n];\nconst LITERALS = [\n    \"true\",\n    \"false\",\n    \"null\",\n    \"undefined\",\n    \"NaN\",\n    \"Infinity\"\n];\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\nconst TYPES = [\n    // Fundamental objects\n    \"Object\",\n    \"Function\",\n    \"Boolean\",\n    \"Symbol\",\n    // numbers and dates\n    \"Math\",\n    \"Date\",\n    \"Number\",\n    \"BigInt\",\n    // text\n    \"String\",\n    \"RegExp\",\n    // Indexed collections\n    \"Array\",\n    \"Float32Array\",\n    \"Float64Array\",\n    \"Int8Array\",\n    \"Uint8Array\",\n    \"Uint8ClampedArray\",\n    \"Int16Array\",\n    \"Int32Array\",\n    \"Uint16Array\",\n    \"Uint32Array\",\n    \"BigInt64Array\",\n    \"BigUint64Array\",\n    // Keyed collections\n    \"Set\",\n    \"Map\",\n    \"WeakSet\",\n    \"WeakMap\",\n    // Structured data\n    \"ArrayBuffer\",\n    \"SharedArrayBuffer\",\n    \"Atomics\",\n    \"DataView\",\n    \"JSON\",\n    // Control abstraction objects\n    \"Promise\",\n    \"Generator\",\n    \"GeneratorFunction\",\n    \"AsyncFunction\",\n    // Reflection\n    \"Reflect\",\n    \"Proxy\",\n    // Internationalization\n    \"Intl\",\n    // WebAssembly\n    \"WebAssembly\"\n];\nconst ERROR_TYPES = [\n    \"Error\",\n    \"EvalError\",\n    \"InternalError\",\n    \"RangeError\",\n    \"ReferenceError\",\n    \"SyntaxError\",\n    \"TypeError\",\n    \"URIError\"\n];\nconst BUILT_IN_GLOBALS = [\n    \"setInterval\",\n    \"setTimeout\",\n    \"clearInterval\",\n    \"clearTimeout\",\n    \"require\",\n    \"exports\",\n    \"eval\",\n    \"isFinite\",\n    \"isNaN\",\n    \"parseFloat\",\n    \"parseInt\",\n    \"decodeURI\",\n    \"decodeURIComponent\",\n    \"encodeURI\",\n    \"encodeURIComponent\",\n    \"escape\",\n    \"unescape\"\n];\nconst BUILT_IN_VARIABLES = [\n    \"arguments\",\n    \"this\",\n    \"super\",\n    \"console\",\n    \"window\",\n    \"document\",\n    \"localStorage\",\n    \"sessionStorage\",\n    \"module\",\n    \"global\" // Node.js\n];\nconst BUILT_INS = [].concat(BUILT_IN_GLOBALS, TYPES, ERROR_TYPES);\n/*\nLanguage: JavaScript\nDescription: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.\nCategory: common, scripting, web\nWebsite: https://developer.mozilla.org/en-US/docs/Web/JavaScript\n*/ /** @type LanguageFn */ function javascript(hljs) {\n    const regex = hljs.regex;\n    /**\n   * Takes a string like \"<Booger\" and checks to see\n   * if we can find a matching \"</Booger\" later in the\n   * content.\n   * @param {RegExpMatchArray} match\n   * @param {{after:number}} param1\n   */ const hasClosingTag = (match, { after })=>{\n        const tag = \"</\" + match[0].slice(1);\n        const pos = match.input.indexOf(tag, after);\n        return pos !== -1;\n    };\n    const IDENT_RE$1 = IDENT_RE;\n    const FRAGMENT = {\n        begin: \"<>\",\n        end: \"</>\"\n    };\n    // to avoid some special cases inside isTrulyOpeningTag\n    const XML_SELF_CLOSING = /<[A-Za-z0-9\\\\._:-]+\\s*\\/>/;\n    const XML_TAG = {\n        begin: /<[A-Za-z0-9\\\\._:-]+/,\n        end: /\\/[A-Za-z0-9\\\\._:-]+>|\\/>/,\n        /**\n     * @param {RegExpMatchArray} match\n     * @param {CallbackResponse} response\n     */ isTrulyOpeningTag: (match, response)=>{\n            const afterMatchIndex = match[0].length + match.index;\n            const nextChar = match.input[afterMatchIndex];\n            if (// HTML should not include another raw `<` inside a tag\n            // nested type?\n            // `<Array<Array<number>>`, etc.\n            nextChar === \"<\" || // the , gives away that this is not HTML\n            // `<T, A extends keyof T, V>`\n            nextChar === \",\") {\n                response.ignoreMatch();\n                return;\n            }\n            // `<something>`\n            // Quite possibly a tag, lets look for a matching closing tag...\n            if (nextChar === \">\") {\n                // if we cannot find a matching closing tag, then we\n                // will ignore it\n                if (!hasClosingTag(match, {\n                    after: afterMatchIndex\n                })) {\n                    response.ignoreMatch();\n                }\n            }\n            // `<blah />` (self-closing)\n            // handled by simpleSelfClosing rule\n            let m;\n            const afterMatch = match.input.substring(afterMatchIndex);\n            // some more template typing stuff\n            //  <T = any>(key?: string) => Modify<\n            if (m = afterMatch.match(/^\\s*=/)) {\n                response.ignoreMatch();\n                return;\n            }\n            // `<From extends string>`\n            // technically this could be HTML, but it smells like a type\n            // NOTE: This is ugh, but added specifically for https://github.com/highlightjs/highlight.js/issues/3276\n            if (m = afterMatch.match(/^\\s+extends\\s+/)) {\n                if (m.index === 0) {\n                    response.ignoreMatch();\n                    // eslint-disable-next-line no-useless-return\n                    return;\n                }\n            }\n        }\n    };\n    const KEYWORDS$1 = {\n        $pattern: IDENT_RE,\n        keyword: KEYWORDS,\n        literal: LITERALS,\n        built_in: BUILT_INS,\n        \"variable.language\": BUILT_IN_VARIABLES\n    };\n    // https://tc39.es/ecma262/#sec-literals-numeric-literals\n    const decimalDigits = \"[0-9](_?[0-9])*\";\n    const frac = `\\\\.(${decimalDigits})`;\n    // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral\n    // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n    const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;\n    const NUMBER = {\n        className: \"number\",\n        variants: [\n            // DecimalLiteral\n            {\n                begin: `(\\\\b(${decimalInteger})((${frac})|\\\\.)?|(${frac}))` + `[eE][+-]?(${decimalDigits})\\\\b`\n            },\n            {\n                begin: `\\\\b(${decimalInteger})\\\\b((${frac})\\\\b|\\\\.)?|(${frac})\\\\b`\n            },\n            // DecimalBigIntegerLiteral\n            {\n                begin: `\\\\b(0|[1-9](_?[0-9])*)n\\\\b`\n            },\n            // NonDecimalIntegerLiteral\n            {\n                begin: \"\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[bB][0-1](_?[0-1])*n?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[oO][0-7](_?[0-7])*n?\\\\b\"\n            },\n            // LegacyOctalIntegerLiteral (does not include underscore separators)\n            // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n            {\n                begin: \"\\\\b0[0-7]+n?\\\\b\"\n            }\n        ],\n        relevance: 0\n    };\n    const SUBST = {\n        className: \"subst\",\n        begin: \"\\\\$\\\\{\",\n        end: \"\\\\}\",\n        keywords: KEYWORDS$1,\n        contains: [] // defined later\n    };\n    const HTML_TEMPLATE = {\n        begin: \".?html`\",\n        end: \"\",\n        starts: {\n            end: \"`\",\n            returnEnd: false,\n            contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n            ],\n            subLanguage: \"xml\"\n        }\n    };\n    const CSS_TEMPLATE = {\n        begin: \".?css`\",\n        end: \"\",\n        starts: {\n            end: \"`\",\n            returnEnd: false,\n            contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n            ],\n            subLanguage: \"css\"\n        }\n    };\n    const GRAPHQL_TEMPLATE = {\n        begin: \".?gql`\",\n        end: \"\",\n        starts: {\n            end: \"`\",\n            returnEnd: false,\n            contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n            ],\n            subLanguage: \"graphql\"\n        }\n    };\n    const TEMPLATE_STRING = {\n        className: \"string\",\n        begin: \"`\",\n        end: \"`\",\n        contains: [\n            hljs.BACKSLASH_ESCAPE,\n            SUBST\n        ]\n    };\n    const JSDOC_COMMENT = hljs.COMMENT(/\\/\\*\\*(?!\\/)/, \"\\\\*/\", {\n        relevance: 0,\n        contains: [\n            {\n                begin: \"(?=@[A-Za-z]+)\",\n                relevance: 0,\n                contains: [\n                    {\n                        className: \"doctag\",\n                        begin: \"@[A-Za-z]+\"\n                    },\n                    {\n                        className: \"type\",\n                        begin: \"\\\\{\",\n                        end: \"\\\\}\",\n                        excludeEnd: true,\n                        excludeBegin: true,\n                        relevance: 0\n                    },\n                    {\n                        className: \"variable\",\n                        begin: IDENT_RE$1 + \"(?=\\\\s*(-)|$)\",\n                        endsParent: true,\n                        relevance: 0\n                    },\n                    // eat spaces (not newlines) so we can find\n                    // types or variables\n                    {\n                        begin: /(?=[^\\n])\\s/,\n                        relevance: 0\n                    }\n                ]\n            }\n        ]\n    });\n    const COMMENT = {\n        className: \"comment\",\n        variants: [\n            JSDOC_COMMENT,\n            hljs.C_BLOCK_COMMENT_MODE,\n            hljs.C_LINE_COMMENT_MODE\n        ]\n    };\n    const SUBST_INTERNALS = [\n        hljs.APOS_STRING_MODE,\n        hljs.QUOTE_STRING_MODE,\n        HTML_TEMPLATE,\n        CSS_TEMPLATE,\n        GRAPHQL_TEMPLATE,\n        TEMPLATE_STRING,\n        // Skip numbers when they are part of a variable name\n        {\n            match: /\\$\\d+/\n        },\n        NUMBER\n    ];\n    SUBST.contains = SUBST_INTERNALS.concat({\n        // we need to pair up {} inside our subst to prevent\n        // it from ending too early by matching another }\n        begin: /\\{/,\n        end: /\\}/,\n        keywords: KEYWORDS$1,\n        contains: [\n            \"self\"\n        ].concat(SUBST_INTERNALS)\n    });\n    const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);\n    const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([\n        // eat recursive parens in sub expressions\n        {\n            begin: /(\\s*)\\(/,\n            end: /\\)/,\n            keywords: KEYWORDS$1,\n            contains: [\n                \"self\"\n            ].concat(SUBST_AND_COMMENTS)\n        }\n    ]);\n    const PARAMS = {\n        className: \"params\",\n        // convert this to negative lookbehind in v12\n        begin: /(\\s*)\\(/,\n        end: /\\)/,\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: KEYWORDS$1,\n        contains: PARAMS_CONTAINS\n    };\n    // ES6 classes\n    const CLASS_OR_EXTENDS = {\n        variants: [\n            // class Car extends vehicle\n            {\n                match: [\n                    /class/,\n                    /\\s+/,\n                    IDENT_RE$1,\n                    /\\s+/,\n                    /extends/,\n                    /\\s+/,\n                    regex.concat(IDENT_RE$1, \"(\", regex.concat(/\\./, IDENT_RE$1), \")*\")\n                ],\n                scope: {\n                    1: \"keyword\",\n                    3: \"title.class\",\n                    5: \"keyword\",\n                    7: \"title.class.inherited\"\n                }\n            },\n            // class Car\n            {\n                match: [\n                    /class/,\n                    /\\s+/,\n                    IDENT_RE$1\n                ],\n                scope: {\n                    1: \"keyword\",\n                    3: \"title.class\"\n                }\n            }\n        ]\n    };\n    const CLASS_REFERENCE = {\n        relevance: 0,\n        match: regex.either(// Hard coded exceptions\n        /\\bJSON/, // Float32Array, OutT\n        /\\b[A-Z][a-z]+([A-Z][a-z]*|\\d)*/, // CSSFactory, CSSFactoryT\n        /\\b[A-Z]{2,}([A-Z][a-z]+|\\d)+([A-Z][a-z]*)*/, // FPs, FPsT\n        /\\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\\d)*([A-Z][a-z]*)*/),\n        className: \"title.class\",\n        keywords: {\n            _: [\n                // se we still get relevance credit for JS library classes\n                ...TYPES,\n                ...ERROR_TYPES\n            ]\n        }\n    };\n    const USE_STRICT = {\n        label: \"use_strict\",\n        className: \"meta\",\n        relevance: 10,\n        begin: /^\\s*['\"]use (strict|asm)['\"]/\n    };\n    const FUNCTION_DEFINITION = {\n        variants: [\n            {\n                match: [\n                    /function/,\n                    /\\s+/,\n                    IDENT_RE$1,\n                    /(?=\\s*\\()/\n                ]\n            },\n            // anonymous function\n            {\n                match: [\n                    /function/,\n                    /\\s*(?=\\()/\n                ]\n            }\n        ],\n        className: {\n            1: \"keyword\",\n            3: \"title.function\"\n        },\n        label: \"func.def\",\n        contains: [\n            PARAMS\n        ],\n        illegal: /%/\n    };\n    const UPPER_CASE_CONSTANT = {\n        relevance: 0,\n        match: /\\b[A-Z][A-Z_0-9]+\\b/,\n        className: \"variable.constant\"\n    };\n    function noneOf(list) {\n        return regex.concat(\"(?!\", list.join(\"|\"), \")\");\n    }\n    const FUNCTION_CALL = {\n        match: regex.concat(/\\b/, noneOf([\n            ...BUILT_IN_GLOBALS,\n            \"super\",\n            \"import\"\n        ].map((x)=>`${x}\\\\s*\\\\(`)), IDENT_RE$1, regex.lookahead(/\\s*\\(/)),\n        className: \"title.function\",\n        relevance: 0\n    };\n    const PROPERTY_ACCESS = {\n        begin: regex.concat(/\\./, regex.lookahead(regex.concat(IDENT_RE$1, /(?![0-9A-Za-z$_(])/))),\n        end: IDENT_RE$1,\n        excludeBegin: true,\n        keywords: \"prototype\",\n        className: \"property\",\n        relevance: 0\n    };\n    const GETTER_OR_SETTER = {\n        match: [\n            /get|set/,\n            /\\s+/,\n            IDENT_RE$1,\n            /(?=\\()/\n        ],\n        className: {\n            1: \"keyword\",\n            3: \"title.function\"\n        },\n        contains: [\n            {\n                begin: /\\(\\)/\n            },\n            PARAMS\n        ]\n    };\n    const FUNC_LEAD_IN_RE = \"(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*\" + \"\\\\)[^()]*)*\" + \"\\\\)[^()]*)*\" + \"\\\\)|\" + hljs.UNDERSCORE_IDENT_RE + \")\\\\s*=>\";\n    const FUNCTION_VARIABLE = {\n        match: [\n            /const|var|let/,\n            /\\s+/,\n            IDENT_RE$1,\n            /\\s*/,\n            /=\\s*/,\n            /(async\\s*)?/,\n            regex.lookahead(FUNC_LEAD_IN_RE)\n        ],\n        keywords: \"async\",\n        className: {\n            1: \"keyword\",\n            3: \"title.function\"\n        },\n        contains: [\n            PARAMS\n        ]\n    };\n    return {\n        name: \"JavaScript\",\n        aliases: [\n            \"js\",\n            \"jsx\",\n            \"mjs\",\n            \"cjs\"\n        ],\n        keywords: KEYWORDS$1,\n        // this will be extended by TypeScript\n        exports: {\n            PARAMS_CONTAINS,\n            CLASS_REFERENCE\n        },\n        illegal: /#(?![$_A-z])/,\n        contains: [\n            hljs.SHEBANG({\n                label: \"shebang\",\n                binary: \"node\",\n                relevance: 5\n            }),\n            USE_STRICT,\n            hljs.APOS_STRING_MODE,\n            hljs.QUOTE_STRING_MODE,\n            HTML_TEMPLATE,\n            CSS_TEMPLATE,\n            GRAPHQL_TEMPLATE,\n            TEMPLATE_STRING,\n            COMMENT,\n            // Skip numbers when they are part of a variable name\n            {\n                match: /\\$\\d+/\n            },\n            NUMBER,\n            CLASS_REFERENCE,\n            {\n                scope: \"attr\",\n                match: IDENT_RE$1 + regex.lookahead(\":\"),\n                relevance: 0\n            },\n            FUNCTION_VARIABLE,\n            {\n                begin: \"(\" + hljs.RE_STARTERS_RE + \"|\\\\b(case|return|throw)\\\\b)\\\\s*\",\n                keywords: \"return throw case\",\n                relevance: 0,\n                contains: [\n                    COMMENT,\n                    hljs.REGEXP_MODE,\n                    {\n                        className: \"function\",\n                        // we have to count the parens to make sure we actually have the\n                        // correct bounding ( ) before the =>.  There could be any number of\n                        // sub-expressions inside also surrounded by parens.\n                        begin: FUNC_LEAD_IN_RE,\n                        returnBegin: true,\n                        end: \"\\\\s*=>\",\n                        contains: [\n                            {\n                                className: \"params\",\n                                variants: [\n                                    {\n                                        begin: hljs.UNDERSCORE_IDENT_RE,\n                                        relevance: 0\n                                    },\n                                    {\n                                        className: null,\n                                        begin: /\\(\\s*\\)/,\n                                        skip: true\n                                    },\n                                    {\n                                        begin: /(\\s*)\\(/,\n                                        end: /\\)/,\n                                        excludeBegin: true,\n                                        excludeEnd: true,\n                                        keywords: KEYWORDS$1,\n                                        contains: PARAMS_CONTAINS\n                                    }\n                                ]\n                            }\n                        ]\n                    },\n                    {\n                        begin: /,/,\n                        relevance: 0\n                    },\n                    {\n                        match: /\\s+/,\n                        relevance: 0\n                    },\n                    {\n                        variants: [\n                            {\n                                begin: FRAGMENT.begin,\n                                end: FRAGMENT.end\n                            },\n                            {\n                                match: XML_SELF_CLOSING\n                            },\n                            {\n                                begin: XML_TAG.begin,\n                                // we carefully check the opening tag to see if it truly\n                                // is a tag and not a false positive\n                                \"on:begin\": XML_TAG.isTrulyOpeningTag,\n                                end: XML_TAG.end\n                            }\n                        ],\n                        subLanguage: \"xml\",\n                        contains: [\n                            {\n                                begin: XML_TAG.begin,\n                                end: XML_TAG.end,\n                                skip: true,\n                                contains: [\n                                    \"self\"\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            },\n            FUNCTION_DEFINITION,\n            {\n                // prevent this from getting swallowed up by function\n                // since they appear \"function like\"\n                beginKeywords: \"while if switch catch for\"\n            },\n            {\n                // we have to count the parens to make sure we actually have the correct\n                // bounding ( ).  There could be any number of sub-expressions inside\n                // also surrounded by parens.\n                begin: \"\\\\b(?!function)\" + hljs.UNDERSCORE_IDENT_RE + \"\\\\(\" + // first parens\n                \"[^()]*(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*\" + \"\\\\)[^()]*)*\" + \"\\\\)[^()]*)*\" + \"\\\\)\\\\s*\\\\{\",\n                returnBegin: true,\n                label: \"func.def\",\n                contains: [\n                    PARAMS,\n                    hljs.inherit(hljs.TITLE_MODE, {\n                        begin: IDENT_RE$1,\n                        className: \"title.function\"\n                    })\n                ]\n            },\n            // catch ... so it won't trigger the property rule below\n            {\n                match: /\\.\\.\\./,\n                relevance: 0\n            },\n            PROPERTY_ACCESS,\n            // hack: prevents detection of keywords in some circumstances\n            // .keyword()\n            // $keyword = x\n            {\n                match: \"\\\\$\" + IDENT_RE$1,\n                relevance: 0\n            },\n            {\n                match: [\n                    /\\bconstructor(?=\\s*\\()/\n                ],\n                className: {\n                    1: \"title.function\"\n                },\n                contains: [\n                    PARAMS\n                ]\n            },\n            FUNCTION_CALL,\n            UPPER_CASE_CONSTANT,\n            CLASS_OR_EXTENDS,\n            GETTER_OR_SETTER,\n            {\n                match: /\\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`\n            }\n        ]\n    };\n}\n/*\nLanguage: TypeScript\nAuthor: Panu Horsmalahti <panu.horsmalahti@iki.fi>\nContributors: Ike Ku <dempfi@yahoo.com>\nDescription: TypeScript is a strict superset of JavaScript\nWebsite: https://www.typescriptlang.org\nCategory: common, scripting\n*/ /** @type LanguageFn */ function typescript(hljs) {\n    const regex = hljs.regex;\n    const tsLanguage = javascript(hljs);\n    const IDENT_RE$1 = IDENT_RE;\n    const TYPES = [\n        \"any\",\n        \"void\",\n        \"number\",\n        \"boolean\",\n        \"string\",\n        \"object\",\n        \"never\",\n        \"symbol\",\n        \"bigint\",\n        \"unknown\"\n    ];\n    const NAMESPACE = {\n        begin: [\n            /namespace/,\n            /\\s+/,\n            hljs.IDENT_RE\n        ],\n        beginScope: {\n            1: \"keyword\",\n            3: \"title.class\"\n        }\n    };\n    const INTERFACE = {\n        beginKeywords: \"interface\",\n        end: /\\{/,\n        excludeEnd: true,\n        keywords: {\n            keyword: \"interface extends\",\n            built_in: TYPES\n        },\n        contains: [\n            tsLanguage.exports.CLASS_REFERENCE\n        ]\n    };\n    const USE_STRICT = {\n        className: \"meta\",\n        relevance: 10,\n        begin: /^\\s*['\"]use strict['\"]/\n    };\n    const TS_SPECIFIC_KEYWORDS = [\n        \"type\",\n        // \"namespace\",\n        \"interface\",\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"implements\",\n        \"declare\",\n        \"abstract\",\n        \"readonly\",\n        \"enum\",\n        \"override\",\n        \"satisfies\"\n    ];\n    /*\n    namespace is a TS keyword but it's fine to use it as a variable name too.\n    const message = 'foo';\n    const namespace = 'bar';\n  */ const KEYWORDS$1 = {\n        $pattern: IDENT_RE,\n        keyword: KEYWORDS.concat(TS_SPECIFIC_KEYWORDS),\n        literal: LITERALS,\n        built_in: BUILT_INS.concat(TYPES),\n        \"variable.language\": BUILT_IN_VARIABLES\n    };\n    const DECORATOR = {\n        className: \"meta\",\n        begin: \"@\" + IDENT_RE$1\n    };\n    const swapMode = (mode, label, replacement)=>{\n        const indx = mode.contains.findIndex((m)=>m.label === label);\n        if (indx === -1) {\n            throw new Error(\"can not find mode to replace\");\n        }\n        mode.contains.splice(indx, 1, replacement);\n    };\n    // this should update anywhere keywords is used since\n    // it will be the same actual JS object\n    Object.assign(tsLanguage.keywords, KEYWORDS$1);\n    tsLanguage.exports.PARAMS_CONTAINS.push(DECORATOR);\n    // highlight the function params\n    const ATTRIBUTE_HIGHLIGHT = tsLanguage.contains.find((c)=>c.scope === \"attr\");\n    // take default attr rule and extend it to support optionals\n    const OPTIONAL_KEY_OR_ARGUMENT = Object.assign({}, ATTRIBUTE_HIGHLIGHT, {\n        match: regex.concat(IDENT_RE$1, regex.lookahead(/\\s*\\?:/))\n    });\n    tsLanguage.exports.PARAMS_CONTAINS.push([\n        tsLanguage.exports.CLASS_REFERENCE,\n        ATTRIBUTE_HIGHLIGHT,\n        OPTIONAL_KEY_OR_ARGUMENT\n    ]);\n    // Add the optional property assignment highlighting for objects or classes\n    tsLanguage.contains = tsLanguage.contains.concat([\n        DECORATOR,\n        NAMESPACE,\n        INTERFACE,\n        OPTIONAL_KEY_OR_ARGUMENT\n    ]);\n    // TS gets a simpler shebang rule than JS\n    swapMode(tsLanguage, \"shebang\", hljs.SHEBANG());\n    // JS use strict rule purposely excludes `asm` which makes no sense\n    swapMode(tsLanguage, \"use_strict\", USE_STRICT);\n    const functionDeclaration = tsLanguage.contains.find((m)=>m.label === \"func.def\");\n    functionDeclaration.relevance = 0; // () => {} is more typical in TypeScript\n    Object.assign(tsLanguage, {\n        name: \"TypeScript\",\n        aliases: [\n            \"ts\",\n            \"tsx\",\n            \"mts\",\n            \"cts\"\n        ]\n    });\n    return tsLanguage;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/typescript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/vbnet.js":
/*!*********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/vbnet.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ vbnet)\n/* harmony export */ });\n/*\nLanguage: Visual Basic .NET\nDescription: Visual Basic .NET (VB.NET) is a multi-paradigm, object-oriented programming language, implemented on the .NET Framework.\nAuthors: Poren Chiang <ren.chiang@gmail.com>, Jan Pilzer\nWebsite: https://docs.microsoft.com/dotnet/visual-basic/getting-started\nCategory: common\n*/ /** @type LanguageFn */ function vbnet(hljs) {\n    const regex = hljs.regex;\n    /**\n   * Character Literal\n   * Either a single character (\"a\"C) or an escaped double quote (\"\"\"\"C).\n   */ const CHARACTER = {\n        className: \"string\",\n        begin: /\"(\"\"|[^/n])\"C\\b/\n    };\n    const STRING = {\n        className: \"string\",\n        begin: /\"/,\n        end: /\"/,\n        illegal: /\\n/,\n        contains: [\n            {\n                // double quote escape\n                begin: /\"\"/\n            }\n        ]\n    };\n    /** Date Literals consist of a date, a time, or both separated by whitespace, surrounded by # */ const MM_DD_YYYY = /\\d{1,2}\\/\\d{1,2}\\/\\d{4}/;\n    const YYYY_MM_DD = /\\d{4}-\\d{1,2}-\\d{1,2}/;\n    const TIME_12H = /(\\d|1[012])(:\\d+){0,2} *(AM|PM)/;\n    const TIME_24H = /\\d{1,2}(:\\d{1,2}){1,2}/;\n    const DATE = {\n        className: \"literal\",\n        variants: [\n            {\n                // #YYYY-MM-DD# (ISO-Date) or #M/D/YYYY# (US-Date)\n                begin: regex.concat(/# */, regex.either(YYYY_MM_DD, MM_DD_YYYY), / *#/)\n            },\n            {\n                // #H:mm[:ss]# (24h Time)\n                begin: regex.concat(/# */, TIME_24H, / *#/)\n            },\n            {\n                // #h[:mm[:ss]] A# (12h Time)\n                begin: regex.concat(/# */, TIME_12H, / *#/)\n            },\n            {\n                // date plus time\n                begin: regex.concat(/# */, regex.either(YYYY_MM_DD, MM_DD_YYYY), / +/, regex.either(TIME_12H, TIME_24H), / *#/)\n            }\n        ]\n    };\n    const NUMBER = {\n        className: \"number\",\n        relevance: 0,\n        variants: [\n            {\n                // Float\n                begin: /\\b\\d[\\d_]*((\\.[\\d_]+(E[+-]?[\\d_]+)?)|(E[+-]?[\\d_]+))[RFD@!#]?/\n            },\n            {\n                // Integer (base 10)\n                begin: /\\b\\d[\\d_]*((U?[SIL])|[%&])?/\n            },\n            {\n                // Integer (base 16)\n                begin: /&H[\\dA-F_]+((U?[SIL])|[%&])?/\n            },\n            {\n                // Integer (base 8)\n                begin: /&O[0-7_]+((U?[SIL])|[%&])?/\n            },\n            {\n                // Integer (base 2)\n                begin: /&B[01_]+((U?[SIL])|[%&])?/\n            }\n        ]\n    };\n    const LABEL = {\n        className: \"label\",\n        begin: /^\\w+:/\n    };\n    const DOC_COMMENT = hljs.COMMENT(/'''/, /$/, {\n        contains: [\n            {\n                className: \"doctag\",\n                begin: /<\\/?/,\n                end: />/\n            }\n        ]\n    });\n    const COMMENT = hljs.COMMENT(null, /$/, {\n        variants: [\n            {\n                begin: /'/\n            },\n            {\n                // TODO: Use multi-class for leading spaces\n                begin: /([\\t ]|^)REM(?=\\s)/\n            }\n        ]\n    });\n    const DIRECTIVES = {\n        className: \"meta\",\n        // TODO: Use multi-class for indentation once available\n        begin: /[\\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\\b/,\n        end: /$/,\n        keywords: {\n            keyword: \"const disable else elseif enable end externalsource if region then\"\n        },\n        contains: [\n            COMMENT\n        ]\n    };\n    return {\n        name: \"Visual Basic .NET\",\n        aliases: [\n            \"vb\"\n        ],\n        case_insensitive: true,\n        classNameAliases: {\n            label: \"symbol\"\n        },\n        keywords: {\n            keyword: \"addhandler alias aggregate ansi as async assembly auto binary by byref byval \" /* a-b */  + \"call case catch class compare const continue custom declare default delegate dim distinct do \" /* c-d */  + \"each equals else elseif end enum erase error event exit explicit finally for friend from function \" /* e-f */  + \"get global goto group handles if implements imports in inherits interface into iterator \" /* g-i */  + \"join key let lib loop me mid module mustinherit mustoverride mybase myclass \" /* j-m */  + \"namespace narrowing new next notinheritable notoverridable \" /* n */  + \"of off on operator option optional order overloads overridable overrides \" /* o */  + \"paramarray partial preserve private property protected public \" /* p */  + \"raiseevent readonly redim removehandler resume return \" /* r */  + \"select set shadows shared skip static step stop structure strict sub synclock \" /* s */  + \"take text then throw to try unicode until using when where while widening with withevents writeonly yield\" /* t-y */ ,\n            built_in: // Operators https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators\n            \"addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor \" + \"cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort\",\n            type: // Data types https://docs.microsoft.com/dotnet/visual-basic/language-reference/data-types\n            \"boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort\",\n            literal: \"true false nothing\"\n        },\n        illegal: \"//|\\\\{|\\\\}|endif|gosub|variant|wend|^\\\\$ \" /* reserved deprecated keywords */ ,\n        contains: [\n            CHARACTER,\n            STRING,\n            DATE,\n            NUMBER,\n            LABEL,\n            DOC_COMMENT,\n            COMMENT,\n            DIRECTIVES\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/vbnet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/wasm.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/wasm.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ wasm)\n/* harmony export */ });\n/*\nLanguage: WebAssembly\nWebsite: https://webassembly.org\nDescription:  Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.\nCategory: web, common\nAudit: 2020\n*/ /** @type LanguageFn */ function wasm(hljs) {\n    hljs.regex;\n    const BLOCK_COMMENT = hljs.COMMENT(/\\(;/, /;\\)/);\n    BLOCK_COMMENT.contains.push(\"self\");\n    const LINE_COMMENT = hljs.COMMENT(/;;/, /$/);\n    const KWS = [\n        \"anyfunc\",\n        \"block\",\n        \"br\",\n        \"br_if\",\n        \"br_table\",\n        \"call\",\n        \"call_indirect\",\n        \"data\",\n        \"drop\",\n        \"elem\",\n        \"else\",\n        \"end\",\n        \"export\",\n        \"func\",\n        \"global.get\",\n        \"global.set\",\n        \"local.get\",\n        \"local.set\",\n        \"local.tee\",\n        \"get_global\",\n        \"get_local\",\n        \"global\",\n        \"if\",\n        \"import\",\n        \"local\",\n        \"loop\",\n        \"memory\",\n        \"memory.grow\",\n        \"memory.size\",\n        \"module\",\n        \"mut\",\n        \"nop\",\n        \"offset\",\n        \"param\",\n        \"result\",\n        \"return\",\n        \"select\",\n        \"set_global\",\n        \"set_local\",\n        \"start\",\n        \"table\",\n        \"tee_local\",\n        \"then\",\n        \"type\",\n        \"unreachable\"\n    ];\n    const FUNCTION_REFERENCE = {\n        begin: [\n            /(?:func|call|call_indirect)/,\n            /\\s+/,\n            /\\$[^\\s)]+/\n        ],\n        className: {\n            1: \"keyword\",\n            3: \"title.function\"\n        }\n    };\n    const ARGUMENT = {\n        className: \"variable\",\n        begin: /\\$[\\w_]+/\n    };\n    const PARENS = {\n        match: /(\\((?!;)|\\))+/,\n        className: \"punctuation\",\n        relevance: 0\n    };\n    const NUMBER = {\n        className: \"number\",\n        relevance: 0,\n        // borrowed from Prism, TODO: split out into variants\n        match: /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/\n    };\n    const TYPE = {\n        // look-ahead prevents us from gobbling up opcodes\n        match: /(i32|i64|f32|f64)(?!\\.)/,\n        className: \"type\"\n    };\n    const MATH_OPERATIONS = {\n        className: \"keyword\",\n        // borrowed from Prism, TODO: split out into variants\n        match: /\\b(f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))\\b/\n    };\n    const OFFSET_ALIGN = {\n        match: [\n            /(?:offset|align)/,\n            /\\s*/,\n            /=/\n        ],\n        className: {\n            1: \"keyword\",\n            3: \"operator\"\n        }\n    };\n    return {\n        name: \"WebAssembly\",\n        keywords: {\n            $pattern: /[\\w.]+/,\n            keyword: KWS\n        },\n        contains: [\n            LINE_COMMENT,\n            BLOCK_COMMENT,\n            OFFSET_ALIGN,\n            ARGUMENT,\n            PARENS,\n            FUNCTION_REFERENCE,\n            hljs.QUOTE_STRING_MODE,\n            TYPE,\n            MATH_OPERATIONS,\n            NUMBER\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2xhbmd1YWdlcy93YXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7O0FBTUEsR0FFQSxxQkFBcUIsR0FDckIsU0FBU0EsS0FBS0MsSUFBSTtJQUNoQkEsS0FBS0MsS0FBSztJQUNWLE1BQU1DLGdCQUFnQkYsS0FBS0csT0FBTyxDQUFDLE9BQU87SUFDMUNELGNBQWNFLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDO0lBQzVCLE1BQU1DLGVBQWVOLEtBQUtHLE9BQU8sQ0FBQyxNQUFNO0lBRXhDLE1BQU1JLE1BQU07UUFDVjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDRDtJQUVELE1BQU1DLHFCQUFxQjtRQUN6QkMsT0FBTztZQUNMO1lBQ0E7WUFDQTtTQUNEO1FBQ0RDLFdBQVc7WUFDVCxHQUFHO1lBQ0gsR0FBRztRQUNMO0lBQ0Y7SUFFQSxNQUFNQyxXQUFXO1FBQ2ZELFdBQVc7UUFDWEQsT0FBTztJQUNUO0lBRUEsTUFBTUcsU0FBUztRQUNiQyxPQUFPO1FBQ1BILFdBQVc7UUFDWEksV0FBVztJQUNiO0lBRUEsTUFBTUMsU0FBUztRQUNiTCxXQUFXO1FBQ1hJLFdBQVc7UUFDWCxxREFBcUQ7UUFDckRELE9BQU87SUFDVDtJQUVBLE1BQU1HLE9BQU87UUFDWCxrREFBa0Q7UUFDbERILE9BQU87UUFDUEgsV0FBVztJQUNiO0lBRUEsTUFBTU8sa0JBQWtCO1FBQ3RCUCxXQUFXO1FBQ1gscURBQXFEO1FBQ3JERyxPQUFPO0lBQ1Q7SUFFQSxNQUFNSyxlQUFlO1FBQ25CTCxPQUFPO1lBQ0w7WUFDQTtZQUNBO1NBQ0Q7UUFDREgsV0FBVztZQUNULEdBQUc7WUFDSCxHQUFHO1FBQ0w7SUFDRjtJQUVBLE9BQU87UUFDTFMsTUFBTTtRQUNOQyxVQUFVO1lBQ1JDLFVBQVU7WUFDVkMsU0FBU2Y7UUFDWDtRQUNBSCxVQUFVO1lBQ1JFO1lBQ0FKO1lBQ0FnQjtZQUNBUDtZQUNBQztZQUNBSjtZQUNBUixLQUFLdUIsaUJBQWlCO1lBQ3RCUDtZQUNBQztZQUNBRjtTQUNEO0lBQ0g7QUFDRjtBQUUyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2hhcmR3YXJlLWRvYy1jaGF0Ym90Ly4vbm9kZV9tb2R1bGVzL2hpZ2hsaWdodC5qcy9lcy9sYW5ndWFnZXMvd2FzbS5qcz8xMzdhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5MYW5ndWFnZTogV2ViQXNzZW1ibHlcbldlYnNpdGU6IGh0dHBzOi8vd2ViYXNzZW1ibHkub3JnXG5EZXNjcmlwdGlvbjogIFdhc20gaXMgZGVzaWduZWQgYXMgYSBwb3J0YWJsZSBjb21waWxhdGlvbiB0YXJnZXQgZm9yIHByb2dyYW1taW5nIGxhbmd1YWdlcywgZW5hYmxpbmcgZGVwbG95bWVudCBvbiB0aGUgd2ViIGZvciBjbGllbnQgYW5kIHNlcnZlciBhcHBsaWNhdGlvbnMuXG5DYXRlZ29yeTogd2ViLCBjb21tb25cbkF1ZGl0OiAyMDIwXG4qL1xuXG4vKiogQHR5cGUgTGFuZ3VhZ2VGbiAqL1xuZnVuY3Rpb24gd2FzbShobGpzKSB7XG4gIGhsanMucmVnZXg7XG4gIGNvbnN0IEJMT0NLX0NPTU1FTlQgPSBobGpzLkNPTU1FTlQoL1xcKDsvLCAvO1xcKS8pO1xuICBCTE9DS19DT01NRU5ULmNvbnRhaW5zLnB1c2goXCJzZWxmXCIpO1xuICBjb25zdCBMSU5FX0NPTU1FTlQgPSBobGpzLkNPTU1FTlQoLzs7LywgLyQvKTtcblxuICBjb25zdCBLV1MgPSBbXG4gICAgXCJhbnlmdW5jXCIsXG4gICAgXCJibG9ja1wiLFxuICAgIFwiYnJcIixcbiAgICBcImJyX2lmXCIsXG4gICAgXCJicl90YWJsZVwiLFxuICAgIFwiY2FsbFwiLFxuICAgIFwiY2FsbF9pbmRpcmVjdFwiLFxuICAgIFwiZGF0YVwiLFxuICAgIFwiZHJvcFwiLFxuICAgIFwiZWxlbVwiLFxuICAgIFwiZWxzZVwiLFxuICAgIFwiZW5kXCIsXG4gICAgXCJleHBvcnRcIixcbiAgICBcImZ1bmNcIixcbiAgICBcImdsb2JhbC5nZXRcIixcbiAgICBcImdsb2JhbC5zZXRcIixcbiAgICBcImxvY2FsLmdldFwiLFxuICAgIFwibG9jYWwuc2V0XCIsXG4gICAgXCJsb2NhbC50ZWVcIixcbiAgICBcImdldF9nbG9iYWxcIixcbiAgICBcImdldF9sb2NhbFwiLFxuICAgIFwiZ2xvYmFsXCIsXG4gICAgXCJpZlwiLFxuICAgIFwiaW1wb3J0XCIsXG4gICAgXCJsb2NhbFwiLFxuICAgIFwibG9vcFwiLFxuICAgIFwibWVtb3J5XCIsXG4gICAgXCJtZW1vcnkuZ3Jvd1wiLFxuICAgIFwibWVtb3J5LnNpemVcIixcbiAgICBcIm1vZHVsZVwiLFxuICAgIFwibXV0XCIsXG4gICAgXCJub3BcIixcbiAgICBcIm9mZnNldFwiLFxuICAgIFwicGFyYW1cIixcbiAgICBcInJlc3VsdFwiLFxuICAgIFwicmV0dXJuXCIsXG4gICAgXCJzZWxlY3RcIixcbiAgICBcInNldF9nbG9iYWxcIixcbiAgICBcInNldF9sb2NhbFwiLFxuICAgIFwic3RhcnRcIixcbiAgICBcInRhYmxlXCIsXG4gICAgXCJ0ZWVfbG9jYWxcIixcbiAgICBcInRoZW5cIixcbiAgICBcInR5cGVcIixcbiAgICBcInVucmVhY2hhYmxlXCJcbiAgXTtcblxuICBjb25zdCBGVU5DVElPTl9SRUZFUkVOQ0UgPSB7XG4gICAgYmVnaW46IFtcbiAgICAgIC8oPzpmdW5jfGNhbGx8Y2FsbF9pbmRpcmVjdCkvLFxuICAgICAgL1xccysvLFxuICAgICAgL1xcJFteXFxzKV0rL1xuICAgIF0sXG4gICAgY2xhc3NOYW1lOiB7XG4gICAgICAxOiBcImtleXdvcmRcIixcbiAgICAgIDM6IFwidGl0bGUuZnVuY3Rpb25cIlxuICAgIH1cbiAgfTtcblxuICBjb25zdCBBUkdVTUVOVCA9IHtcbiAgICBjbGFzc05hbWU6IFwidmFyaWFibGVcIixcbiAgICBiZWdpbjogL1xcJFtcXHdfXSsvXG4gIH07XG5cbiAgY29uc3QgUEFSRU5TID0ge1xuICAgIG1hdGNoOiAvKFxcKCg/ITspfFxcKSkrLyxcbiAgICBjbGFzc05hbWU6IFwicHVuY3R1YXRpb25cIixcbiAgICByZWxldmFuY2U6IDBcbiAgfTtcblxuICBjb25zdCBOVU1CRVIgPSB7XG4gICAgY2xhc3NOYW1lOiBcIm51bWJlclwiLFxuICAgIHJlbGV2YW5jZTogMCxcbiAgICAvLyBib3Jyb3dlZCBmcm9tIFByaXNtLCBUT0RPOiBzcGxpdCBvdXQgaW50byB2YXJpYW50c1xuICAgIG1hdGNoOiAvWystXT9cXGIoPzpcXGQoPzpfP1xcZCkqKD86XFwuXFxkKD86Xz9cXGQpKik/KD86W2VFXVsrLV0/XFxkKD86Xz9cXGQpKik/fDB4W1xcZGEtZkEtRl0oPzpfP1tcXGRhLWZBLUZdKSooPzpcXC5bXFxkYS1mQS1GXSg/Ol8/W1xcZGEtZkEtRF0pKik/KD86W3BQXVsrLV0/XFxkKD86Xz9cXGQpKik/KVxcYnxcXGJpbmZcXGJ8XFxibmFuKD86OjB4W1xcZGEtZkEtRl0oPzpfP1tcXGRhLWZBLURdKSopP1xcYi9cbiAgfTtcblxuICBjb25zdCBUWVBFID0ge1xuICAgIC8vIGxvb2stYWhlYWQgcHJldmVudHMgdXMgZnJvbSBnb2JibGluZyB1cCBvcGNvZGVzXG4gICAgbWF0Y2g6IC8oaTMyfGk2NHxmMzJ8ZjY0KSg/IVxcLikvLFxuICAgIGNsYXNzTmFtZTogXCJ0eXBlXCJcbiAgfTtcblxuICBjb25zdCBNQVRIX09QRVJBVElPTlMgPSB7XG4gICAgY2xhc3NOYW1lOiBcImtleXdvcmRcIixcbiAgICAvLyBib3Jyb3dlZCBmcm9tIFByaXNtLCBUT0RPOiBzcGxpdCBvdXQgaW50byB2YXJpYW50c1xuICAgIG1hdGNoOiAvXFxiKGYzMnxmNjR8aTMyfGk2NCkoPzpcXC4oPzphYnN8YWRkfGFuZHxjZWlsfGNsenxjb25zdHxjb252ZXJ0X1tzdV1cXC9pKD86MzJ8NjQpfGNvcHlzaWdufGN0enxkZW1vdGVcXC9mNjR8ZGl2KD86X1tzdV0pP3xlcXo/fGV4dGVuZF9bc3VdXFwvaTMyfGZsb29yfGdlKD86X1tzdV0pP3xndCg/Ol9bc3VdKT98bGUoPzpfW3N1XSk/fGxvYWQoPzooPzo4fDE2fDMyKV9bc3VdKT98bHQoPzpfW3N1XSk/fG1heHxtaW58bXVsfG5lYXJlc3R8bmVnP3xvcnxwb3BjbnR8cHJvbW90ZVxcL2YzMnxyZWludGVycHJldFxcL1tmaV0oPzozMnw2NCl8cmVtX1tzdV18cm90W2xyXXxzaGx8c2hyX1tzdV18c3RvcmUoPzo4fDE2fDMyKT98c3FydHxzdWJ8dHJ1bmMoPzpfW3N1XVxcL2YoPzozMnw2NCkpP3x3cmFwXFwvaTY0fHhvcikpXFxiL1xuICB9O1xuXG4gIGNvbnN0IE9GRlNFVF9BTElHTiA9IHtcbiAgICBtYXRjaDogW1xuICAgICAgLyg/Om9mZnNldHxhbGlnbikvLFxuICAgICAgL1xccyovLFxuICAgICAgLz0vXG4gICAgXSxcbiAgICBjbGFzc05hbWU6IHtcbiAgICAgIDE6IFwia2V5d29yZFwiLFxuICAgICAgMzogXCJvcGVyYXRvclwiXG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ1dlYkFzc2VtYmx5JyxcbiAgICBrZXl3b3Jkczoge1xuICAgICAgJHBhdHRlcm46IC9bXFx3Ll0rLyxcbiAgICAgIGtleXdvcmQ6IEtXU1xuICAgIH0sXG4gICAgY29udGFpbnM6IFtcbiAgICAgIExJTkVfQ09NTUVOVCxcbiAgICAgIEJMT0NLX0NPTU1FTlQsXG4gICAgICBPRkZTRVRfQUxJR04sXG4gICAgICBBUkdVTUVOVCxcbiAgICAgIFBBUkVOUyxcbiAgICAgIEZVTkNUSU9OX1JFRkVSRU5DRSxcbiAgICAgIGhsanMuUVVPVEVfU1RSSU5HX01PREUsXG4gICAgICBUWVBFLFxuICAgICAgTUFUSF9PUEVSQVRJT05TLFxuICAgICAgTlVNQkVSXG4gICAgXVxuICB9O1xufVxuXG5leHBvcnQgeyB3YXNtIGFzIGRlZmF1bHQgfTtcbiJdLCJuYW1lcyI6WyJ3YXNtIiwiaGxqcyIsInJlZ2V4IiwiQkxPQ0tfQ09NTUVOVCIsIkNPTU1FTlQiLCJjb250YWlucyIsInB1c2giLCJMSU5FX0NPTU1FTlQiLCJLV1MiLCJGVU5DVElPTl9SRUZFUkVOQ0UiLCJiZWdpbiIsImNsYXNzTmFtZSIsIkFSR1VNRU5UIiwiUEFSRU5TIiwibWF0Y2giLCJyZWxldmFuY2UiLCJOVU1CRVIiLCJUWVBFIiwiTUFUSF9PUEVSQVRJT05TIiwiT0ZGU0VUX0FMSUdOIiwibmFtZSIsImtleXdvcmRzIiwiJHBhdHRlcm4iLCJrZXl3b3JkIiwiUVVPVEVfU1RSSU5HX01PREUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/wasm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/xml.js":
/*!*******************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/xml.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ xml)\n/* harmony export */ });\n/*\nLanguage: HTML, XML\nWebsite: https://www.w3.org/XML/\nCategory: common, web\nAudit: 2020\n*/ /** @type LanguageFn */ function xml(hljs) {\n    const regex = hljs.regex;\n    // XML names can have the following additional letters: https://www.w3.org/TR/xml/#NT-NameChar\n    // OTHER_NAME_CHARS = /[:\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]/;\n    // Element names start with NAME_START_CHAR followed by optional other Unicode letters, ASCII digits, hyphens, underscores, and periods\n    // const TAG_NAME_RE = regex.concat(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/, regex.optional(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*:/), /[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*/);;\n    // const XML_IDENT_RE = /[A-Z_a-z:\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]+/;\n    // const TAG_NAME_RE = regex.concat(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/, regex.optional(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*:/), /[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*/);\n    // however, to cater for performance and more Unicode support rely simply on the Unicode letter class\n    const TAG_NAME_RE = regex.concat(/[\\p{L}_]/u, regex.optional(/[\\p{L}0-9_.-]*:/u), /[\\p{L}0-9_.-]*/u);\n    const XML_IDENT_RE = /[\\p{L}0-9._:-]+/u;\n    const XML_ENTITIES = {\n        className: \"symbol\",\n        begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/\n    };\n    const XML_META_KEYWORDS = {\n        begin: /\\s/,\n        contains: [\n            {\n                className: \"keyword\",\n                begin: /#?[a-z_][a-z1-9_-]+/,\n                illegal: /\\n/\n            }\n        ]\n    };\n    const XML_META_PAR_KEYWORDS = hljs.inherit(XML_META_KEYWORDS, {\n        begin: /\\(/,\n        end: /\\)/\n    });\n    const APOS_META_STRING_MODE = hljs.inherit(hljs.APOS_STRING_MODE, {\n        className: \"string\"\n    });\n    const QUOTE_META_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, {\n        className: \"string\"\n    });\n    const TAG_INTERNALS = {\n        endsWithParent: true,\n        illegal: /</,\n        relevance: 0,\n        contains: [\n            {\n                className: \"attr\",\n                begin: XML_IDENT_RE,\n                relevance: 0\n            },\n            {\n                begin: /=\\s*/,\n                relevance: 0,\n                contains: [\n                    {\n                        className: \"string\",\n                        endsParent: true,\n                        variants: [\n                            {\n                                begin: /\"/,\n                                end: /\"/,\n                                contains: [\n                                    XML_ENTITIES\n                                ]\n                            },\n                            {\n                                begin: /'/,\n                                end: /'/,\n                                contains: [\n                                    XML_ENTITIES\n                                ]\n                            },\n                            {\n                                begin: /[^\\s\"'=<>`]+/\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    };\n    return {\n        name: \"HTML, XML\",\n        aliases: [\n            \"html\",\n            \"xhtml\",\n            \"rss\",\n            \"atom\",\n            \"xjb\",\n            \"xsd\",\n            \"xsl\",\n            \"plist\",\n            \"wsf\",\n            \"svg\"\n        ],\n        case_insensitive: true,\n        unicodeRegex: true,\n        contains: [\n            {\n                className: \"meta\",\n                begin: /<![a-z]/,\n                end: />/,\n                relevance: 10,\n                contains: [\n                    XML_META_KEYWORDS,\n                    QUOTE_META_STRING_MODE,\n                    APOS_META_STRING_MODE,\n                    XML_META_PAR_KEYWORDS,\n                    {\n                        begin: /\\[/,\n                        end: /\\]/,\n                        contains: [\n                            {\n                                className: \"meta\",\n                                begin: /<![a-z]/,\n                                end: />/,\n                                contains: [\n                                    XML_META_KEYWORDS,\n                                    XML_META_PAR_KEYWORDS,\n                                    QUOTE_META_STRING_MODE,\n                                    APOS_META_STRING_MODE\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            },\n            hljs.COMMENT(/<!--/, /-->/, {\n                relevance: 10\n            }),\n            {\n                begin: /<!\\[CDATA\\[/,\n                end: /\\]\\]>/,\n                relevance: 10\n            },\n            XML_ENTITIES,\n            // xml processing instructions\n            {\n                className: \"meta\",\n                end: /\\?>/,\n                variants: [\n                    {\n                        begin: /<\\?xml/,\n                        relevance: 10,\n                        contains: [\n                            QUOTE_META_STRING_MODE\n                        ]\n                    },\n                    {\n                        begin: /<\\?[a-z][a-z0-9]+/\n                    }\n                ]\n            },\n            {\n                className: \"tag\",\n                /*\n        The lookahead pattern (?=...) ensures that 'begin' only matches\n        '<style' as a single word, followed by a whitespace or an\n        ending bracket.\n        */ begin: /<style(?=\\s|>)/,\n                end: />/,\n                keywords: {\n                    name: \"style\"\n                },\n                contains: [\n                    TAG_INTERNALS\n                ],\n                starts: {\n                    end: /<\\/style>/,\n                    returnEnd: true,\n                    subLanguage: [\n                        \"css\",\n                        \"xml\"\n                    ]\n                }\n            },\n            {\n                className: \"tag\",\n                // See the comment in the <style tag about the lookahead pattern\n                begin: /<script(?=\\s|>)/,\n                end: />/,\n                keywords: {\n                    name: \"script\"\n                },\n                contains: [\n                    TAG_INTERNALS\n                ],\n                starts: {\n                    end: /<\\/script>/,\n                    returnEnd: true,\n                    subLanguage: [\n                        \"javascript\",\n                        \"handlebars\",\n                        \"xml\"\n                    ]\n                }\n            },\n            // we need this for now for jSX\n            {\n                className: \"tag\",\n                begin: /<>|<\\/>/\n            },\n            // open tag\n            {\n                className: \"tag\",\n                begin: regex.concat(/</, regex.lookahead(regex.concat(TAG_NAME_RE, // <tag/>\n                // <tag>\n                // <tag ...\n                regex.either(/\\/>/, />/, /\\s/)))),\n                end: /\\/?>/,\n                contains: [\n                    {\n                        className: \"name\",\n                        begin: TAG_NAME_RE,\n                        relevance: 0,\n                        starts: TAG_INTERNALS\n                    }\n                ]\n            },\n            // close tag\n            {\n                className: \"tag\",\n                begin: regex.concat(/<\\//, regex.lookahead(regex.concat(TAG_NAME_RE, />/))),\n                contains: [\n                    {\n                        className: \"name\",\n                        begin: TAG_NAME_RE,\n                        relevance: 0\n                    },\n                    {\n                        begin: />/,\n                        relevance: 0,\n                        endsParent: true\n                    }\n                ]\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/xml.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/yaml.js":
/*!********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/yaml.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ yaml)\n/* harmony export */ });\n/*\nLanguage: YAML\nDescription: Yet Another Markdown Language\nAuthor: Stefan Wienert <stwienert@gmail.com>\nContributors: Carl Baxter <carl@cbax.tech>\nRequires: ruby.js\nWebsite: https://yaml.org\nCategory: common, config\n*/ function yaml(hljs) {\n    const LITERALS = \"true false yes no null\";\n    // YAML spec allows non-reserved URI characters in tags.\n    const URI_CHARACTERS = \"[\\\\w#;/?:@&=+$,.~*'()[\\\\]]+\";\n    // Define keys as starting with a word character\n    // ...containing word chars, spaces, colons, forward-slashes, hyphens and periods\n    // ...and ending with a colon followed immediately by a space, tab or newline.\n    // The YAML spec allows for much more than this, but this covers most use-cases.\n    const KEY = {\n        className: \"attr\",\n        variants: [\n            // added brackets support and special char support\n            {\n                begin: /[\\w*@][\\w*@ :()\\./-]*:(?=[ \\t]|$)/\n            },\n            {\n                begin: /\"[\\w*@][\\w*@ :()\\./-]*\":(?=[ \\t]|$)/\n            },\n            {\n                begin: /'[\\w*@][\\w*@ :()\\./-]*':(?=[ \\t]|$)/\n            }\n        ]\n    };\n    const TEMPLATE_VARIABLES = {\n        className: \"template-variable\",\n        variants: [\n            {\n                begin: /\\{\\{/,\n                end: /\\}\\}/\n            },\n            {\n                begin: /%\\{/,\n                end: /\\}/\n            }\n        ]\n    };\n    const SINGLE_QUOTE_STRING = {\n        className: \"string\",\n        relevance: 0,\n        begin: /'/,\n        end: /'/,\n        contains: [\n            {\n                match: /''/,\n                scope: \"char.escape\",\n                relevance: 0\n            }\n        ]\n    };\n    const STRING = {\n        className: \"string\",\n        relevance: 0,\n        variants: [\n            {\n                begin: /\"/,\n                end: /\"/\n            },\n            {\n                begin: /\\S+/\n            }\n        ],\n        contains: [\n            hljs.BACKSLASH_ESCAPE,\n            TEMPLATE_VARIABLES\n        ]\n    };\n    // Strings inside of value containers (objects) can't contain braces,\n    // brackets, or commas\n    const CONTAINER_STRING = hljs.inherit(STRING, {\n        variants: [\n            {\n                begin: /'/,\n                end: /'/,\n                contains: [\n                    {\n                        begin: /''/,\n                        relevance: 0\n                    }\n                ]\n            },\n            {\n                begin: /\"/,\n                end: /\"/\n            },\n            {\n                begin: /[^\\s,{}[\\]]+/\n            }\n        ]\n    });\n    const DATE_RE = \"[0-9]{4}(-[0-9][0-9]){0,2}\";\n    const TIME_RE = \"([Tt \\\\t][0-9][0-9]?(:[0-9][0-9]){2})?\";\n    const FRACTION_RE = \"(\\\\.[0-9]*)?\";\n    const ZONE_RE = \"([ \\\\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?\";\n    const TIMESTAMP = {\n        className: \"number\",\n        begin: \"\\\\b\" + DATE_RE + TIME_RE + FRACTION_RE + ZONE_RE + \"\\\\b\"\n    };\n    const VALUE_CONTAINER = {\n        end: \",\",\n        endsWithParent: true,\n        excludeEnd: true,\n        keywords: LITERALS,\n        relevance: 0\n    };\n    const OBJECT = {\n        begin: /\\{/,\n        end: /\\}/,\n        contains: [\n            VALUE_CONTAINER\n        ],\n        illegal: \"\\\\n\",\n        relevance: 0\n    };\n    const ARRAY = {\n        begin: \"\\\\[\",\n        end: \"\\\\]\",\n        contains: [\n            VALUE_CONTAINER\n        ],\n        illegal: \"\\\\n\",\n        relevance: 0\n    };\n    const MODES = [\n        KEY,\n        {\n            className: \"meta\",\n            begin: \"^---\\\\s*$\",\n            relevance: 10\n        },\n        {\n            // Blocks start with a | or > followed by a newline\n            //\n            // Indentation of subsequent lines must be the same to\n            // be considered part of the block\n            className: \"string\",\n            begin: \"[\\\\|>]([1-9]?[+-])?[ ]*\\\\n( +)[^ ][^\\\\n]*\\\\n(\\\\2[^\\\\n]+\\\\n?)*\"\n        },\n        {\n            begin: \"<%[%=-]?\",\n            end: \"[%-]?%>\",\n            subLanguage: \"ruby\",\n            excludeBegin: true,\n            excludeEnd: true,\n            relevance: 0\n        },\n        {\n            className: \"type\",\n            begin: \"!\\\\w+!\" + URI_CHARACTERS\n        },\n        // https://yaml.org/spec/1.2/spec.html#id2784064\n        {\n            className: \"type\",\n            begin: \"!<\" + URI_CHARACTERS + \">\"\n        },\n        {\n            className: \"type\",\n            begin: \"!\" + URI_CHARACTERS\n        },\n        {\n            className: \"type\",\n            begin: \"!!\" + URI_CHARACTERS\n        },\n        {\n            className: \"meta\",\n            begin: \"&\" + hljs.UNDERSCORE_IDENT_RE + \"$\"\n        },\n        {\n            className: \"meta\",\n            begin: \"\\\\*\" + hljs.UNDERSCORE_IDENT_RE + \"$\"\n        },\n        {\n            className: \"bullet\",\n            // TODO: remove |$ hack when we have proper look-ahead support\n            begin: \"-(?=[ ]|$)\",\n            relevance: 0\n        },\n        hljs.HASH_COMMENT_MODE,\n        {\n            beginKeywords: LITERALS,\n            keywords: {\n                literal: LITERALS\n            }\n        },\n        TIMESTAMP,\n        // numbers are any valid C-style number that\n        // sit isolated from other words\n        {\n            className: \"number\",\n            begin: hljs.C_NUMBER_RE + \"\\\\b\",\n            relevance: 0\n        },\n        OBJECT,\n        ARRAY,\n        SINGLE_QUOTE_STRING,\n        STRING\n    ];\n    const VALUE_MODES = [\n        ...MODES\n    ];\n    VALUE_MODES.pop();\n    VALUE_MODES.push(CONTAINER_STRING);\n    VALUE_CONTAINER.contains = VALUE_MODES;\n    return {\n        name: \"YAML\",\n        case_insensitive: true,\n        aliases: [\n            \"yml\"\n        ],\n        contains: MODES\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/yaml.js\n");

/***/ })

};
;